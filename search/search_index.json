{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gitcoin Gitcoin Grows Open Source. Learn more at https://gitcoin.co web repo This is the website that is live at gitcoin.co master branch - staging stable branch - live on gitcoin.co Documentation https://docs.gitcoin.co How to interact with this repo Table of Contents Gitcoin web repo Documentation How to interact with this repo Table of Contents On Github On Gitcoin What is Gitcoin? Developing HTTPS API Running locally With Docker (Recommended) Without Docker Overriding Application Defaults Trying out Gitcoin Posting your first issue Integrating Gitcoin Integrating the 'available work widget' into your repository Adding GitcoinBot to your repo Adding your token to Gitcoin High Level flows... Bounties Showing Support to Individuals Tips Kudos Licenses On Github Star and watch this github repository to stay up to date, we're pushing new code several times per week! Check out the CHANGELOG for details about recent changes to this repository. Also, want to become a contributor ? Checkout our guidelines & styleguide . check out the gitcoinco organization-wide repo . check out the open issues list, especially the discussion label and easy-pickings . On Gitcoin Check out the available open issues on Gitcoin . What is Gitcoin? Functionally, the app has several key features: Smart Contracts -- Where funded issues are stored and indexed. Brochureware -- Describes the project. Funded Issue Explorer -- A searchable index of all of the work available in the system. Funded Issue Submission / Acceptance flow -- Interface between the application and web3. API - the HTTPS API Bot - the GitcoinBot More about how/why to interact with web3 here . Technically, the system is architected: Web3 The main source of truth for the system is the Ethereum blockchain. Check out the smart contracts . Web2 This part of the app is built with Python, Django, Postgres, and a handful of other tools that are common in the web2 ecosystem. Web 3 Bridge This is the bridge between web3 and the rest of the application. Mostly built in javascript(web3js) and python(web3py). Brochureware Just a nice little landing page telling folks what the Gitcoin project is. Developing HTTPS API For more information on the HTTPS API, please view the api README Running locally With Docker (Recommended) For more information on running the app locally, please view the documentation for running gitcoinco/web with Docker Without Docker For more information on running the app locally, please view the documentation for running gitcoinco/web without Docker Overriding Application Defaults For more information on overriding the local dev environment configuration defaults, please view the environment variables documentation Trying out Gitcoin Posting your first issue If you have some work on your Github Issues board that you don't have time (or skills) to do. are dependant upon an upstream repo for something, and you'd like to incentivize them to work on it. try posting a funded issue at https://gitcoin.co/new . Integrating Gitcoin Basics Getting Started With Gitcoin Fund an Issue on Gitcoin Advanced Make a Contributor Friendly Repo Set your OSS repos monetary policy Payout Several Contribs at Once Crowdfund Bounties Background Everything you need to know about Gitcoin Our Vision: Open Source Money will BUIDL the OSS Ecosystem Testimonials & Case Studies Augur Balance uPort Ethereum Foundation Market Protocol Integrating the 'available work widget' into your repository This widget will help you advertise that you support Gitcoin bounties, so that your community knows the best place to contribute. Check out the widget documentation to learn how Adding GitcoinBot to your repo Gitcoinbot will allow you to add issues straight from github. Check out the gitcoinbot readme to learn how Adding your token to Gitcoin Have an ERC20 compatible token that you'd like to use on the platform? Great! Submit this form to submit it to the system High Level flows... Bounties Supporting Individuals Tips Kudos Bounties This is the high level flow of a bounty on Gitcoin: Chain of Custody Bounty Funder's Wallet StandardBounties Smart Contract deployed at 0x2af47a65da8cd66729b4209c22017d6a5c2d2400 (Submission Made) (Submission Accepted) Recipient's Wallet Anywhere between 2 and 4 above, Funder may withdraw their funds via 'Cancel Bounty' function for any reason. We may introduce arbitration at some point in the future. Until then, we are lucky that Github users are very protective of their reputation, and therefore very kind to each other, and disputes have not generally arisen. Showing Support to Individuals via Tips A free, fast way to show immediate gratitude towards an individual via github username or email address via Kudos Showcases special skills and appreciation towards other Gitcoin members. Tips This is the high level flow of a tip on Gitcoin: Kudos Note: - Crowdfunded bounties + bulk payouts are secured by Tips (at least until Standard Bounties 2.0 is released). - Kudos are also secured by Tips Licenses Code - GNU AFFERO GENERAL PUBLIC LICENSE Creative assets -- Attribution-NonCommercial-NoDerivatives 4.0 International","title":"Home"},{"location":"#gitcoin","text":"Gitcoin Grows Open Source. Learn more at https://gitcoin.co","title":"Gitcoin"},{"location":"#web-repo","text":"This is the website that is live at gitcoin.co master branch - staging stable branch - live on gitcoin.co","title":"web repo"},{"location":"#documentation","text":"https://docs.gitcoin.co","title":"Documentation"},{"location":"#how-to-interact-with-this-repo","text":"","title":"How to interact with this repo"},{"location":"#table-of-contents","text":"Gitcoin web repo Documentation How to interact with this repo Table of Contents On Github On Gitcoin What is Gitcoin? Developing HTTPS API Running locally With Docker (Recommended) Without Docker Overriding Application Defaults Trying out Gitcoin Posting your first issue Integrating Gitcoin Integrating the 'available work widget' into your repository Adding GitcoinBot to your repo Adding your token to Gitcoin High Level flows... Bounties Showing Support to Individuals Tips Kudos Licenses","title":"Table of Contents"},{"location":"#on-github","text":"Star and watch this github repository to stay up to date, we're pushing new code several times per week! Check out the CHANGELOG for details about recent changes to this repository. Also, want to become a contributor ? Checkout our guidelines & styleguide . check out the gitcoinco organization-wide repo . check out the open issues list, especially the discussion label and easy-pickings .","title":"On Github"},{"location":"#on-gitcoin","text":"Check out the available open issues on Gitcoin .","title":"On Gitcoin"},{"location":"#what-is-gitcoin","text":"Functionally, the app has several key features: Smart Contracts -- Where funded issues are stored and indexed. Brochureware -- Describes the project. Funded Issue Explorer -- A searchable index of all of the work available in the system. Funded Issue Submission / Acceptance flow -- Interface between the application and web3. API - the HTTPS API Bot - the GitcoinBot More about how/why to interact with web3 here . Technically, the system is architected: Web3 The main source of truth for the system is the Ethereum blockchain. Check out the smart contracts . Web2 This part of the app is built with Python, Django, Postgres, and a handful of other tools that are common in the web2 ecosystem. Web 3 Bridge This is the bridge between web3 and the rest of the application. Mostly built in javascript(web3js) and python(web3py). Brochureware Just a nice little landing page telling folks what the Gitcoin project is.","title":"What is Gitcoin?"},{"location":"#developing","text":"","title":"Developing"},{"location":"#https-api","text":"For more information on the HTTPS API, please view the api README","title":"HTTPS API"},{"location":"#running-locally","text":"","title":"Running locally"},{"location":"#with-docker-recommended","text":"For more information on running the app locally, please view the documentation for running gitcoinco/web with Docker","title":"With Docker (Recommended)"},{"location":"#without-docker","text":"For more information on running the app locally, please view the documentation for running gitcoinco/web without Docker","title":"Without Docker"},{"location":"#overriding-application-defaults","text":"For more information on overriding the local dev environment configuration defaults, please view the environment variables documentation","title":"Overriding Application Defaults"},{"location":"#trying-out-gitcoin","text":"","title":"Trying out Gitcoin"},{"location":"#posting-your-first-issue","text":"If you have some work on your Github Issues board that you don't have time (or skills) to do. are dependant upon an upstream repo for something, and you'd like to incentivize them to work on it. try posting a funded issue at https://gitcoin.co/new .","title":"Posting your first issue"},{"location":"#integrating-gitcoin","text":"Basics Getting Started With Gitcoin Fund an Issue on Gitcoin Advanced Make a Contributor Friendly Repo Set your OSS repos monetary policy Payout Several Contribs at Once Crowdfund Bounties Background Everything you need to know about Gitcoin Our Vision: Open Source Money will BUIDL the OSS Ecosystem Testimonials & Case Studies Augur Balance uPort Ethereum Foundation Market Protocol","title":"Integrating Gitcoin"},{"location":"#integrating-the-available-work-widget-into-your-repository","text":"This widget will help you advertise that you support Gitcoin bounties, so that your community knows the best place to contribute. Check out the widget documentation to learn how","title":"Integrating the 'available work widget' into your repository"},{"location":"#adding-gitcoinbot-to-your-repo","text":"Gitcoinbot will allow you to add issues straight from github. Check out the gitcoinbot readme to learn how","title":"Adding GitcoinBot to your repo"},{"location":"#adding-your-token-to-gitcoin","text":"Have an ERC20 compatible token that you'd like to use on the platform? Great! Submit this form to submit it to the system","title":"Adding your token to Gitcoin"},{"location":"#high-level-flows","text":"Bounties Supporting Individuals Tips Kudos","title":"High Level flows..."},{"location":"#bounties","text":"This is the high level flow of a bounty on Gitcoin: Chain of Custody Bounty Funder's Wallet StandardBounties Smart Contract deployed at 0x2af47a65da8cd66729b4209c22017d6a5c2d2400 (Submission Made) (Submission Accepted) Recipient's Wallet Anywhere between 2 and 4 above, Funder may withdraw their funds via 'Cancel Bounty' function for any reason. We may introduce arbitration at some point in the future. Until then, we are lucky that Github users are very protective of their reputation, and therefore very kind to each other, and disputes have not generally arisen.","title":"Bounties"},{"location":"#showing-support-to-individuals","text":"via Tips A free, fast way to show immediate gratitude towards an individual via github username or email address via Kudos Showcases special skills and appreciation towards other Gitcoin members.","title":"Showing Support to Individuals"},{"location":"#tips","text":"This is the high level flow of a tip on Gitcoin:","title":"Tips"},{"location":"#kudos","text":"Note: - Crowdfunded bounties + bulk payouts are secured by Tips (at least until Standard Bounties 2.0 is released). - Kudos are also secured by Tips","title":"Kudos"},{"location":"#licenses","text":"Code - GNU AFFERO GENERAL PUBLIC LICENSE Creative assets -- Attribution-NonCommercial-NoDerivatives 4.0 International","title":"Licenses"},{"location":"grants_faq/","text":"Grants General Documentation Grants General Documentation Round 8 Round 7 Architecture Background Checkout Flow Transfer Fees Round 6 Rounds 1\u20135 How Grants works Sub Miner More information Round 8 In round 8, the zkSync checkout flow was significantly simplified thanks to the new zksync-checkout library released by zkSync. This library natively supports batch transfers, meaning multiple transfers can be approved with just one L1 signature. This provides many benefits over the round 7 approach: It resolves the UX issues we worked around by introducing \"Gitcoin zkSync wallets\" in round 7 Security is improved, as Gitcoin never sees any of your zkSync private keys It provides a familiar web2 checkout flow, similar to \"Checkout with Amazon\" or \"Checkout with Google Pay\" It's less confusing to users as your transaction history on zkScan now shows ordinary transfers to grants instead of one big transfer to an unknown address These native batch transfers are atomic, so your checkout will either succeed or fail. The previous approach can leave user accounts in an odd state if one of the multiple transfers failed, and care must be taken to properly recover from this For more information on how this new checkout flow works, please see the zkSync Checkout documentation . Round 7 In round 7 we introduced the option to checkout on L2 using zkSync . This means there are now three possible checkout flows\u2014the Bulk Checkout flow introduced in Round 6, and two zkSync checkout flows. Architecture Background Before describing these two flows, we'll review how zkSync accounts work at a high level. When logging in to your zkSync account, such as at https://wallet.zksync.io/, you are asked to sign a message. That signature is used to generate a private key, and each transfer then requires two signatures\u2014one from this private key, and as an additional security measure, one more from your regular web3 wallet. This is great from a security perspective, but not so great from a UX perspective. Requiring one signature for each transfer can be a pain if you want to send a lot of transfers, so you'd be doing a lot of clicking when checking out with large carts. To remedy this, we ask you to login to a \"Gitcoin zkSync\" account. This generates an L1 account that the Gitcoin frontend can use to sign transactions directly. The private key to this account is derived from the signature, and is never stored or transmitted anywhere. We then login to zkSync with this account , and now can use this account to send transfers without prompting you for each transfer! Funds are only held by this account temporarily to improve UX. Because it does not permanently hold funds there is no additional security risk. Checkout Flow Based on the items in your cart, we check your zkSync balances to see if you already have enough funds on zkSync to complete checkout. If you do, the checkout flow is as follows: Sign a message to login to your Gitcoin zkSync account Sign a message to login to your regular zkSync account Sign a message to transfer funds from your regular zkSync account to your Gitcoin zkSync account Step 3 is repeated for each token you are donating. If you only are using DAI, step 3 will ask for one signature. If you are donating DAI and ETH, it will ask for two signatures. After those signatures are received, the transfers are executed so the funds are in your Gitcoin zkSync account. From there, all transfers of funds to grant owners are fired off in a rapid process that only takes a few seconds. Any leftover funds in the Gitcoin zkSync account (typically due to our conservative estimates of what zkSync trasfer fees will be) are transferred back to your regular zkSync account so you can access them at https://wallet.zksync.io/. If you do not have enough funds in your zkSync account to complete checkout, the flow is as follows: Sign a message to login to your Gitcoin zkSync account Confirm one transaction for each required ERC20 approval (~25k\u201350k gas) Confirm one transaction to deposit funds into zkSync (~180k\u2013200k gas) If you are only donating with one token, step 3 calls the deposit function directly on the zkSync contract . If you are donating with multiple tokens, step 3 uses our Batch ZkSync Deposit Contract to reduce both the number of transactions and the gas costs for multiple deposits. Funds are deposited directly to your Gitcoin zkSync account. To ensure your deposit is not reverted, it takes 10 confirmations for your deposit to be accepted by zkSync. After waiting for those 10 confirmations, we converge on the above flow, so all transfers of funds to grant owners are now executed. Again, any leftover funds in the Gitcoin zkSync account (in this case, this includes any additional funds you elected to deposit into zkSync) are transferred back to your regular zkSync account. Transfer Fees zkSync transfer costs can be found in their documentation . Right now it costs about 2k gas per transfer, compared to ~60k gas to transfer DAI on L1, and ~180k gas to deposit funds into zkSync. Once zkSync 1.1 is released, these transfer fees will be reduced to about 400 gas per transfer. These transfers support what zkSync calls gasless meta-transactions , where all transaction fees are paid in the token being transferred. For example, if you want to transfer 5 DAI, there may be a fee of, say, 0.10 DAI, resulting in a total cost of 5.10 DAI. When checking out with Gitcoin grants, fees are additive. If you have 20 DAI in your cart, the total cost will be 20 DAI plus transaction fees. Transfers to new recipients in zkSync cost more than transfers to users who have previously used zkSync. Gitcoin takes a conservative approach and assumes all transfers are to new users to ensure you don't run out of fees when transferring funds. As a result, the \"Estimated fees\" shown are checkout may be much higher than the actual fees you will pay. Any leftover fees are transferred from your Gitcoin zkSync account back to your regular zkSync account. Round 6 In round 6 we transitioned away from the EIP 1337 contract and replaced it with a single contract that enables bulk donations for all grants. The source of this BulkCheckout contract can be found here , and it has been deployed to the mainnet at 0x7d655c57f71464B6f83811C55D84009Cd9f5221C . It works as follows: Instead of funding each grant individually, grants are now added to your cart For each grant in your cart, you select the token and amount you want to donate Upon checking out, all donations are handled in a single transaction thanks to the BulkCheckout contract. This contract has one main function, donate() which takes an array of structs. Each struct contains all information required for a donation\u2014the token to donate with, the amount to donate, and the grant to donate to Prior to calling this function, the Gitcoin frontend will ensure you have approved the BulkCheckout contract to spend your tokens. If you haven't, you will be prompted to confirm an approval transaction for the exact amount to be donated. You are free to adjust the approval amount to remove the need to re-approve the contract in subsequent donations. After the approval transactions are submitted, the bulk checkout transaction is submitted through the donate() function. Rounds 1\u20135 grants is built upon EIP 1337 . specifically, it is built upon this smart contract which was audit'ed by ZKLabs in Q4 2018 . How Grants works When you create a new grant at /grants/new , you are deploying a new version of this contract. When you fund a new grant at /grants/<pk>/<slug>/fund , you are approve() ing a batch of ERC20 tokens to be sent, and you are signing a message that will be used to create recurring transactions down the line. How are those transactions created, you say? Well, it's via a sub-miner .... Sub Miner The subminer takes the signed message you created in the frontend (see above), and runs executeSubscription every periodSeconds interval. Here's what it does in psuedocode: iterate through all subscriptions: contract.methods.getSubscriptionHash(..) ready = contract.methods.isSubscriptionReady(..) if ready: contract.methods.executeSubscription(..) In order to run it, this is what you want to do: ./manage.py subminer <network> <optional_live_flag> aka ./manage.py subminer rinkeby --live When you run this code, it looks through all of the active grants on your local on <network> , and then runs executeSubscription() on them. if executeSubscription() succeeds, it will trigger some other actions (mostly emails, db mutations, etc) Heres an example successful tx created by the subminer: https://rinkeby.etherscan.io/tx/0x274c159a6d89513c3f0b533a5329bef4ce02b3ffc770bece9a8ce5d269319f72 More information For more information on the subminer for grants, checkout https://github.com/gitcoinco/web/issues/2424 https://github.com/gitcoinco/web/pull/3055 https://discord.gg/gitcoin http://1337alliance.com","title":"Local Setup"},{"location":"grants_faq/#grants-general-documentation","text":"Grants General Documentation Round 8 Round 7 Architecture Background Checkout Flow Transfer Fees Round 6 Rounds 1\u20135 How Grants works Sub Miner More information","title":"Grants General Documentation"},{"location":"grants_faq/#round-8","text":"In round 8, the zkSync checkout flow was significantly simplified thanks to the new zksync-checkout library released by zkSync. This library natively supports batch transfers, meaning multiple transfers can be approved with just one L1 signature. This provides many benefits over the round 7 approach: It resolves the UX issues we worked around by introducing \"Gitcoin zkSync wallets\" in round 7 Security is improved, as Gitcoin never sees any of your zkSync private keys It provides a familiar web2 checkout flow, similar to \"Checkout with Amazon\" or \"Checkout with Google Pay\" It's less confusing to users as your transaction history on zkScan now shows ordinary transfers to grants instead of one big transfer to an unknown address These native batch transfers are atomic, so your checkout will either succeed or fail. The previous approach can leave user accounts in an odd state if one of the multiple transfers failed, and care must be taken to properly recover from this For more information on how this new checkout flow works, please see the zkSync Checkout documentation .","title":"Round 8"},{"location":"grants_faq/#round-7","text":"In round 7 we introduced the option to checkout on L2 using zkSync . This means there are now three possible checkout flows\u2014the Bulk Checkout flow introduced in Round 6, and two zkSync checkout flows.","title":"Round 7"},{"location":"grants_faq/#architecture-background","text":"Before describing these two flows, we'll review how zkSync accounts work at a high level. When logging in to your zkSync account, such as at https://wallet.zksync.io/, you are asked to sign a message. That signature is used to generate a private key, and each transfer then requires two signatures\u2014one from this private key, and as an additional security measure, one more from your regular web3 wallet. This is great from a security perspective, but not so great from a UX perspective. Requiring one signature for each transfer can be a pain if you want to send a lot of transfers, so you'd be doing a lot of clicking when checking out with large carts. To remedy this, we ask you to login to a \"Gitcoin zkSync\" account. This generates an L1 account that the Gitcoin frontend can use to sign transactions directly. The private key to this account is derived from the signature, and is never stored or transmitted anywhere. We then login to zkSync with this account , and now can use this account to send transfers without prompting you for each transfer! Funds are only held by this account temporarily to improve UX. Because it does not permanently hold funds there is no additional security risk.","title":"Architecture Background"},{"location":"grants_faq/#checkout-flow","text":"Based on the items in your cart, we check your zkSync balances to see if you already have enough funds on zkSync to complete checkout. If you do, the checkout flow is as follows: Sign a message to login to your Gitcoin zkSync account Sign a message to login to your regular zkSync account Sign a message to transfer funds from your regular zkSync account to your Gitcoin zkSync account Step 3 is repeated for each token you are donating. If you only are using DAI, step 3 will ask for one signature. If you are donating DAI and ETH, it will ask for two signatures. After those signatures are received, the transfers are executed so the funds are in your Gitcoin zkSync account. From there, all transfers of funds to grant owners are fired off in a rapid process that only takes a few seconds. Any leftover funds in the Gitcoin zkSync account (typically due to our conservative estimates of what zkSync trasfer fees will be) are transferred back to your regular zkSync account so you can access them at https://wallet.zksync.io/. If you do not have enough funds in your zkSync account to complete checkout, the flow is as follows: Sign a message to login to your Gitcoin zkSync account Confirm one transaction for each required ERC20 approval (~25k\u201350k gas) Confirm one transaction to deposit funds into zkSync (~180k\u2013200k gas) If you are only donating with one token, step 3 calls the deposit function directly on the zkSync contract . If you are donating with multiple tokens, step 3 uses our Batch ZkSync Deposit Contract to reduce both the number of transactions and the gas costs for multiple deposits. Funds are deposited directly to your Gitcoin zkSync account. To ensure your deposit is not reverted, it takes 10 confirmations for your deposit to be accepted by zkSync. After waiting for those 10 confirmations, we converge on the above flow, so all transfers of funds to grant owners are now executed. Again, any leftover funds in the Gitcoin zkSync account (in this case, this includes any additional funds you elected to deposit into zkSync) are transferred back to your regular zkSync account.","title":"Checkout Flow"},{"location":"grants_faq/#transfer-fees","text":"zkSync transfer costs can be found in their documentation . Right now it costs about 2k gas per transfer, compared to ~60k gas to transfer DAI on L1, and ~180k gas to deposit funds into zkSync. Once zkSync 1.1 is released, these transfer fees will be reduced to about 400 gas per transfer. These transfers support what zkSync calls gasless meta-transactions , where all transaction fees are paid in the token being transferred. For example, if you want to transfer 5 DAI, there may be a fee of, say, 0.10 DAI, resulting in a total cost of 5.10 DAI. When checking out with Gitcoin grants, fees are additive. If you have 20 DAI in your cart, the total cost will be 20 DAI plus transaction fees. Transfers to new recipients in zkSync cost more than transfers to users who have previously used zkSync. Gitcoin takes a conservative approach and assumes all transfers are to new users to ensure you don't run out of fees when transferring funds. As a result, the \"Estimated fees\" shown are checkout may be much higher than the actual fees you will pay. Any leftover fees are transferred from your Gitcoin zkSync account back to your regular zkSync account.","title":"Transfer Fees"},{"location":"grants_faq/#round-6","text":"In round 6 we transitioned away from the EIP 1337 contract and replaced it with a single contract that enables bulk donations for all grants. The source of this BulkCheckout contract can be found here , and it has been deployed to the mainnet at 0x7d655c57f71464B6f83811C55D84009Cd9f5221C . It works as follows: Instead of funding each grant individually, grants are now added to your cart For each grant in your cart, you select the token and amount you want to donate Upon checking out, all donations are handled in a single transaction thanks to the BulkCheckout contract. This contract has one main function, donate() which takes an array of structs. Each struct contains all information required for a donation\u2014the token to donate with, the amount to donate, and the grant to donate to Prior to calling this function, the Gitcoin frontend will ensure you have approved the BulkCheckout contract to spend your tokens. If you haven't, you will be prompted to confirm an approval transaction for the exact amount to be donated. You are free to adjust the approval amount to remove the need to re-approve the contract in subsequent donations. After the approval transactions are submitted, the bulk checkout transaction is submitted through the donate() function.","title":"Round 6"},{"location":"grants_faq/#rounds-15","text":"grants is built upon EIP 1337 . specifically, it is built upon this smart contract which was audit'ed by ZKLabs in Q4 2018 .","title":"Rounds 1\u20135"},{"location":"grants_faq/#how-grants-works","text":"When you create a new grant at /grants/new , you are deploying a new version of this contract. When you fund a new grant at /grants/<pk>/<slug>/fund , you are approve() ing a batch of ERC20 tokens to be sent, and you are signing a message that will be used to create recurring transactions down the line. How are those transactions created, you say? Well, it's via a sub-miner ....","title":"How Grants works"},{"location":"grants_faq/#sub-miner","text":"The subminer takes the signed message you created in the frontend (see above), and runs executeSubscription every periodSeconds interval. Here's what it does in psuedocode: iterate through all subscriptions: contract.methods.getSubscriptionHash(..) ready = contract.methods.isSubscriptionReady(..) if ready: contract.methods.executeSubscription(..) In order to run it, this is what you want to do: ./manage.py subminer <network> <optional_live_flag> aka ./manage.py subminer rinkeby --live When you run this code, it looks through all of the active grants on your local on <network> , and then runs executeSubscription() on them. if executeSubscription() succeeds, it will trigger some other actions (mostly emails, db mutations, etc) Heres an example successful tx created by the subminer: https://rinkeby.etherscan.io/tx/0x274c159a6d89513c3f0b533a5329bef4ce02b3ffc770bece9a8ce5d269319f72","title":"Sub Miner"},{"location":"grants_faq/#more-information","text":"For more information on the subminer for grants, checkout https://github.com/gitcoinco/web/issues/2424 https://github.com/gitcoinco/web/pull/3055 https://discord.gg/gitcoin http://1337alliance.com","title":"More information"},{"location":"kudos_faq/","text":"Kudos General Documentation How to populate my DB with kudos First be aware to update your .env with this entries KUDOS_NETWORK=rinkeby KUDOS_OWNER_ACCOUNT= YOUR_ADDRESS KUDOS_LOCAL_SYNC=off Then run the commands docker-compose up docker-compose exec web bash -c 'cd app && python manage.py sync_kudos rinkeby filter --start earliest' How do I MINT kudos on my local RPC node This answer assumes you're using docker. Run these commands # start from the directory on your local filesystem that contains the gitcoinco web repo cd .. git clone git@github.com:gitcoinco/Kudos721Contract.git cd Kudos721Contract npm install openzeppelin cd ../web bash scripts/mint_test_kudos.bash The above commands clone the Kudos smart contract, installs the dependencies, deploys the smart contract to ganache, and mints several kudos in the newly minted smart contract. After the scripts/mint_test_kudos.bash script runs, you will have kudos on your local docker container, via the localhost RPC node Where is Kudos deployed Please checkout the github repo for Kudos to see this information. Can I see the Kudos security audit Please checkout the github repo for Kudos to see this information. What is Kudos Direct Send Kudos Direct Send (KDS) is a direct send of a Kudos ERC 721 NFT from one Ethereum address to another. Are Kudos unique Kudos are semi-fungible tokens. Each kudos has a limited production run which is designated in the smart contract in the numClonesAllowed variable.. For example, this kudos has a total of 200 that will ever be in existence. When a new kudos is minted we create a new Gen 0 Kudos . That Gen 0 Kudos can then be cloned up to numClonesAllowed times, which will create numClonesAllowed Gen 1 Kudos . Creating limited production runs of Kudos allows us to manage the unit economics of Kudos. For example, it costs us $20 to pay our illustrator to create a new piece of artwork. Nobody is going to pay $20 for a Kudos NFT, so we instead offer a limited production run of 200 Kudos which are priced at $0.40 each. When that production run sells out, the artist has made gross $40 in revenue, which nets out to $20 in profit. What is Kudos Indirect Send? Kudos Indirect Send (KIS) enables Gitcoin users to send a Kudos to any github/gitcoin username . KIS is effectively a proxy account that can hold a Kudos 721 NFT until a recipient (who is authorized by a github username) claims it. The Kudos Indirect send architecture diagram is available here When is Kudos Indirect Send used and when is Kudos Direct Send Used? If a user has set a preferred Ethereum address in their account , KDS will be used. If not, KIS will be used. I have a question that's not listed here Checkout the Kudos FAQ here","title":"Local Setup FAQ"},{"location":"kudos_faq/#kudos-general-documentation","text":"","title":"Kudos General Documentation"},{"location":"kudos_faq/#how-to-populate-my-db-with-kudos","text":"First be aware to update your .env with this entries KUDOS_NETWORK=rinkeby KUDOS_OWNER_ACCOUNT= YOUR_ADDRESS KUDOS_LOCAL_SYNC=off Then run the commands docker-compose up docker-compose exec web bash -c 'cd app && python manage.py sync_kudos rinkeby filter --start earliest'","title":"How to populate my DB with kudos"},{"location":"kudos_faq/#how-do-i-mint-kudos-on-my-local-rpc-node","text":"This answer assumes you're using docker. Run these commands # start from the directory on your local filesystem that contains the gitcoinco web repo cd .. git clone git@github.com:gitcoinco/Kudos721Contract.git cd Kudos721Contract npm install openzeppelin cd ../web bash scripts/mint_test_kudos.bash The above commands clone the Kudos smart contract, installs the dependencies, deploys the smart contract to ganache, and mints several kudos in the newly minted smart contract. After the scripts/mint_test_kudos.bash script runs, you will have kudos on your local docker container, via the localhost RPC node","title":"How do I MINT kudos on my local RPC node"},{"location":"kudos_faq/#where-is-kudos-deployed","text":"Please checkout the github repo for Kudos to see this information.","title":"Where is Kudos deployed"},{"location":"kudos_faq/#can-i-see-the-kudos-security-audit","text":"Please checkout the github repo for Kudos to see this information.","title":"Can I see the Kudos security audit"},{"location":"kudos_faq/#what-is-kudos-direct-send","text":"Kudos Direct Send (KDS) is a direct send of a Kudos ERC 721 NFT from one Ethereum address to another.","title":"What is Kudos Direct Send"},{"location":"kudos_faq/#are-kudos-unique","text":"Kudos are semi-fungible tokens. Each kudos has a limited production run which is designated in the smart contract in the numClonesAllowed variable.. For example, this kudos has a total of 200 that will ever be in existence. When a new kudos is minted we create a new Gen 0 Kudos . That Gen 0 Kudos can then be cloned up to numClonesAllowed times, which will create numClonesAllowed Gen 1 Kudos . Creating limited production runs of Kudos allows us to manage the unit economics of Kudos. For example, it costs us $20 to pay our illustrator to create a new piece of artwork. Nobody is going to pay $20 for a Kudos NFT, so we instead offer a limited production run of 200 Kudos which are priced at $0.40 each. When that production run sells out, the artist has made gross $40 in revenue, which nets out to $20 in profit.","title":"Are Kudos unique"},{"location":"kudos_faq/#what-is-kudos-indirect-send","text":"Kudos Indirect Send (KIS) enables Gitcoin users to send a Kudos to any github/gitcoin username . KIS is effectively a proxy account that can hold a Kudos 721 NFT until a recipient (who is authorized by a github username) claims it. The Kudos Indirect send architecture diagram is available here","title":"What is Kudos Indirect Send?"},{"location":"kudos_faq/#when-is-kudos-indirect-send-used-and-when-is-kudos-direct-send-used","text":"If a user has set a preferred Ethereum address in their account , KDS will be used. If not, KIS will be used.","title":"When is Kudos Indirect Send used and when is Kudos Direct Send Used?"},{"location":"kudos_faq/#i-have-a-question-thats-not-listed-here","text":"Checkout the Kudos FAQ here","title":"I have a question that's not listed here"},{"location":"mk_advanced/","text":"Advanced Usage Performance and Profiling You can profile functions locally by enabling Django Silk by setting the environment variable: ENABLE_SILK to on in your .env file. If your local environment is already running, you will need to restart the web application via: docker-compose restart web Profiling a method Once enabled, you may use silk by decorating methods with @silk_profile . For example: from silk.profiling.profiler import silk_profile @silk_profile(name='View About') def about(request): context = { 'active': 'about', 'title': 'About', } return TemplateResponse(request, 'about.html', context) Viewing Profiling Results You may view the profiling results by visiting: http://localhost:8000/silk Additional Help Silk Documentation Silk Github Gitcoin Environment Variable Documentation","title":"Advanced"},{"location":"mk_advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"mk_advanced/#performance-and-profiling","text":"You can profile functions locally by enabling Django Silk by setting the environment variable: ENABLE_SILK to on in your .env file. If your local environment is already running, you will need to restart the web application via: docker-compose restart web","title":"Performance and Profiling"},{"location":"mk_advanced/#profiling-a-method","text":"Once enabled, you may use silk by decorating methods with @silk_profile . For example: from silk.profiling.profiler import silk_profile @silk_profile(name='View About') def about(request): context = { 'active': 'about', 'title': 'About', } return TemplateResponse(request, 'about.html', context)","title":"Profiling a method"},{"location":"mk_advanced/#viewing-profiling-results","text":"You may view the profiling results by visiting: http://localhost:8000/silk","title":"Viewing Profiling Results"},{"location":"mk_advanced/#additional-help","text":"Silk Documentation Silk Github Gitcoin Environment Variable Documentation","title":"Additional Help"},{"location":"mk_alternative_setup/","text":"Running Locally without Docker *Note: This setup method is not recommended. To ensure a consistent environment, please check out the Docker Setup Guide . ~/$ brew install libmaxminddb automake pkg-config libtool libffi gmp python3 openssl libvips libvips-dev libvips-tools ~/$ git clone https://github.com/gitcoinco/web.git ~/$ cd web/app ~/web/app$ cp app/local.env app/.env You will need to edit the app/.env file with your local environment variables. Look for config items that are marked # required . Configure Integrations (recommended) If you plan on using the Github and/or Google integration, please read the third party integration guide . Static Asset Handling (optional) If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co' Setup Database PostgreSQL is the database used by this application. Here are some instructions for installing PostgreSQL on various operating systems. OSX Windows Ubuntu Once you have Postgres installed and running on your system, enter into a Postgres session. # For linux users ~/$ sudo -u postgres psql # For macOS users ~/$ psql -d postgres Create the database and a new privileged user. CREATE USER gitcoin_user WITH PASSWORD 'password'; CREATE DATABASE gitcoin WITH OWNER gitcoin_user; Exit Postgres session ~/$ \\q Update ~/web/app/app/.env with the connection details, if required. DATABASE_URL=psql://gitcoin_user:password@localhost:5432/gitcoin Setup Dependencies and Startup Server Setup Virtual Environment with Necessary Dependencies ~/web$ virtualenv -p python3.7 gcoin ~/web$ source gcoin/bin/activate ~/web$ pip3 install -r requirements/test.txt Alternatively, if any installation errors occur: *Note: A single error will stop the entire installation process when installing from a requirements file, this will install each module one at a time keeping installation failures isolated ~/web$ awk '!/^(-r)/' requirements/prod.txt requirements/test.txt | xargs -n 1 pip3 install Startup Server ~/web/app$ ./manage.py migrate ~/web/app$ ./manage.py createcachetable ~/web/app$ ./manage.py get_prices ~/web/app$ ./manage.py runserver 0.0.0.0:8000 Navigate to http://localhost:8000/ . Create Django Admin ~/web/app$ ./manage.py createsuperuser Optional: Import bounty data from web3 to your database This can be useful if you'd like data to test with: or equivalently: ~/web/app$ ./manage.py sync_geth rinkeby -20 99999999999","title":"Alternative Setup"},{"location":"mk_alternative_setup/#running-locally-without-docker","text":"*Note: This setup method is not recommended. To ensure a consistent environment, please check out the Docker Setup Guide . ~/$ brew install libmaxminddb automake pkg-config libtool libffi gmp python3 openssl libvips libvips-dev libvips-tools ~/$ git clone https://github.com/gitcoinco/web.git ~/$ cd web/app ~/web/app$ cp app/local.env app/.env You will need to edit the app/.env file with your local environment variables. Look for config items that are marked # required .","title":"Running Locally without Docker"},{"location":"mk_alternative_setup/#configure-integrations-recommended","text":"If you plan on using the Github and/or Google integration, please read the third party integration guide .","title":"Configure Integrations (recommended)"},{"location":"mk_alternative_setup/#static-asset-handling-optional","text":"If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co'","title":"Static Asset Handling (optional)"},{"location":"mk_alternative_setup/#setup-database","text":"PostgreSQL is the database used by this application. Here are some instructions for installing PostgreSQL on various operating systems. OSX Windows Ubuntu Once you have Postgres installed and running on your system, enter into a Postgres session. # For linux users ~/$ sudo -u postgres psql # For macOS users ~/$ psql -d postgres Create the database and a new privileged user. CREATE USER gitcoin_user WITH PASSWORD 'password'; CREATE DATABASE gitcoin WITH OWNER gitcoin_user; Exit Postgres session ~/$ \\q Update ~/web/app/app/.env with the connection details, if required. DATABASE_URL=psql://gitcoin_user:password@localhost:5432/gitcoin","title":"Setup Database"},{"location":"mk_alternative_setup/#setup-dependencies-and-startup-server","text":"","title":"Setup Dependencies and Startup Server"},{"location":"mk_alternative_setup/#setup-virtual-environment-with-necessary-dependencies","text":"~/web$ virtualenv -p python3.7 gcoin ~/web$ source gcoin/bin/activate ~/web$ pip3 install -r requirements/test.txt Alternatively, if any installation errors occur: *Note: A single error will stop the entire installation process when installing from a requirements file, this will install each module one at a time keeping installation failures isolated ~/web$ awk '!/^(-r)/' requirements/prod.txt requirements/test.txt | xargs -n 1 pip3 install","title":"Setup Virtual Environment with Necessary Dependencies"},{"location":"mk_alternative_setup/#startup-server","text":"~/web/app$ ./manage.py migrate ~/web/app$ ./manage.py createcachetable ~/web/app$ ./manage.py get_prices ~/web/app$ ./manage.py runserver 0.0.0.0:8000 Navigate to http://localhost:8000/ .","title":"Startup Server"},{"location":"mk_alternative_setup/#create-django-admin","text":"~/web/app$ ./manage.py createsuperuser","title":"Create Django Admin"},{"location":"mk_alternative_setup/#optional-import-bounty-data-from-web3-to-your-database","text":"This can be useful if you'd like data to test with: or equivalently: ~/web/app$ ./manage.py sync_geth rinkeby -20 99999999999","title":"Optional: Import bounty data from web3 to your database"},{"location":"mk_changelog/","text":"Changelog 20200728master (28/07/2020) [ closed ] Add dashboard for sponsors #7064 [ closed ] purge: ens #7060 [ closed ] unsubscribe daily email people if they haven't read in the last 30 days #7077 [ closed ] Add flag to display showcase #7087 [ closed ] Changes on hackathon onboarding #7149 [ Gitcoin Hackathon ][ filecoin-aug14 ] Restore hackathon indicator on presentation cards #7023 [ closed ] Stable #7147 [ closed ] New bounty form #7086 [ closed ] Change url for getting started CTA #7124 [ closed ] allow matic grant creation w/o web3 #7118 [ closed ] removes per tip txn limit #7101 [ closed ] Set the z-index for .activity.hackathon_new_hacker to 0 #7116 [ closed ] fixed sticky-top because new hacker town square post card #7089","title":"Changelog"},{"location":"mk_changelog/#changelog","text":"","title":"Changelog"},{"location":"mk_changelog/#20200728master-28072020","text":"[ closed ] Add dashboard for sponsors #7064 [ closed ] purge: ens #7060 [ closed ] unsubscribe daily email people if they haven't read in the last 30 days #7077 [ closed ] Add flag to display showcase #7087 [ closed ] Changes on hackathon onboarding #7149 [ Gitcoin Hackathon ][ filecoin-aug14 ] Restore hackathon indicator on presentation cards #7023 [ closed ] Stable #7147 [ closed ] New bounty form #7086 [ closed ] Change url for getting started CTA #7124 [ closed ] allow matic grant creation w/o web3 #7118 [ closed ] removes per tip txn limit #7101 [ closed ] Set the z-index for .activity.hackathon_new_hacker to 0 #7116 [ closed ] fixed sticky-top because new hacker town square post card #7089","title":"20200728master (28/07/2020)"},{"location":"mk_contributors/","text":"Contributing to Gitcoin Contributions to gitcoin could come in different forms. Some contribute code changes, others contribute docs, others help answer questions from users, help keep the infrastructure running, We welcome all contributions from folks who are willing to work in good faith with the community. No contribution is too small and all contributions are valued. Monetization Policy Code of Conduct Issues Discussions And General Help Pull Requests Step 1: Fork Step 2: Branch Step 3: Code Step 4: Commit Step 5: Rebase Step 6: PRs Python Docstrings Classes Methods Example VSCode Remote Debugger VSCode Prerequisites Add Launch Configuration VSCode Additional Resources Additional Resources FAQ Contributing Static Assets Monetization Policy This repo uses Gitcoin to incentivize contributions from contributors all around the world. We believe that properly incentivizing Open Source Software means providing funding to support contributors, but we also recognize the dangerous precedent that is set when contributors who have been contributing for intrinsic reasons begin to expect extrinsic rewards for their contributions. Gitcoin has written about this, in the abstract, here . Tangibly, our monetary policy is: Our mission is to \"Grow Open Source\". Read More about our Mission here . We believe that contributors should contribute for intrinsic reasons first (see mission statement above), and we hereby provide notice that we will not be able to fund all contributions. Appreciate it if and when a Tip comes! Scope that is explicitly funded upfront will be posted to the Github Issue by @gitcoinbot , and will also be posted to the Gitcoin Issue Explorer . Code of Conduct Contributions to Gitcoin are governed by the Contributor Covenant version 1.4 . All contributors and participants agree to abide by its terms. To report violations, shoot out an email to founders@gitcoin.co The Code of Conduct is designed and intended, above all else, to help establish a culture within the project that allows anyone and everyone who wants to contribute to feel safe doing so. Open, diverse, and inclusive communities live and die on the basis of trust. Contributors can disagree with one another so long as they are done in good faith and everyone is working towards a common goal. Issues Issues in gitcoin/web are the primary means by which bug reports and general discussions are made. A contributor is allowed to create an issue, discuss, and provide a fix if needed. Before opening an issue, check to see if there are any current issues with similar key words. This helps us cut down on duplicate tickets. When you open an issue , you'll notice four templates (bug, custom, discussion, feature) with the user-story format we like for our issue reports. When starting a new issue, please do your best to be as detailed and specific as possible. Bug report - use this to create a bug report to help us improve Gitcoin Discussion - use this template to start a discussion Feature request - use this to suggest a project idea Custom report - use this to report an issue that doesn't fall under any other category Discussions And General Help As Gitcoin is still at its early stages, drop by on Discord and say hi to know what's next / to get your answers cleared up. Pull Requests Pull Requests are the way in which concrete changes are made to the code and documentation. Prerequisites You must install pre-commit in order to enable our precommit hooks and pre-commit install from your gitcoinco/web root directory. In order to make use of the pre-commit hooks used for this repository, you should have a valid installation of node / npm , isort ( pip install isort ), yapf ( pip install yapf ), stylelint ( npm install -g stylelint ), and eslint ( npm install -g eslint ). User facing copy / text should be run through Django Translation Framework . For example, HTML user-facing pieces of copy are in {% blocktrans %} or {% trans %} fields. javascript user-facing pieces of copy are in gettext fields. each of the views.py user-facing pieces of copy are in gettext_lazy fields each of the models help_text s are internationalized as are all the emails in marketing/mails.py run make autotranslate or a combination of the necessary ./manage.py makemessages and ./manage.py compilemessages commands. If you are contributing user-facing assets, interface components or other relevant visuals, then please add them to our UI Inventory page. Step 1: Fork Fork the project on GitHub and clone your fork locally. git clone git@github.com:username/web.git cd web git remote add upstream https://github.com/gitcoinco/web.git git fetch upstream Step 2: Branch It's always better to create local branches to work on a specific issue. Makes life easier for you if you are the kind who enjoys multiple things parallely. These should also be created directly off of the master branch. git checkout -b my-branch Step 3: Code To keep the style of the Javascript code consistent we have a basic linting configured. To check your contributed code for errors run npm run eslint . To make life easy use the automatic fixing by running npm run eslint:fix before your commit. Use the pre-configured eslint for Javascript Avoid trailing whitespace & un-necessary white lines Indentation is as follows 1 tab = 2 spaces for .html and .js files 1 tab = 4 spaces for everything else Use rem for CSS when applicable Add relevant unit tests for all new Python logic and update existing tests to accommodate new logic. You can run tests via: make pytest If you introduce new backend methods or classes, you must include docstrings that conform to PEP-257 and follow the existing patterns throughout the codebase. See app/avatar/(models|views|utils).py - If you introduce a new django module, like: avatar or marketing , you must update pydocmd.yaml to include relevant python modules from the newly introduced app. Running the Cypress Tests: Gitcoin is experimenting with the use of Cypress for end-to-end testing. To run the Cypress tests locally you must first ensure you have started the application with the TEST_MNEMONIC environment variable set. This should be set to the same value as the SECRET_WORDS variable found in bin/cypress/vars.sh . $ export TEST_MNEMONIC=\"...\" $ docker-compose up --build # the build flag is optional Once the application is up and running you can use the make cypress-local command to kick off the tests. Note : This does assume Chrome is installed on your machine. When the tests are running they will open a new Chrome window and begin setting up MetaMask to handle the blockchain interactions. For testing purposes the Ganache-CLI is used and should be set up via the docker-compose command. No further actions should be needed unless you have altered those settings. Step 4: Commit Ensure your code changes adhere to our styling and linting standards: make fix (or npm run eslint:fix; npm run stylelint:fix; isort -rc --atomic .; yapf -i -r -e \"app/**/migrations/*.py\" -e \"app/app/settings.py\" -p app/app/ app/avatar/ app/credits/ app/dataviz/ app/github/ ) List all your changes as a list if needed else simply give a brief description on what the changes are. All lines at 100 columns. If your PR fixed an issue, Use the Fixes: prefix and the full issue URL. For other references use Refs: . Examples: Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 Sample commit A ```txt if you can write down the changes explaining it in a paragraph which each line wrapped within 100 lines. Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Sample commit B ```txt - list out your changes as points if there are many changes - if needed you can also send it across as - all wrapped within 100 lines Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Squashing and Merging your commits to make our history neater is always welcomed, but squashing can be handled during the merge process. Step 5: Rebase Ensure you neat description on what your PR is for, so that it's easier for folks to understand the gist of it before jumping to the the code / doc. As a best practice, once you have committed your changes, it is a good idea to use git rebase (not git merge ) to ensure your changes are placed at the top. Plus merge conflicts can be resolved git fetch upstream git rebase upstream/master Step 6: PRs Please ensure that your pull request follows all of the community guidelines to include: Title is descriptive and generally focused on what the PR addresses (If your PR is a work in progress, include WIP in the title. Once the PR is ready for review, please remove WIP ) Description explains what the PR achieves or addresses If the PR modifies the frontend in any way, please attach screenshots and/or GIFs of all purposeful changes (before and after screens are recommended) The PR passes all CI checks, to include: Stickler, and Travis CI. If tests are failing or coverage is decreased while adding logic to any backend code, you will be asked to include relevant tests and your PR will not be merged until all checks pass. Python Docstrings Gitcoin attempts to adhere to PEP-257 while employing the Google Python Style Guide approach to docstring formatting. Classes class Gitcoin: \"\"\"Define the overall Gitcoin object. Attributes: repo (str): The Gitcoin repository. \"\"\" repo = 'gitcoinco/web' Methods def foo(bar='bar'): \"\"\"Handle string concatenation of the provided suffix. Args: bar (str): The foo suffix. Defaults to: bar. Attributes: foobar (str): The foo string concatenated with the provided bar variable. Returns: str: The concatenated string. \"\"\" foobar = f'foo{bar}' return foobar Example from __future__ import braces class Example: \"\"\"Define the overall Example object.\"\"\" # Class attributes. repo = 'gitcoinco/web' known_dances = ['tango'] def example(self): \"\"\"Some Example.example class method docstring. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return 'example' def example2(self): \"\"\"Some Example.example2 class method docstring. Attributes: var (str): The example2 variable. \"\"\" var = 'example2' def can_dance(example, dance='tango'): \"\"\"Handle determining whether or not Example can perform the provided dance. Args: dingo (dashboard.Example): The Example object. dance (str): The dance type. Defaults to: tango. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return dance in example.known_dances def example3(self): \"\"\"Some example3 method docstring. Attributes: var (str): The example3 variable. Returns: str: The example var text. \"\"\" var = 'example3' return var VSCode Remote Debugger One benefit of using VSCode is the built-in debugger and you can use the vscode debugger with Gitcoin! You must complete all prerequisite steps, add the launch.json configuration snippet, and ensure the Gitcoin web docker container is running. If this is your first time using the debugger, it's advised that you stop your existing docker-compose services: docker-compose down , add the necessary environment variable to .env , and rebuild the web image via: docker-compose build web or docker-compose up -d --build to additionally start the services following the build. Once you have completed all of the below outlined steps, you should be able to start debugging! VSCode Prerequisites VSCode Python support extension is installed. Gitcoin Docker Setup has been completed. Add VSCODE_DEBUGGER_ENABLED=on to your .env file. (This envvar must be added before downing/starting the compose services in order for the necessary ptvsd req to be installed) Please note: Completely restart the docker-compose services ( docker-compose down; docker-compose up -d ) following successful completion of all steps. Add Launch Configuration In order to use the vscode remote debugger for the Gitcoin Django app, you must add the below snippet to your Python debugger launch.json configuration. You can do this by: Switch to the Debugging tab ( \u21e7\u2318D ) Select Add Configuration... from the dropdown menu Add the following json snippet to the configurations array and save the file: { \"name\": \"Gitcoin Remote Debugger\", \"type\": \"python\", \"request\": \"attach\", \"localRoot\": \"${workspaceRoot}\", \"remoteRoot\": \"/code\", \"port\": 3030, \"host\": \"localhost\" } Additional VSCode Resources VSCode Debugging Overview VSCode Debugging Intro Video Additional Resources We either strongly employ or encourage the review and implementation of the following resources: Python Style Guide: PEP-8 The Zen of Python: PEP-20 Docstrings: PEP-257 Docutils: PEP-258 f-strings: PEP-498 Google Python Style Guide Hitchhiker's Guide to Python Django Documentation FAQ Contributing Static Assets Note: Please remember to optimize/compress your image assets via: make compress-images (Requires: jpeq-recompress, optipng, and svgo in PATH ) You can install the necessary binaries via: npm install -g jpeg-recompress-bin pngquant-bin svgo brew install optipng Q: I need to add static assets... Where to I put them? All assets that will be used as static resources must be placed into their appropriate place in the app/assets directory. Q: I've added the new assets to the appropriate directory, but can't seem to use them. How do I make Django recognize my newly added assets? Run: make collect-static if using Docker or cd app; python3 manage.py collectstatic -i other for virtualenv/local setup. Additionally, you can check out the Django Managing Static Files Documentation Welcome to the gitcoin community. Lets Grow Open Source Software.","title":"Contributor's Guide"},{"location":"mk_contributors/#contributing-to-gitcoin","text":"Contributions to gitcoin could come in different forms. Some contribute code changes, others contribute docs, others help answer questions from users, help keep the infrastructure running, We welcome all contributions from folks who are willing to work in good faith with the community. No contribution is too small and all contributions are valued. Monetization Policy Code of Conduct Issues Discussions And General Help Pull Requests Step 1: Fork Step 2: Branch Step 3: Code Step 4: Commit Step 5: Rebase Step 6: PRs Python Docstrings Classes Methods Example VSCode Remote Debugger VSCode Prerequisites Add Launch Configuration VSCode Additional Resources Additional Resources FAQ Contributing Static Assets","title":"Contributing to Gitcoin"},{"location":"mk_contributors/#monetization-policy","text":"This repo uses Gitcoin to incentivize contributions from contributors all around the world. We believe that properly incentivizing Open Source Software means providing funding to support contributors, but we also recognize the dangerous precedent that is set when contributors who have been contributing for intrinsic reasons begin to expect extrinsic rewards for their contributions. Gitcoin has written about this, in the abstract, here . Tangibly, our monetary policy is: Our mission is to \"Grow Open Source\". Read More about our Mission here . We believe that contributors should contribute for intrinsic reasons first (see mission statement above), and we hereby provide notice that we will not be able to fund all contributions. Appreciate it if and when a Tip comes! Scope that is explicitly funded upfront will be posted to the Github Issue by @gitcoinbot , and will also be posted to the Gitcoin Issue Explorer .","title":"Monetization Policy"},{"location":"mk_contributors/#code-of-conduct","text":"Contributions to Gitcoin are governed by the Contributor Covenant version 1.4 . All contributors and participants agree to abide by its terms. To report violations, shoot out an email to founders@gitcoin.co The Code of Conduct is designed and intended, above all else, to help establish a culture within the project that allows anyone and everyone who wants to contribute to feel safe doing so. Open, diverse, and inclusive communities live and die on the basis of trust. Contributors can disagree with one another so long as they are done in good faith and everyone is working towards a common goal.","title":"Code of Conduct"},{"location":"mk_contributors/#issues","text":"Issues in gitcoin/web are the primary means by which bug reports and general discussions are made. A contributor is allowed to create an issue, discuss, and provide a fix if needed. Before opening an issue, check to see if there are any current issues with similar key words. This helps us cut down on duplicate tickets. When you open an issue , you'll notice four templates (bug, custom, discussion, feature) with the user-story format we like for our issue reports. When starting a new issue, please do your best to be as detailed and specific as possible. Bug report - use this to create a bug report to help us improve Gitcoin Discussion - use this template to start a discussion Feature request - use this to suggest a project idea Custom report - use this to report an issue that doesn't fall under any other category","title":"Issues"},{"location":"mk_contributors/#discussions-and-general-help","text":"As Gitcoin is still at its early stages, drop by on Discord and say hi to know what's next / to get your answers cleared up.","title":"Discussions And General Help"},{"location":"mk_contributors/#pull-requests","text":"Pull Requests are the way in which concrete changes are made to the code and documentation.","title":"Pull Requests"},{"location":"mk_contributors/#prerequisites","text":"You must install pre-commit in order to enable our precommit hooks and pre-commit install from your gitcoinco/web root directory. In order to make use of the pre-commit hooks used for this repository, you should have a valid installation of node / npm , isort ( pip install isort ), yapf ( pip install yapf ), stylelint ( npm install -g stylelint ), and eslint ( npm install -g eslint ). User facing copy / text should be run through Django Translation Framework . For example, HTML user-facing pieces of copy are in {% blocktrans %} or {% trans %} fields. javascript user-facing pieces of copy are in gettext fields. each of the views.py user-facing pieces of copy are in gettext_lazy fields each of the models help_text s are internationalized as are all the emails in marketing/mails.py run make autotranslate or a combination of the necessary ./manage.py makemessages and ./manage.py compilemessages commands. If you are contributing user-facing assets, interface components or other relevant visuals, then please add them to our UI Inventory page.","title":"Prerequisites"},{"location":"mk_contributors/#step-1-fork","text":"Fork the project on GitHub and clone your fork locally. git clone git@github.com:username/web.git cd web git remote add upstream https://github.com/gitcoinco/web.git git fetch upstream","title":"Step 1: Fork"},{"location":"mk_contributors/#step-2-branch","text":"It's always better to create local branches to work on a specific issue. Makes life easier for you if you are the kind who enjoys multiple things parallely. These should also be created directly off of the master branch. git checkout -b my-branch","title":"Step 2: Branch"},{"location":"mk_contributors/#step-3-code","text":"To keep the style of the Javascript code consistent we have a basic linting configured. To check your contributed code for errors run npm run eslint . To make life easy use the automatic fixing by running npm run eslint:fix before your commit. Use the pre-configured eslint for Javascript Avoid trailing whitespace & un-necessary white lines Indentation is as follows 1 tab = 2 spaces for .html and .js files 1 tab = 4 spaces for everything else Use rem for CSS when applicable Add relevant unit tests for all new Python logic and update existing tests to accommodate new logic. You can run tests via: make pytest If you introduce new backend methods or classes, you must include docstrings that conform to PEP-257 and follow the existing patterns throughout the codebase. See app/avatar/(models|views|utils).py - If you introduce a new django module, like: avatar or marketing , you must update pydocmd.yaml to include relevant python modules from the newly introduced app. Running the Cypress Tests: Gitcoin is experimenting with the use of Cypress for end-to-end testing. To run the Cypress tests locally you must first ensure you have started the application with the TEST_MNEMONIC environment variable set. This should be set to the same value as the SECRET_WORDS variable found in bin/cypress/vars.sh . $ export TEST_MNEMONIC=\"...\" $ docker-compose up --build # the build flag is optional Once the application is up and running you can use the make cypress-local command to kick off the tests. Note : This does assume Chrome is installed on your machine. When the tests are running they will open a new Chrome window and begin setting up MetaMask to handle the blockchain interactions. For testing purposes the Ganache-CLI is used and should be set up via the docker-compose command. No further actions should be needed unless you have altered those settings.","title":"Step 3: Code"},{"location":"mk_contributors/#step-4-commit","text":"Ensure your code changes adhere to our styling and linting standards: make fix (or npm run eslint:fix; npm run stylelint:fix; isort -rc --atomic .; yapf -i -r -e \"app/**/migrations/*.py\" -e \"app/app/settings.py\" -p app/app/ app/avatar/ app/credits/ app/dataviz/ app/github/ ) List all your changes as a list if needed else simply give a brief description on what the changes are. All lines at 100 columns. If your PR fixed an issue, Use the Fixes: prefix and the full issue URL. For other references use Refs: . Examples: Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 Sample commit A ```txt if you can write down the changes explaining it in a paragraph which each line wrapped within 100 lines. Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Sample commit B ```txt - list out your changes as points if there are many changes - if needed you can also send it across as - all wrapped within 100 lines Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Squashing and Merging your commits to make our history neater is always welcomed, but squashing can be handled during the merge process.","title":"Step 4: Commit"},{"location":"mk_contributors/#step-5-rebase","text":"Ensure you neat description on what your PR is for, so that it's easier for folks to understand the gist of it before jumping to the the code / doc. As a best practice, once you have committed your changes, it is a good idea to use git rebase (not git merge ) to ensure your changes are placed at the top. Plus merge conflicts can be resolved git fetch upstream git rebase upstream/master","title":"Step 5: Rebase"},{"location":"mk_contributors/#step-6-prs","text":"Please ensure that your pull request follows all of the community guidelines to include: Title is descriptive and generally focused on what the PR addresses (If your PR is a work in progress, include WIP in the title. Once the PR is ready for review, please remove WIP ) Description explains what the PR achieves or addresses If the PR modifies the frontend in any way, please attach screenshots and/or GIFs of all purposeful changes (before and after screens are recommended) The PR passes all CI checks, to include: Stickler, and Travis CI. If tests are failing or coverage is decreased while adding logic to any backend code, you will be asked to include relevant tests and your PR will not be merged until all checks pass.","title":"Step 6: PRs"},{"location":"mk_contributors/#python","text":"","title":"Python"},{"location":"mk_contributors/#docstrings","text":"Gitcoin attempts to adhere to PEP-257 while employing the Google Python Style Guide approach to docstring formatting.","title":"Docstrings"},{"location":"mk_contributors/#classes","text":"class Gitcoin: \"\"\"Define the overall Gitcoin object. Attributes: repo (str): The Gitcoin repository. \"\"\" repo = 'gitcoinco/web'","title":"Classes"},{"location":"mk_contributors/#methods","text":"def foo(bar='bar'): \"\"\"Handle string concatenation of the provided suffix. Args: bar (str): The foo suffix. Defaults to: bar. Attributes: foobar (str): The foo string concatenated with the provided bar variable. Returns: str: The concatenated string. \"\"\" foobar = f'foo{bar}' return foobar","title":"Methods"},{"location":"mk_contributors/#example","text":"from __future__ import braces class Example: \"\"\"Define the overall Example object.\"\"\" # Class attributes. repo = 'gitcoinco/web' known_dances = ['tango'] def example(self): \"\"\"Some Example.example class method docstring. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return 'example' def example2(self): \"\"\"Some Example.example2 class method docstring. Attributes: var (str): The example2 variable. \"\"\" var = 'example2' def can_dance(example, dance='tango'): \"\"\"Handle determining whether or not Example can perform the provided dance. Args: dingo (dashboard.Example): The Example object. dance (str): The dance type. Defaults to: tango. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return dance in example.known_dances def example3(self): \"\"\"Some example3 method docstring. Attributes: var (str): The example3 variable. Returns: str: The example var text. \"\"\" var = 'example3' return var","title":"Example"},{"location":"mk_contributors/#vscode-remote-debugger","text":"One benefit of using VSCode is the built-in debugger and you can use the vscode debugger with Gitcoin! You must complete all prerequisite steps, add the launch.json configuration snippet, and ensure the Gitcoin web docker container is running. If this is your first time using the debugger, it's advised that you stop your existing docker-compose services: docker-compose down , add the necessary environment variable to .env , and rebuild the web image via: docker-compose build web or docker-compose up -d --build to additionally start the services following the build. Once you have completed all of the below outlined steps, you should be able to start debugging!","title":"VSCode Remote Debugger"},{"location":"mk_contributors/#vscode-prerequisites","text":"VSCode Python support extension is installed. Gitcoin Docker Setup has been completed. Add VSCODE_DEBUGGER_ENABLED=on to your .env file. (This envvar must be added before downing/starting the compose services in order for the necessary ptvsd req to be installed) Please note: Completely restart the docker-compose services ( docker-compose down; docker-compose up -d ) following successful completion of all steps.","title":"VSCode Prerequisites"},{"location":"mk_contributors/#add-launch-configuration","text":"In order to use the vscode remote debugger for the Gitcoin Django app, you must add the below snippet to your Python debugger launch.json configuration. You can do this by: Switch to the Debugging tab ( \u21e7\u2318D ) Select Add Configuration... from the dropdown menu Add the following json snippet to the configurations array and save the file: { \"name\": \"Gitcoin Remote Debugger\", \"type\": \"python\", \"request\": \"attach\", \"localRoot\": \"${workspaceRoot}\", \"remoteRoot\": \"/code\", \"port\": 3030, \"host\": \"localhost\" }","title":"Add Launch Configuration"},{"location":"mk_contributors/#additional-vscode-resources","text":"VSCode Debugging Overview VSCode Debugging Intro Video","title":"Additional VSCode Resources"},{"location":"mk_contributors/#additional-resources","text":"We either strongly employ or encourage the review and implementation of the following resources: Python Style Guide: PEP-8 The Zen of Python: PEP-20 Docstrings: PEP-257 Docutils: PEP-258 f-strings: PEP-498 Google Python Style Guide Hitchhiker's Guide to Python Django Documentation","title":"Additional Resources"},{"location":"mk_contributors/#faq","text":"","title":"FAQ"},{"location":"mk_contributors/#contributing-static-assets","text":"Note: Please remember to optimize/compress your image assets via: make compress-images (Requires: jpeq-recompress, optipng, and svgo in PATH ) You can install the necessary binaries via: npm install -g jpeg-recompress-bin pngquant-bin svgo brew install optipng Q: I need to add static assets... Where to I put them? All assets that will be used as static resources must be placed into their appropriate place in the app/assets directory. Q: I've added the new assets to the appropriate directory, but can't seem to use them. How do I make Django recognize my newly added assets? Run: make collect-static if using Docker or cd app; python3 manage.py collectstatic -i other for virtualenv/local setup. Additionally, you can check out the Django Managing Static Files Documentation Welcome to the gitcoin community. Lets Grow Open Source Software.","title":"Contributing Static Assets"},{"location":"mk_envvars/","text":"Recognized Environment Variables The following environment variables are currently accepted by the local web application. You can overwrite the default values for these environment variables by adding them to the web/app/app/.env file. All of the environment variables used by this application conform to the django-environ documentation . Initial Overrides Variable Description Type Default CACHE_URL The django-environ compatible uri to your cache. str dbcache://my_cache_table DATABASE_URL The django-environ compatible uri to your database. str psql://postgres:postgres@db:5432/postgres DEBUG Whether or not to run the environment in Debug mode. bool True SECRET_KEY The secret key to use for your Django environment. str TODO Project / Entry Specific Variable Description Type Default FORCE_PROVISION Whether or not to force provisioning even if the container has been previously provisioned bool False FORCE_GET_PRICES Whether or not to force pulling fresh conversion rate data from etherdelta and poloniex bool False DISABLE_INITIAL_CACHETABLE Whether or not to disable the initial createcachetable bool False DISABLE_INITIAL_COLLECTSTATIC Whether or not to disable the initial collectstatic bool False DISABLE_WEBPACK_ASSETS Whether or not to disable webpack asset bundling bool False DISABLE_INITIAL_MIGRATE Whether or not to disable the initial data migration bool False DISABLE_INITIAL_LOADDATA Whether or not to disable the initial loaddata fixture import bool False Amazon Web Services Variable Description Type Default AWS_ACCESS_KEY_ID Your AWS access key ID. str '' AWS_SECRET_ACCESS_KEY Your AWS secret access key str '' S3_REPORT_BUCKET The S3 bucket to be used to store reports. str TODO S3_REPORT_PREFIX The S3 path prefix to be used when storing reports. str TODO Colorado Coin Variable Description Type Default COLO_ACCOUNT_ADDRESS The coin distribution address. str '' COLO_ACCOUNT_PRIVATE_KEY The coin distribution private key. str '' Django Variable Description Type Default INSTALLED_APPS A list of additional apps to be recognized by Django. list [] Fortmatic Variable Description Type Default FORTMATIC_LIVE_KEY The Formatic live (production) API key str '' FORTMATIC_TEST_KEY The Formatic test API key str '' Github Authentication Variable Description Type Default GITHUB_API_BASE_URL The Github API URL. str https://api.github.com GITHUB_AUTH_BASE_URL The Github OAuth authorization URL. str https://github.com/login/oauth/authorize GITHUB_SCOPE The Github application scope. str read:user,user:email,read:org GITHUB_CLIENT_ID The client ID of the Github OAuth app. str TODO GITHUB_CLIENT_SECRET The client secret of the Github OAuth app. str TODO GITHUB_API_USER The username of the Github account. str TODO GITHUB_API_TOKEN The token of the Github account. str TODO GITHUB_APP_NAME The name of your Github OAuth application. str gitcoin-local Gitcoin Bot For further information, please check out the Gitcoin Bot Documentation . Variable Description Type Default GITCOINBOT_APP_ID The Gitcoin Bot App ID provided by Github. str '' GITCOIN_BOT_CERT_PATH The relative path to the Gitcoin Bot pem certificate. str '' GITHUB_EVENT_HOOK_URL The Github event hook payload URL for Gitcoin Bot. str github/payload/ IGNORE_COMMENTS_FROM A list of Github handles to ignore comments from. list ['gitcoinbot', ] Sentry Variable Description Type Default SENTRY_DSN The Sentry DSN. str '' SENTRY_JS_DSN The DSN for Javascript Sentry reporting (defaults to SENTRY_DSN). str '' SendGrid Variable Description Type Default SENDGRID_EVENT_HOOK_URL The SendGrid event hook URL. str sg_event_process SENDGRID_API_KEY The SendGrid API Key, required for sending emails. str None Slack Variable Description Type Default SLACK_TOKEN The API token to be used for interacting with Slack. str TODO Silk The below environment variables are useful for overwriting Django Silk settings. Variable Description Type Default ENABLE_SILK Whether or not to enable the Django Silk profiling and inspection tool. bool False SILKY_PYTHON_PROFILER Whether or not to enable the function profiler . bool True SILKY_PYTHON_PROFILER_BINARY Whether or not to enable the generation of .prof files. bool False SILKY_AUTHENTICATION Whether or not to require user authentication to access Silk. bool False SILKY_AUTHORISATION Whether or not to require is_staff to access Silk. bool False SILKY_META Whether or not to enable meta profiling . bool True SILKY_INTERCEPT_PERCENT Limit the number of request/responses stored by Silk. int 100 SILKY_MAX_RECORDED_REQUESTS Limit the number of request/response rows stored by Silk. int 10000 SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT The percent of recorded data to perform gargbase collection on. int 10 SILKY_DYNAMIC_PROFILING dict {} Web3 Variable Description Type Default WEB3_HTTP_PROVIDER The Web3 HTTP provider URI to be used. str https://rinkeby.infura.io INFURA_USE_V3 Use new API bool False INFURA_V3_PROJECT_ID Infura Project ID str 1e0a90928efe4bb78bb1eeceb8aacc27 VSCode Remote Debugging If you opt to modify the port or listener interface, you must update your launch.json configuration accordingly. Variable Description Type Default VSCODE_DEBUGGER_ENABLED Whether or not to enable the ptvsd remote debugging service. bool False VSCODE_DEBUGGER_PORT The ptvsd port to be used for debugging. str 3030 VSCODE_DEBUGGER_INTERFACE The ptvsd network interface to be used for debugging. str 0.0.0.0 Miscellaneous Variable Description Type Default GITTER_TOKEN The Gitter chat API token. str False Kudos Variable Description Type Default KUDOS_NETWORK The kudos network you will use rinkeby for local str mainnet KUDOS_OWNER_ACCOUNT Wallet address to own the kudos. str 0xD386793F1DB5F21609571C0164841E5eA2D33aD8 KUDOS_LOCAL_SYNC Turns The kudos listener on/off on or off None","title":"Environment Variables"},{"location":"mk_envvars/#recognized-environment-variables","text":"The following environment variables are currently accepted by the local web application. You can overwrite the default values for these environment variables by adding them to the web/app/app/.env file. All of the environment variables used by this application conform to the django-environ documentation .","title":"Recognized Environment Variables"},{"location":"mk_envvars/#initial-overrides","text":"Variable Description Type Default CACHE_URL The django-environ compatible uri to your cache. str dbcache://my_cache_table DATABASE_URL The django-environ compatible uri to your database. str psql://postgres:postgres@db:5432/postgres DEBUG Whether or not to run the environment in Debug mode. bool True SECRET_KEY The secret key to use for your Django environment. str TODO","title":"Initial Overrides"},{"location":"mk_envvars/#project-entry-specific","text":"Variable Description Type Default FORCE_PROVISION Whether or not to force provisioning even if the container has been previously provisioned bool False FORCE_GET_PRICES Whether or not to force pulling fresh conversion rate data from etherdelta and poloniex bool False DISABLE_INITIAL_CACHETABLE Whether or not to disable the initial createcachetable bool False DISABLE_INITIAL_COLLECTSTATIC Whether or not to disable the initial collectstatic bool False DISABLE_WEBPACK_ASSETS Whether or not to disable webpack asset bundling bool False DISABLE_INITIAL_MIGRATE Whether or not to disable the initial data migration bool False DISABLE_INITIAL_LOADDATA Whether or not to disable the initial loaddata fixture import bool False","title":"Project / Entry Specific"},{"location":"mk_envvars/#amazon-web-services","text":"Variable Description Type Default AWS_ACCESS_KEY_ID Your AWS access key ID. str '' AWS_SECRET_ACCESS_KEY Your AWS secret access key str '' S3_REPORT_BUCKET The S3 bucket to be used to store reports. str TODO S3_REPORT_PREFIX The S3 path prefix to be used when storing reports. str TODO","title":"Amazon Web Services"},{"location":"mk_envvars/#colorado-coin","text":"Variable Description Type Default COLO_ACCOUNT_ADDRESS The coin distribution address. str '' COLO_ACCOUNT_PRIVATE_KEY The coin distribution private key. str ''","title":"Colorado Coin"},{"location":"mk_envvars/#django","text":"Variable Description Type Default INSTALLED_APPS A list of additional apps to be recognized by Django. list []","title":"Django"},{"location":"mk_envvars/#fortmatic","text":"Variable Description Type Default FORTMATIC_LIVE_KEY The Formatic live (production) API key str '' FORTMATIC_TEST_KEY The Formatic test API key str ''","title":"Fortmatic"},{"location":"mk_envvars/#github-authentication","text":"Variable Description Type Default GITHUB_API_BASE_URL The Github API URL. str https://api.github.com GITHUB_AUTH_BASE_URL The Github OAuth authorization URL. str https://github.com/login/oauth/authorize GITHUB_SCOPE The Github application scope. str read:user,user:email,read:org GITHUB_CLIENT_ID The client ID of the Github OAuth app. str TODO GITHUB_CLIENT_SECRET The client secret of the Github OAuth app. str TODO GITHUB_API_USER The username of the Github account. str TODO GITHUB_API_TOKEN The token of the Github account. str TODO GITHUB_APP_NAME The name of your Github OAuth application. str gitcoin-local","title":"Github Authentication"},{"location":"mk_envvars/#gitcoin-bot","text":"For further information, please check out the Gitcoin Bot Documentation . Variable Description Type Default GITCOINBOT_APP_ID The Gitcoin Bot App ID provided by Github. str '' GITCOIN_BOT_CERT_PATH The relative path to the Gitcoin Bot pem certificate. str '' GITHUB_EVENT_HOOK_URL The Github event hook payload URL for Gitcoin Bot. str github/payload/ IGNORE_COMMENTS_FROM A list of Github handles to ignore comments from. list ['gitcoinbot', ]","title":"Gitcoin Bot"},{"location":"mk_envvars/#sentry","text":"Variable Description Type Default SENTRY_DSN The Sentry DSN. str '' SENTRY_JS_DSN The DSN for Javascript Sentry reporting (defaults to SENTRY_DSN). str ''","title":"Sentry"},{"location":"mk_envvars/#sendgrid","text":"Variable Description Type Default SENDGRID_EVENT_HOOK_URL The SendGrid event hook URL. str sg_event_process SENDGRID_API_KEY The SendGrid API Key, required for sending emails. str None","title":"SendGrid"},{"location":"mk_envvars/#slack","text":"Variable Description Type Default SLACK_TOKEN The API token to be used for interacting with Slack. str TODO","title":"Slack"},{"location":"mk_envvars/#silk","text":"The below environment variables are useful for overwriting Django Silk settings. Variable Description Type Default ENABLE_SILK Whether or not to enable the Django Silk profiling and inspection tool. bool False SILKY_PYTHON_PROFILER Whether or not to enable the function profiler . bool True SILKY_PYTHON_PROFILER_BINARY Whether or not to enable the generation of .prof files. bool False SILKY_AUTHENTICATION Whether or not to require user authentication to access Silk. bool False SILKY_AUTHORISATION Whether or not to require is_staff to access Silk. bool False SILKY_META Whether or not to enable meta profiling . bool True SILKY_INTERCEPT_PERCENT Limit the number of request/responses stored by Silk. int 100 SILKY_MAX_RECORDED_REQUESTS Limit the number of request/response rows stored by Silk. int 10000 SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT The percent of recorded data to perform gargbase collection on. int 10 SILKY_DYNAMIC_PROFILING dict {}","title":"Silk"},{"location":"mk_envvars/#web3","text":"Variable Description Type Default WEB3_HTTP_PROVIDER The Web3 HTTP provider URI to be used. str https://rinkeby.infura.io INFURA_USE_V3 Use new API bool False INFURA_V3_PROJECT_ID Infura Project ID str 1e0a90928efe4bb78bb1eeceb8aacc27","title":"Web3"},{"location":"mk_envvars/#vscode-remote-debugging","text":"If you opt to modify the port or listener interface, you must update your launch.json configuration accordingly. Variable Description Type Default VSCODE_DEBUGGER_ENABLED Whether or not to enable the ptvsd remote debugging service. bool False VSCODE_DEBUGGER_PORT The ptvsd port to be used for debugging. str 3030 VSCODE_DEBUGGER_INTERFACE The ptvsd network interface to be used for debugging. str 0.0.0.0","title":"VSCode Remote Debugging"},{"location":"mk_envvars/#miscellaneous","text":"Variable Description Type Default GITTER_TOKEN The Gitter chat API token. str False","title":"Miscellaneous"},{"location":"mk_envvars/#kudos","text":"Variable Description Type Default KUDOS_NETWORK The kudos network you will use rinkeby for local str mainnet KUDOS_OWNER_ACCOUNT Wallet address to own the kudos. str 0xD386793F1DB5F21609571C0164841E5eA2D33aD8 KUDOS_LOCAL_SYNC Turns The kudos listener on/off on or off None","title":"Kudos"},{"location":"mk_gitcoinbot/","text":"Gitcoinbot is a Github App for Gitcoin.co Usage instructions Gitcoinbot is a bot that allows you to interact with gitcoin via the github comments, like follows: Help Command Gitcoinbot Bounty Installation Instructions To get it running on your repo, you can install it here or click the install button blow Post Installation. Congratulations on installing @gitcoinbot. This bot facilitates gitcoin bounties via github commands. You can go here . Click configure, then you may select which repository you want the Gitcoinbot to be working. Here are the commands it understands: bounty <amount> <currency> -- receive link to gitcoin.co form to create bounty. submit work -- receive link to gitcoin.co to submit work on a bounty. start work -- receive link to gitcoin.co to start work on a bounty. tip <user> <amount> <currency> -- receive link to complete tippping another github user . help -- displays a help menu Go ahead and open up a test issue and give it a try!","title":"GitcoinBot"},{"location":"mk_gitcoinbot/#gitcoinbot-is-a-github-app-for-gitcoinco","text":"","title":"Gitcoinbot is a Github App for Gitcoin.co"},{"location":"mk_gitcoinbot/#usage-instructions","text":"Gitcoinbot is a bot that allows you to interact with gitcoin via the github comments, like follows:","title":"Usage instructions"},{"location":"mk_gitcoinbot/#help-command","text":"","title":"Help Command"},{"location":"mk_gitcoinbot/#gitcoinbot-bounty","text":"","title":"Gitcoinbot Bounty "},{"location":"mk_gitcoinbot/#installation-instructions","text":"To get it running on your repo, you can install it here or click the install button blow","title":"Installation Instructions"},{"location":"mk_gitcoinbot/#post-installation","text":"Congratulations on installing @gitcoinbot. This bot facilitates gitcoin bounties via github commands. You can go here . Click configure, then you may select which repository you want the Gitcoinbot to be working. Here are the commands it understands: bounty <amount> <currency> -- receive link to gitcoin.co form to create bounty. submit work -- receive link to gitcoin.co to submit work on a bounty. start work -- receive link to gitcoin.co to start work on a bounty. tip <user> <amount> <currency> -- receive link to complete tippping another github user . help -- displays a help menu Go ahead and open up a test issue and give it a try!","title":"Post Installation."},{"location":"mk_rest_api/","text":"HTTPS API Grants API Get a full list of grants at https://gitcoin.co/grants/grants.json Get a list of contributors to each Gitcoin Grants Round at https://gitcoin.co/grants/v1/api/export_addresses/roundX.json where X is the round number, (1-10 supported as of Aug 2021) Get a list of contributors to a Gitcoin Grant at https://gitcoin.co/grants/v1/api/export_addresses/grantX.json where X is the ID of the grant. You must be authenticated as a team member of the grant to access the data. Get a list of contributors to a Gitcoin Grant at a specififc round https://gitcoin.co/grants/v1/api/export_addresses/grantX_roundY.json where X is the ID of the grant and Y is the round number. You must be authenticated as a team member of the grant to access the data. We've got an https://gitcoin.co/grants/v1/api/export_addresses/all.json endpoint available for those who'd like to just get all addresses that've ever funded a Gitcoin Grant. We've also put together a list of all grants on the platform, and the addresses you can contribute to them at, at https://gitcoin.co/grants/grants.json Get a list of contributor social info (handle, picture, anonymized, comment) for a Gitcoin Grant at a specific round https://gitcoin.co/grants/v1/api/export_info/grantX_roundY.json where X is the ID of the grant and Y is the round number. You must be authenticated as a team member of the grant to access the data. These APIs are purposefully minimalistic, as we are trying very hard to limit the scope of the data retrieval methods in order to support narrow use cases. NOTE: These APIs returns live data, with a small cache infront. This means, the data may be up to an hour stale, but will refresh as the cache is recreated. Click through to try them below: * https://gitcoin.co/grants/v1/api/export_addresses/round7.json * https://gitcoin.co/grants/v1/api/export_addresses/grant12.json * https://gitcoin.co/grants/v1/api/export_addresses/grant12_round_7.json * https://gitcoin.co/grants/v1/api/export_addresses/all.json * https://gitcoin.co/grants/grants.json * https://gitcoin.co/grants/v1/api/export_info/grant12_round7.json NOTE: Gitcoin respects user privacy, and gives users the option to opt out of including their addresses in these exports. Update your preferences at https://gitcoin.co/settings/privacy at anytime. Authentication These API calls require you to be authenticated as a team member of a grant: * https://gitcoin.co/grants/v1/api/export_addresses/grant12.json * https://gitcoin.co/grants/v1/api/export_addresses/grant12_round_7.json * https://gitcoin.co/grants/v1/api/export_info/grant12_round7.json Authentication on Gitcoin is primary centric around our user model, which (for now) is dependant upon Github. If you are accessing the data programmatically, you may not be able to handle the Github authentication cycle, and for that reason we have begun providing limited access to this data via an API Key / Secret model. Here's how it works. Access any API which requires authorization via the standard authentication flow in browser. You will be issued credentials, which you can find in the response: body.meta.api_key . You may now access the API using the API credentials at URL?_key=YOUR_KEY&_secret=YOUR_SECRET . Generalized API Gitcoin provides a simple read-only HTTPS API to access data. The API is live at https://gitcoin.co/api/v0.1 Datatypes Beyond simple datatypes like string or integer the API returns datatypes like dates that are serialized in a very specific fashion. Datatype Description Example date_time Date and time represented in ISO 8601 2017-09-24T18:59:53.964344Z ethereum_address An ethereum token address with the leading 0x 0x636f3093258412b96c43bef3663f1b853253ec59 token_type The type of token offered as a reward. Ex: ETH or GIT ETH bounties The bounties endpoint provides a listing of bounties and their current status. There is one endpoint that access bounties: https://gitcoin.co/api/v0.1/bounties/ - Returns a list of bounties Fields Field Key Datatype Description url string URL for this specific bounty Ex: api/v0.1/bounties/9/ created_on date_time Creation timestamp modified_on date_time Last modified timestamp title string Title of the bounty web3_created date_time Creation timestamp for the transaction that holds this bounty value_in_token integer Amount of tokens rewarded for bounty token_name token_type Type of token. Ex: ETH , GIT token_address ethereum_address Address where the tokens are located bounty_type string Type of bounty. Ex: Bug , Feature , Security project_length string Relative length of project Ex: Hours , Days , Weeks , Months experience_level string Recommended experience level github_url string URL on GitHub where you can find the bounty description github_org_name string github org name github_repo_name string github repo name github_issue_number string github issue number keywords string comma delimited list of keywords current_bounty boolean Whether this bounty is the most current revision one or not expires_date date_time Date before which the bounty must be compelted value_in_eth integer Value of the bounty in Ethereum value_in_usdt float Approximation of value in USD at bounty web3_created timestamp value_in_usdt_now float Approximation of current value in USD now date_time Current date_time on the server action_urls dict a list of urls where user can take action against the bounty paid array List of users who have been paid from the bounty Current Status Field Key Datatype Description is_open boolean True if the bounty has not been completed status string Current status enum: ( open , The bounty was created), ( started , The bounty was started) ( submitted , Someone submitted work for the bounty) ( done , Someone fulfilled and completed the bounty) ( expired , The bounty expired w/o completion) Bounty Creator & Bounty Fulfiller Field Key Datatype Description bounty_owner_address ethereum_address Address of the person who owns the bounty bounty_owner_email string Email of the bounty owner bounty_owner_github_username string Username of the bounty owner metadata dictionary Misc metadata about the bounty and the creator fulfiller_address ethereum_address Address of the person who fulfilled the bounty fulfiller_email string Email of the person fulfilling the bounty fulfiller_github_username string Username of the fulfiller fulfiller_metadata dictionary githubUsername and notificationEmail for the fulfiller URL Parameters Filters You can filter the data returned from the API by providing these keys as URL parameters experience_level , project_length , bounty_type , bounty_owner_address , is_open , github_url and pk . github_url can take a comma-separated list of GitHub urls. pk takes an ID and returns a single bounty. Order By By passing an order_by parameter you can order the data by the provided key. Ex: ?order_by=expires_date . To sort in the opposite direction you can add a - in from the the key ?order_by=-expires_date . Example Request ~ % curl \"https://gitcoin.co/api/v0.1/bounties/?&order_by=web3_created\" [ { \"url\": \"https:\\/\\/gitcoin.co\\/api\\/v0.1\\/bounties\\/87\\/\", \"created_on\": \"2017-09-22T01:42:07.060841Z\", \"modified_on\": \"2017-09-23T12:36:11.946334Z\", \"title\": \"Update local_settings.py.example\", \"web3_created\": \"2017-09-22T01:42:04Z\", \"value_in_token\": \"1000000000000000000.00\", \"token_name\": \"ETH\", \"token_address\": \"0x0000000000000000000000000000000000000000\", \"bounty_type\": \"\", \"project_length\": \"\", \"experience_level\": \"\", \"github_url\": \"https:\\/\\/github.com\\/owocki\\/pytrader\\/pull\\/83232\", \"bounty_owner_address\": \"0xd3d280c2866eaa795fc72bd850c48e7cce166e23\", \"bounty_owner_email\": \"ksowocki@gmail.com\", \"bounty_owner_github_username\": \"owocki\", \"fulfiller_address\": \"0x0000000000000000000000000000000000000000\", \"fulfiller_email\": null, \"fulfiller_github_username\": null, \"is_open\": true, \"expires_date\": \"2017-09-23T01:42:04Z\", \"fulfiller_metadata\": { }, \"current_bounty\": true, \"value_in_eth\": 1.0e+18, \"value_in_usdt_now\": 280.65, \"status\": \"expired\", \"now\": \"2017-09-24T18:59:53.964344Z\" }, .... ] grants The grants endpoint provides a listing of grants and all it's information. There is one endpoint that access grants: https://gitcoin.co/api/v0.1/grants/?limit=10 - Returns a list of grants Fields Field Key Datatype Description active boolean Whether or not the Grant is active title string Title of the Grant slug string Slug for the Grant populated from title description string Description of the Grant reference_url string Associated reference URL of the Grant logo string URL of the Grant logo image admin_address ethereum_address Wallet address of the Grant Admin where subscription funds will be sent amount_received float Total amount of contributions received by the Grant in USDT/DAI token_address ethereum_address Address of the token to be used with the Grant token_symbol token_type Type of token to be used with the Grant contract_address ethereum_address Contract address of the Grant metadata dictionary Misc metadata about the Grant network string Network in which the Grant contract resides required_gas_price float Required gas price for the Grant admin_profile dictionary Grant Admin's profile team_members array Array of Dictionaries of team members contributing to this Grant Profile : Field Key Datatype Description id integer Profile ID url string URL to the Gitcoin profile handle string GitHub handle/username associated with the Profile keywords array Array of keywords associated with the Profile position integer Position of the Profile in the Weekly Earners leaderboard avatar_url string URL to the Gitcoin Avatar of the Profile github_url string URL to the GitHub profile total_earned float Sum of ETH collected by the profile organizations dictionary Dictionary containing profiles that this user works with URL Parameters Filters You can filter the data returned from the API by providing these keys as URL parameters title , admin_address , description , keyword , grant_type and pk that takes an ID and returns a single grant. You can also add a limit parameter to limit the results (typically for performance reasons). Example Request ~ % curl \"https://gitcoin.co/api/v0.1/grants/?grant_type=tech\" [ { \"active\": true, \"title\": \"Cipher Dogs Team\", \"slug\": \"cipher-dogs-team\", \"description\": \"Our team is interested in electronic art/hack/social activity and blockchain/decentralized technology and other technologies. We are aimed at promoting blockchain technology among people. Our team creates various libraries, websites, artwork and other projects in the field of blockchain technologies. We also help blockchain projects. We believe that blockchain technology is the future.\\r\\n\", \"reference_url\": \"https://github.com/CipherDogs\", \"logo\": \"https://c.gitcoin.co/grants/1a573aca695eada7c2f9badf1ed84b10/cipher1.png\", \"admin_address\": \"0xD12Dd8aEb8F96D0bFF6aA9C74bDf92009741d3Aa\", \"amount_received\": \"0.0000\", \"token_address\": \"0x0000000000000000000000000000000000000000\", \"token_symbol\": \"Any Token\", \"contract_address\": \"0xbcAE3e2893722698535aaf355F0aA92CA846354F\", \"metadata\": {}, \"network\": \"mainnet\", \"required_gas_price\": \"0\", \"admin_profile\": { \"id\": 82330, \"url\": \"/deadblackclover\", \"handle\": \"deadblackclover\", \"keywords\": [ \"Rust\", \"Scala\", \"JavaScript\", \"HTML\", \"CSS\", \"Emacs Lisp\", \"C#\", \"Vue\", \"Shell\" ], \"position\": 0, \"avatar_url\": \"https://c.gitcoin.co/avatars/0aee35065024a0382c19e5a30fb2349c/deadblackclover.png\", \"github_url\": \"https://github.com/deadblackclover\", \"total_earned\": 0, \"organizations\": {} }, \"team_members\": [ { \"id\": 82330, \"url\": \"/deadblackclover\", \"handle\": \"deadblackclover\", \"keywords\": [ \"Rust\", \"Scala\", \"JavaScript\", \"HTML\", \"CSS\", \"Emacs Lisp\", \"C#\", \"Vue\", \"Shell\" ], \"position\": 0, \"avatar_url\": \"https://c.gitcoin.co/avatars/0aee35065024a0382c19e5a30fb2349c/deadblackclover.png\", \"github_url\": \"https://github.com/deadblackclover\", \"total_earned\": 0, \"organizations\": {} } ] }, ... ] WEB3 API Note: this API is now in the process of being deprecated, as since going cross-chain, Gitcoin no longer uses standardbounties as the base layer of it's bounties experience. This API will still be useful for legacy bounties which are posted to standcard bounties. You may interact with the HTTPS API as follows truffle(development)> BountyIndex.at('0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd').bountydetails.call('https://github.com/owocki/pytrader/pull/83'); [ { [String: '100000000000000000'] s: 1, e: 17, c: [ 1000 ] }, '0x0000000000000000000000000000000000000000', '0xd3d280c2866eaa795fc72bd850c48e7cce166e23', '0x0000000000000000000000000000000000000000', true, true, 'https://github.com/owocki/pytrader/pull/83', { [String: '1506220425'] s: 1, e: 9, c: [ 1506220425 ] }, '{\"issueTitle\":\"\",\"issueKeywords\":\"\",\"tokenName\":\"ETH\",\"githubUsername\":\"owocki\",\"notificationEmail\":\"ksowocki@gmail.com\",\"experienceLevel\":\"\",\"projectLength\":\"\",\"bountyType\":\"\"}', { [String: '1537756425'] s: 1, e: 9, c: [ 1537756425 ] }, '' ] be sure to replace 0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd with the BountyIndex contract address. be sure to replace https://github.com/owocki/pytrader/pull/83 with the issue that you care about. Further information on the smart contract interface is available at https://github.com/gitcoinco/smart_contracts/blob/master/contracts/bounty/BountyIndex.sol _bountydetails function returns the following fields: Fields Field Key Datatype Description amount float Bounty amount in ETH or specified ERC20 token amount_denomination string Denomination of the bounty action_url string URL of the bounty title string Title of hte bounty description string Description of the bounty created_on datetime Creation timestamp source_project string Source Project the bounty came from tags strings tags to classify the bounthy","title":"Rest API"},{"location":"mk_rest_api/#https-api","text":"","title":"HTTPS API"},{"location":"mk_rest_api/#grants-api","text":"Get a full list of grants at https://gitcoin.co/grants/grants.json Get a list of contributors to each Gitcoin Grants Round at https://gitcoin.co/grants/v1/api/export_addresses/roundX.json where X is the round number, (1-10 supported as of Aug 2021) Get a list of contributors to a Gitcoin Grant at https://gitcoin.co/grants/v1/api/export_addresses/grantX.json where X is the ID of the grant. You must be authenticated as a team member of the grant to access the data. Get a list of contributors to a Gitcoin Grant at a specififc round https://gitcoin.co/grants/v1/api/export_addresses/grantX_roundY.json where X is the ID of the grant and Y is the round number. You must be authenticated as a team member of the grant to access the data. We've got an https://gitcoin.co/grants/v1/api/export_addresses/all.json endpoint available for those who'd like to just get all addresses that've ever funded a Gitcoin Grant. We've also put together a list of all grants on the platform, and the addresses you can contribute to them at, at https://gitcoin.co/grants/grants.json Get a list of contributor social info (handle, picture, anonymized, comment) for a Gitcoin Grant at a specific round https://gitcoin.co/grants/v1/api/export_info/grantX_roundY.json where X is the ID of the grant and Y is the round number. You must be authenticated as a team member of the grant to access the data. These APIs are purposefully minimalistic, as we are trying very hard to limit the scope of the data retrieval methods in order to support narrow use cases. NOTE: These APIs returns live data, with a small cache infront. This means, the data may be up to an hour stale, but will refresh as the cache is recreated. Click through to try them below: * https://gitcoin.co/grants/v1/api/export_addresses/round7.json * https://gitcoin.co/grants/v1/api/export_addresses/grant12.json * https://gitcoin.co/grants/v1/api/export_addresses/grant12_round_7.json * https://gitcoin.co/grants/v1/api/export_addresses/all.json * https://gitcoin.co/grants/grants.json * https://gitcoin.co/grants/v1/api/export_info/grant12_round7.json NOTE: Gitcoin respects user privacy, and gives users the option to opt out of including their addresses in these exports. Update your preferences at https://gitcoin.co/settings/privacy at anytime.","title":"Grants API"},{"location":"mk_rest_api/#authentication","text":"These API calls require you to be authenticated as a team member of a grant: * https://gitcoin.co/grants/v1/api/export_addresses/grant12.json * https://gitcoin.co/grants/v1/api/export_addresses/grant12_round_7.json * https://gitcoin.co/grants/v1/api/export_info/grant12_round7.json Authentication on Gitcoin is primary centric around our user model, which (for now) is dependant upon Github. If you are accessing the data programmatically, you may not be able to handle the Github authentication cycle, and for that reason we have begun providing limited access to this data via an API Key / Secret model. Here's how it works. Access any API which requires authorization via the standard authentication flow in browser. You will be issued credentials, which you can find in the response: body.meta.api_key . You may now access the API using the API credentials at URL?_key=YOUR_KEY&_secret=YOUR_SECRET .","title":"Authentication"},{"location":"mk_rest_api/#generalized-api","text":"Gitcoin provides a simple read-only HTTPS API to access data. The API is live at https://gitcoin.co/api/v0.1","title":"Generalized API"},{"location":"mk_rest_api/#datatypes","text":"Beyond simple datatypes like string or integer the API returns datatypes like dates that are serialized in a very specific fashion. Datatype Description Example date_time Date and time represented in ISO 8601 2017-09-24T18:59:53.964344Z ethereum_address An ethereum token address with the leading 0x 0x636f3093258412b96c43bef3663f1b853253ec59 token_type The type of token offered as a reward. Ex: ETH or GIT ETH","title":"Datatypes"},{"location":"mk_rest_api/#bounties","text":"The bounties endpoint provides a listing of bounties and their current status. There is one endpoint that access bounties: https://gitcoin.co/api/v0.1/bounties/ - Returns a list of bounties","title":"bounties"},{"location":"mk_rest_api/#fields","text":"Field Key Datatype Description url string URL for this specific bounty Ex: api/v0.1/bounties/9/ created_on date_time Creation timestamp modified_on date_time Last modified timestamp title string Title of the bounty web3_created date_time Creation timestamp for the transaction that holds this bounty value_in_token integer Amount of tokens rewarded for bounty token_name token_type Type of token. Ex: ETH , GIT token_address ethereum_address Address where the tokens are located bounty_type string Type of bounty. Ex: Bug , Feature , Security project_length string Relative length of project Ex: Hours , Days , Weeks , Months experience_level string Recommended experience level github_url string URL on GitHub where you can find the bounty description github_org_name string github org name github_repo_name string github repo name github_issue_number string github issue number keywords string comma delimited list of keywords current_bounty boolean Whether this bounty is the most current revision one or not expires_date date_time Date before which the bounty must be compelted value_in_eth integer Value of the bounty in Ethereum value_in_usdt float Approximation of value in USD at bounty web3_created timestamp value_in_usdt_now float Approximation of current value in USD now date_time Current date_time on the server action_urls dict a list of urls where user can take action against the bounty paid array List of users who have been paid from the bounty Current Status Field Key Datatype Description is_open boolean True if the bounty has not been completed status string Current status enum: ( open , The bounty was created), ( started , The bounty was started) ( submitted , Someone submitted work for the bounty) ( done , Someone fulfilled and completed the bounty) ( expired , The bounty expired w/o completion) Bounty Creator & Bounty Fulfiller Field Key Datatype Description bounty_owner_address ethereum_address Address of the person who owns the bounty bounty_owner_email string Email of the bounty owner bounty_owner_github_username string Username of the bounty owner metadata dictionary Misc metadata about the bounty and the creator fulfiller_address ethereum_address Address of the person who fulfilled the bounty fulfiller_email string Email of the person fulfilling the bounty fulfiller_github_username string Username of the fulfiller fulfiller_metadata dictionary githubUsername and notificationEmail for the fulfiller","title":"Fields"},{"location":"mk_rest_api/#url-parameters","text":"Filters You can filter the data returned from the API by providing these keys as URL parameters experience_level , project_length , bounty_type , bounty_owner_address , is_open , github_url and pk . github_url can take a comma-separated list of GitHub urls. pk takes an ID and returns a single bounty. Order By By passing an order_by parameter you can order the data by the provided key. Ex: ?order_by=expires_date . To sort in the opposite direction you can add a - in from the the key ?order_by=-expires_date .","title":"URL Parameters"},{"location":"mk_rest_api/#example-request","text":"~ % curl \"https://gitcoin.co/api/v0.1/bounties/?&order_by=web3_created\" [ { \"url\": \"https:\\/\\/gitcoin.co\\/api\\/v0.1\\/bounties\\/87\\/\", \"created_on\": \"2017-09-22T01:42:07.060841Z\", \"modified_on\": \"2017-09-23T12:36:11.946334Z\", \"title\": \"Update local_settings.py.example\", \"web3_created\": \"2017-09-22T01:42:04Z\", \"value_in_token\": \"1000000000000000000.00\", \"token_name\": \"ETH\", \"token_address\": \"0x0000000000000000000000000000000000000000\", \"bounty_type\": \"\", \"project_length\": \"\", \"experience_level\": \"\", \"github_url\": \"https:\\/\\/github.com\\/owocki\\/pytrader\\/pull\\/83232\", \"bounty_owner_address\": \"0xd3d280c2866eaa795fc72bd850c48e7cce166e23\", \"bounty_owner_email\": \"ksowocki@gmail.com\", \"bounty_owner_github_username\": \"owocki\", \"fulfiller_address\": \"0x0000000000000000000000000000000000000000\", \"fulfiller_email\": null, \"fulfiller_github_username\": null, \"is_open\": true, \"expires_date\": \"2017-09-23T01:42:04Z\", \"fulfiller_metadata\": { }, \"current_bounty\": true, \"value_in_eth\": 1.0e+18, \"value_in_usdt_now\": 280.65, \"status\": \"expired\", \"now\": \"2017-09-24T18:59:53.964344Z\" }, .... ]","title":"Example Request"},{"location":"mk_rest_api/#grants","text":"The grants endpoint provides a listing of grants and all it's information. There is one endpoint that access grants: https://gitcoin.co/api/v0.1/grants/?limit=10 - Returns a list of grants","title":"grants"},{"location":"mk_rest_api/#fields_1","text":"Field Key Datatype Description active boolean Whether or not the Grant is active title string Title of the Grant slug string Slug for the Grant populated from title description string Description of the Grant reference_url string Associated reference URL of the Grant logo string URL of the Grant logo image admin_address ethereum_address Wallet address of the Grant Admin where subscription funds will be sent amount_received float Total amount of contributions received by the Grant in USDT/DAI token_address ethereum_address Address of the token to be used with the Grant token_symbol token_type Type of token to be used with the Grant contract_address ethereum_address Contract address of the Grant metadata dictionary Misc metadata about the Grant network string Network in which the Grant contract resides required_gas_price float Required gas price for the Grant admin_profile dictionary Grant Admin's profile team_members array Array of Dictionaries of team members contributing to this Grant Profile : Field Key Datatype Description id integer Profile ID url string URL to the Gitcoin profile handle string GitHub handle/username associated with the Profile keywords array Array of keywords associated with the Profile position integer Position of the Profile in the Weekly Earners leaderboard avatar_url string URL to the Gitcoin Avatar of the Profile github_url string URL to the GitHub profile total_earned float Sum of ETH collected by the profile organizations dictionary Dictionary containing profiles that this user works with","title":"Fields"},{"location":"mk_rest_api/#url-parameters_1","text":"Filters You can filter the data returned from the API by providing these keys as URL parameters title , admin_address , description , keyword , grant_type and pk that takes an ID and returns a single grant. You can also add a limit parameter to limit the results (typically for performance reasons).","title":"URL Parameters"},{"location":"mk_rest_api/#example-request_1","text":"~ % curl \"https://gitcoin.co/api/v0.1/grants/?grant_type=tech\" [ { \"active\": true, \"title\": \"Cipher Dogs Team\", \"slug\": \"cipher-dogs-team\", \"description\": \"Our team is interested in electronic art/hack/social activity and blockchain/decentralized technology and other technologies. We are aimed at promoting blockchain technology among people. Our team creates various libraries, websites, artwork and other projects in the field of blockchain technologies. We also help blockchain projects. We believe that blockchain technology is the future.\\r\\n\", \"reference_url\": \"https://github.com/CipherDogs\", \"logo\": \"https://c.gitcoin.co/grants/1a573aca695eada7c2f9badf1ed84b10/cipher1.png\", \"admin_address\": \"0xD12Dd8aEb8F96D0bFF6aA9C74bDf92009741d3Aa\", \"amount_received\": \"0.0000\", \"token_address\": \"0x0000000000000000000000000000000000000000\", \"token_symbol\": \"Any Token\", \"contract_address\": \"0xbcAE3e2893722698535aaf355F0aA92CA846354F\", \"metadata\": {}, \"network\": \"mainnet\", \"required_gas_price\": \"0\", \"admin_profile\": { \"id\": 82330, \"url\": \"/deadblackclover\", \"handle\": \"deadblackclover\", \"keywords\": [ \"Rust\", \"Scala\", \"JavaScript\", \"HTML\", \"CSS\", \"Emacs Lisp\", \"C#\", \"Vue\", \"Shell\" ], \"position\": 0, \"avatar_url\": \"https://c.gitcoin.co/avatars/0aee35065024a0382c19e5a30fb2349c/deadblackclover.png\", \"github_url\": \"https://github.com/deadblackclover\", \"total_earned\": 0, \"organizations\": {} }, \"team_members\": [ { \"id\": 82330, \"url\": \"/deadblackclover\", \"handle\": \"deadblackclover\", \"keywords\": [ \"Rust\", \"Scala\", \"JavaScript\", \"HTML\", \"CSS\", \"Emacs Lisp\", \"C#\", \"Vue\", \"Shell\" ], \"position\": 0, \"avatar_url\": \"https://c.gitcoin.co/avatars/0aee35065024a0382c19e5a30fb2349c/deadblackclover.png\", \"github_url\": \"https://github.com/deadblackclover\", \"total_earned\": 0, \"organizations\": {} } ] }, ... ]","title":"Example Request"},{"location":"mk_rest_api/#web3-api","text":"","title":"WEB3 API"},{"location":"mk_rest_api/#note-this-api-is-now-in-the-process-of-being-deprecated-as-since-going-cross-chain-gitcoin-no-longer-uses-standardbounties-as-the-base-layer-of-its-bounties-experience-this-api-will-still-be-useful-for-legacy-bounties-which-are-posted-to-standcard-bounties","text":"You may interact with the HTTPS API as follows truffle(development)> BountyIndex.at('0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd').bountydetails.call('https://github.com/owocki/pytrader/pull/83'); [ { [String: '100000000000000000'] s: 1, e: 17, c: [ 1000 ] }, '0x0000000000000000000000000000000000000000', '0xd3d280c2866eaa795fc72bd850c48e7cce166e23', '0x0000000000000000000000000000000000000000', true, true, 'https://github.com/owocki/pytrader/pull/83', { [String: '1506220425'] s: 1, e: 9, c: [ 1506220425 ] }, '{\"issueTitle\":\"\",\"issueKeywords\":\"\",\"tokenName\":\"ETH\",\"githubUsername\":\"owocki\",\"notificationEmail\":\"ksowocki@gmail.com\",\"experienceLevel\":\"\",\"projectLength\":\"\",\"bountyType\":\"\"}', { [String: '1537756425'] s: 1, e: 9, c: [ 1537756425 ] }, '' ] be sure to replace 0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd with the BountyIndex contract address. be sure to replace https://github.com/owocki/pytrader/pull/83 with the issue that you care about. Further information on the smart contract interface is available at https://github.com/gitcoinco/smart_contracts/blob/master/contracts/bounty/BountyIndex.sol _bountydetails function returns the following fields:","title":"Note: this API is now in the process of being deprecated, as since going cross-chain, Gitcoin no longer uses standardbounties as the base layer of it's bounties experience.  This API will still  be useful for legacy bounties which are posted to standcard bounties."},{"location":"mk_rest_api/#fields_2","text":"Field Key Datatype Description amount float Bounty amount in ETH or specified ERC20 token amount_denomination string Denomination of the bounty action_url string URL of the bounty title string Title of hte bounty description string Description of the bounty created_on datetime Creation timestamp source_project string Source Project the bounty came from tags strings tags to classify the bounthy","title":"Fields"},{"location":"mk_securitybounty/","text":"Gitcoin Security Bounty Program Gitcoin is an open-source marketplace with our code available for inspection and research. If you discover a severe bug affecting the privacy, data, or security of our users we ask that you disclose responsibly and privately. For security related vulnerabilities we reward researchers for private and professional disclosure. Non-security issues (style issues, gas optimizations) are not eligible for this bounty. Guidelines Participating in our security bounty program requires you to follow our guidelines. Responsible investigation and reporting includes, but not limited to the following: Don't download, modify, or destroy other users' data. Don't cause a denial-of-service on our platform through exploits, vulnerabilities, traffic, or causing issues with our technology providers. Don't repeatedly request updates on your reports. Gitcoin is a small team and constant requests for updates can render your report ineligible. Allow us up to 7 days to respond to your emails. Do only use your own account to test issues in production. You can also download our open source code and run your own instance to research and test for vulnerabilities. Social engineering attacks, DDOS, physical access, spearfishing, etc. are not eligible. Payouts will be made to the first individuals who submit a report. The Gitcoin team has the final say in all determinations of bounty payouts including severity, classification, amount, whether the report falls under our guidelines, etc. Vulnerabilities should be disclosed directly to the Gitcoin team by emailing engineering@gitcoin.co - reports should not be made publically or to any third party. These communications must remain confidential to be eligible. Threats, ransom demands, unprofessional language, etc. of any kind will automatically disqualify you from participating in the program. The only domain eligible for the bounty program is https://gitcoin.co - no subdomains, related services, etc. are within the scope of the program. Vulnerabilities found in support services (ex: Slack, Wordpress, etc.) are not eligible. Vulnerability Scope Any significant vulnerability may be eligible for an award provided it follows the guidelines set in this document. Some examples of eligible issues are: Cross-Site Request Forgery (CSRF) Cross-Site Scripting (XSS) Code Executions SQL Injection Server Side Request Forgery (SSRF) Privilege Escalations Authentication Bypasses Data Leaks Some examples of ineligible issues are: Rate Limiting Stack Traces Self-XSS Man in the Middle (MiTM) Attacks Denial of Service Attacks Cache Poisoning Clickjacking Missing DNS Records Brute Force Attacks Vulnerabilities in third party services or third party platforms Vulnerabilities in past versions of the software Vulnerabilities affecting outdated browsers or operating systems Eligible Reports must contain enough information and a proof of concept code or screenshots. After a report is made and confirmed, efforts will be made to fix the issue. Researchers agree to assist in the testing of the fixes. Vulnerability severity is judged by the OWASP model Payouts will be awarded in ETH and converted from USD at the time of payout - please include your Ethereum address and Gitcoin username when submitting a report: Critical: $600 High: $225 Medium: $125 Low: $30","title":"Security Bounty Program"},{"location":"mk_securitybounty/#gitcoin-security-bounty-program","text":"Gitcoin is an open-source marketplace with our code available for inspection and research. If you discover a severe bug affecting the privacy, data, or security of our users we ask that you disclose responsibly and privately. For security related vulnerabilities we reward researchers for private and professional disclosure. Non-security issues (style issues, gas optimizations) are not eligible for this bounty.","title":"Gitcoin Security Bounty Program"},{"location":"mk_securitybounty/#guidelines","text":"Participating in our security bounty program requires you to follow our guidelines. Responsible investigation and reporting includes, but not limited to the following: Don't download, modify, or destroy other users' data. Don't cause a denial-of-service on our platform through exploits, vulnerabilities, traffic, or causing issues with our technology providers. Don't repeatedly request updates on your reports. Gitcoin is a small team and constant requests for updates can render your report ineligible. Allow us up to 7 days to respond to your emails. Do only use your own account to test issues in production. You can also download our open source code and run your own instance to research and test for vulnerabilities. Social engineering attacks, DDOS, physical access, spearfishing, etc. are not eligible. Payouts will be made to the first individuals who submit a report. The Gitcoin team has the final say in all determinations of bounty payouts including severity, classification, amount, whether the report falls under our guidelines, etc. Vulnerabilities should be disclosed directly to the Gitcoin team by emailing engineering@gitcoin.co - reports should not be made publically or to any third party. These communications must remain confidential to be eligible. Threats, ransom demands, unprofessional language, etc. of any kind will automatically disqualify you from participating in the program. The only domain eligible for the bounty program is https://gitcoin.co - no subdomains, related services, etc. are within the scope of the program. Vulnerabilities found in support services (ex: Slack, Wordpress, etc.) are not eligible.","title":"Guidelines"},{"location":"mk_securitybounty/#vulnerability-scope","text":"Any significant vulnerability may be eligible for an award provided it follows the guidelines set in this document. Some examples of eligible issues are: Cross-Site Request Forgery (CSRF) Cross-Site Scripting (XSS) Code Executions SQL Injection Server Side Request Forgery (SSRF) Privilege Escalations Authentication Bypasses Data Leaks Some examples of ineligible issues are: Rate Limiting Stack Traces Self-XSS Man in the Middle (MiTM) Attacks Denial of Service Attacks Cache Poisoning Clickjacking Missing DNS Records Brute Force Attacks Vulnerabilities in third party services or third party platforms Vulnerabilities in past versions of the software Vulnerabilities affecting outdated browsers or operating systems Eligible Reports must contain enough information and a proof of concept code or screenshots. After a report is made and confirmed, efforts will be made to fix the issue. Researchers agree to assist in the testing of the fixes. Vulnerability severity is judged by the OWASP model Payouts will be awarded in ETH and converted from USD at the time of payout - please include your Ethereum address and Gitcoin username when submitting a report: Critical: $600 High: $225 Medium: $125 Low: $30","title":"Vulnerability Scope"},{"location":"mk_setup/","text":"Running Locally with Docker (Recommended) git clone https://github.com/gitcoinco/web.git cd web cp app/app/local.env app/app/.env Special instructions for Windows WSL contributors If you are using Windows 10 Professional or Enterprise, you can download Docker Desktop for Windows . Otherwise, you will need to install and configure Docker Toolbox. Docker Toolbox Follow the installation instructions on the manual for installing Docker Toolbox on Windows . WSL by default mounts your C: drive on /mnt/c , but Docker Toolkit instead expects it to be mounted on /c/ . To instruct WSL to mount it in the correct location, create a config file in /etc/wsl.conf using WSL and enter the following: ini [automount] root = / options = \"metadata\" Lastly, ensure that you are sharing the folders of your project directory to your VirtualBox VM, i.e. if your Gitcoin repository is located in C:/Projects/web , you will have to go to the VirtualBox UI, click on Settings > Shared Folders , and ensure that there is an entry with a name of c/Projects and a path of C:\\Projects . Configure Once Docker is installed (either via Docker Desktop for Windows or Docker Toolkit), install the Docker packages on WSL as you normally would for Ubuntu: # Update the apt package list. $ sudo apt-get update -y # Install Docker's package dependencies. $ sudo apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common # Download and add Docker's official public PGP key. $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Verify the fingerprint. $ sudo apt-key fingerprint 0EBFCD88 # Add the `stable` channel's Docker upstream repository. # # If you want to live on the edge, you can change \"stable\" below to \"test\" or # \"nightly\". I highly recommend sticking with stable! $ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # Update the apt package list (for the new apt repo). $ sudo apt-get update -y # Install the latest version of Docker CE. $ sudo apt-get install -y docker-ce # Allow your user to access the Docker CLI without needing root access. $ sudo usermod -aG docker $USER Startup server Check that you have Docker and Docker-compose properly installed docker --version Docker version 18.09.7, build 2d0083d docker-compose --version docker-compose version 1.24.1, build 4667896b The above should work. Running in Detached mode docker-compose up -d --build The above would create a background daemon when it finished installation. It takes pretty long time, an hour or more. The good news is that it runs on its own. If you have error while running this it is likely to come from docker and docker-compose. Running in the foreground docker-compose up --build Screens during building Viewing Logs Actively follow a container's log: docker-compose logs -f web # Or any other container name View all container logs: docker-compose logs Navigate to http://localhost:8000/ . For background build, Gitcoin server runs as a service and its always there. You can stop it using kill process , docker-compose to stop it or other means. Note: Running docker-compose logs --tail=50 -f <optional container_name> will follow all container output in the active terminal window, while specifying a container name will follow that specific container's output. --tail is optional. Check out the Docker Compose CLI Reference for more information. A note on performance The Gitcoin docker containers contain serval containers for many purposes (web development, task pipeline dev, ganache for blockchain development). Because of this, the whole package can take several GB of RAM. If all you want to do is work on the site, and you experience slowness while running Gitcoin, we recommend running these commands docker stop web_worker_1; docker stop web_testrpc_1; docker stop web_ipfs_1; docker stop web_chat_1 and adding this line to your .env file: SUPRESS_DEBUG_TOOLBAR=1 If you run docker-compose restart web after doing these things, you should find the performance footprint to be less. Integration Setup (recommended) If you plan on using the Github or Google integration, please read the third party integration guide . Static Asset Handling (optional) If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co' Initial test data The development server is conditioned with a representative sampling of test data fixtures outlined below: 20ish users doing a variety things Bounties in various statuses - so you can get to work! Grants - ask some friends to support your work on Gitcoin A variety of Kudos for you to send to everybody hard at work on bounties A default superuser - usage below Go to http://localhost:8000/_administrationeconomy/ Login with username: root password: gitcoinco Poke around the database tables Click the Impersonate User link, pick any user and poke around the site Create Django Admin The initial test data comes with a pre-configured superuser. You can also create a new one using the following command: docker-compose exec web python3 app/manage.py createsuperuser Make sure that the services are already running. See Startup server for an example. If the script worked correctly, you will be asked for the following information: username password email - optional, blank is ok Add a Custom ERC20 Token To your Local Gitcoin Create a django admin Go to http://localhost:8000/_administrationeconomy/token/ and click Add New Token . Open another tab and go to http://tokenfactory.surge.sh Mint a new token on the network of your choice. Go back to your Gitcoin local tab, and enter the token. Click Save Congratulations, your local environment now supports your custom token! You may continue administering your token over at http://tokenfactory.surge.sh . Hint: Maybe you should mint some? \ud83e\udd14 In case tokenfactory.surge.sh doesn't work, you can deploy a simple ERC20 token to a testnet using remix . // SPDX-License-Identifier:MIT pragma solidity 0.8.10; import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.2/contracts/token/ERC20/ERC20.sol\"; contract Token is ERC20 { constructor() ERC20(\"My Test Token\", \"TEST\") { _mint(msg.sender, 1_000_000 * (10 ** decimals())); } } Optional: Import bounty data from web3 to your database This can be useful if you'd like data to test with shared data: docker-compose exec web python3 app/manage.py sync_geth rinkeby -20 99999999999 Note: using the sync_geth command can potentially break some of the Initial test data fixtures. FAQ Running Tests Q: How can I run the tests locally? You can ensure your project will pass all Travis tests by running: make tests # docker-compose exec -e DJANGO_SETTINGS_MODULE=app.settings web pytest -p no:ethereum; npm run eslint; The above make command will run eslint and pytest . You can also run the Cypress regression tests by opening the Cypress UI by running: make cypress Fresh rebuild Q: My environment is erroring out due to missing modules/packages or postgresql errors. How can I fix it? make fresh # docker-compose down -v; docker-compose up -d --build; Create superuser Q: How can I access the django administration login? make superuser # docker-compose exec web python3 app/manage.py createsuperuser open http://localhost:8000/_administration Docker for-mac troubleshooting Q: When building with docker on my mac, CPU usage is high and device is overheating what should I do? Problems regarding docker and high CPU usage seem to be common on mac. One community user found that going to the resources section on Docker desktop and lowering CPU cores and disk image size to minimum improves this issue. For more troubleshooting tips on this problem consult the docker for-mac repo issues [https://github.com/docker/for-mac/issues?q=cpu](https://github.com/docker/for-mac/issues?q=cpu) Fix local test issues Q: How can I attempt automatic remediation of eslint and isort test failures? make fix # npm run eslint:fix; docker-compose exec web isort -rc --atomic .; Makefile Help Q: How can I see a complete list of Makefile commands and descriptions? Run: make autotranslate Automatically translate all untranslated entries for all LOCALES in settings.py. build Build the Gitcoin Web image. collect-static Collect newly added static resources from the assets directory. compilemessages Execute compilemessages for translations on the web container. compress-images Compress and optimize images throughout the repository. Requires optipng, svgo, and jpeg-recompress. cypress Open cypress testing UI eslint Run eslint against the project directory. Requires node, npm, and project dependencies. fix-eslint Run eslint --fix against the project directory. Requires node, npm, and project dependencies. fix Attempt to run all fixes against the project directory. fix-isort Run isort against python files in the project directory. fix-stylelint Run stylelint --fix against the project directory. Requires node, npm, and project dependencies. fix-yapf Run yapf against any included or newly introduced Python code. fresh Completely destroy all compose assets and start compose with a fresh build. get_django_shell Open a standard Django shell. get_ipdb_shell Drop into the active Django shell for inspection via ipdb. get_shell_plus Open a standard Django shell. load_initial_data Load initial development fixtures. login Login to Docker Hub. logs Print and actively tail the docker compose logs. makemessages Execute makemessages for translations on the web container. migrate Migrate the database schema with the latest unapplied migrations. migrations Generate migration files for schema changes. pgactivity Run pg_activivty against the local postgresql instance. pgtop Run pg_top against the local postgresql instance. push Push the Docker image to the Docker Hub repository. pytest-pdb Run pytest with pdb support (Backend) pytest Run pytest (Backend) stylelint Run stylelint against the project directory. Requires node, npm, and project dependencies. tests Run the full test suite. update_fork Update the current fork master branch with upstream master. update_stable Update the stable branch with master. These are commands that you can use to play with Gitcoin web. However, they are for developer. If you want to play around some may need special docker setup. make build uses docker experimental functions. Enable docker experimental functions sudo nano /etc/docker/daemon.json Copy and paste { \"experimental\": true } On-chain activities Q: Which network should I be using for local testing? It is recommended to use the Rinkeby testnet for local development testing. You can receive some testnet eth by visiting the Rinkeby Faucet Alternatively, you can use the local ganache-cli test rpc network that ships with the docker compose stack by switching to Localhost 8545 in Metamask. Address already in use Q: I am receiving a \"address already in use\" error when attempting to run: docker-compose up This error can occur when you are already running a local instance of PostgreSQL or another service on any of the ports specified in the docker-compose.yml . You can identify which process is currently bound to the port with: lsof -i :<port_number> | grep LISTEN - for example: lsof -i :8000 | grep LISTEN and simply sudo kill <pid> , substituting the PID returned from lsof . Github Login and Google Verification Q: How can I enable the Github Login and/or Google verification functionality on my local docker instance? If you plan on using the Github and/or Google integration, please read the third party integration guide . ipdb Q: what's the best way to import ipdb; ipdb.set_trace() a HTTP request via docker? Add import ipdb;ipdb.set_trace() to the method you want to inspect, you then run: make get_ipdb_shell to drop into the active shell for inspection. Access Django Shell Q: How can I access the Django shell, similar to: python manage.py shell ? Simply run: make get_django_shell or docker-compose exec web python3 app/manage.py shell Access BASH Q: I want to inspect or manipulate the container via bash. How can I access the root shell of the container? Run: docker-compose exec web bash I have a question about Kudos. Is there a FAQ for that product? Yes click here .","title":"Setup Environment (recommended)"},{"location":"mk_setup/#running-locally-with-docker-recommended","text":"git clone https://github.com/gitcoinco/web.git cd web cp app/app/local.env app/app/.env","title":"Running Locally with Docker (Recommended)"},{"location":"mk_setup/#special-instructions-for-windows-wsl-contributors","text":"If you are using Windows 10 Professional or Enterprise, you can download Docker Desktop for Windows . Otherwise, you will need to install and configure Docker Toolbox.","title":"Special instructions for Windows WSL contributors"},{"location":"mk_setup/#docker-toolbox","text":"Follow the installation instructions on the manual for installing Docker Toolbox on Windows . WSL by default mounts your C: drive on /mnt/c , but Docker Toolkit instead expects it to be mounted on /c/ . To instruct WSL to mount it in the correct location, create a config file in /etc/wsl.conf using WSL and enter the following: ini [automount] root = / options = \"metadata\" Lastly, ensure that you are sharing the folders of your project directory to your VirtualBox VM, i.e. if your Gitcoin repository is located in C:/Projects/web , you will have to go to the VirtualBox UI, click on Settings > Shared Folders , and ensure that there is an entry with a name of c/Projects and a path of C:\\Projects .","title":"Docker Toolbox"},{"location":"mk_setup/#configure","text":"Once Docker is installed (either via Docker Desktop for Windows or Docker Toolkit), install the Docker packages on WSL as you normally would for Ubuntu: # Update the apt package list. $ sudo apt-get update -y # Install Docker's package dependencies. $ sudo apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common # Download and add Docker's official public PGP key. $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Verify the fingerprint. $ sudo apt-key fingerprint 0EBFCD88 # Add the `stable` channel's Docker upstream repository. # # If you want to live on the edge, you can change \"stable\" below to \"test\" or # \"nightly\". I highly recommend sticking with stable! $ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # Update the apt package list (for the new apt repo). $ sudo apt-get update -y # Install the latest version of Docker CE. $ sudo apt-get install -y docker-ce # Allow your user to access the Docker CLI without needing root access. $ sudo usermod -aG docker $USER","title":"Configure"},{"location":"mk_setup/#startup-server","text":"Check that you have Docker and Docker-compose properly installed docker --version Docker version 18.09.7, build 2d0083d docker-compose --version docker-compose version 1.24.1, build 4667896b The above should work.","title":"Startup server"},{"location":"mk_setup/#running-in-detached-mode","text":"docker-compose up -d --build The above would create a background daemon when it finished installation. It takes pretty long time, an hour or more. The good news is that it runs on its own. If you have error while running this it is likely to come from docker and docker-compose.","title":"Running in Detached mode"},{"location":"mk_setup/#running-in-the-foreground","text":"docker-compose up --build","title":"Running in the foreground"},{"location":"mk_setup/#screens-during-building","text":"","title":"Screens during building"},{"location":"mk_setup/#viewing-logs","text":"Actively follow a container's log: docker-compose logs -f web # Or any other container name View all container logs: docker-compose logs Navigate to http://localhost:8000/ . For background build, Gitcoin server runs as a service and its always there. You can stop it using kill process , docker-compose to stop it or other means. Note: Running docker-compose logs --tail=50 -f <optional container_name> will follow all container output in the active terminal window, while specifying a container name will follow that specific container's output. --tail is optional. Check out the Docker Compose CLI Reference for more information.","title":"Viewing Logs"},{"location":"mk_setup/#a-note-on-performance","text":"The Gitcoin docker containers contain serval containers for many purposes (web development, task pipeline dev, ganache for blockchain development). Because of this, the whole package can take several GB of RAM. If all you want to do is work on the site, and you experience slowness while running Gitcoin, we recommend running these commands docker stop web_worker_1; docker stop web_testrpc_1; docker stop web_ipfs_1; docker stop web_chat_1 and adding this line to your .env file: SUPRESS_DEBUG_TOOLBAR=1 If you run docker-compose restart web after doing these things, you should find the performance footprint to be less.","title":"A note on performance"},{"location":"mk_setup/#integration-setup-recommended","text":"If you plan on using the Github or Google integration, please read the third party integration guide .","title":"Integration Setup (recommended)"},{"location":"mk_setup/#static-asset-handling-optional","text":"If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co'","title":"Static Asset Handling (optional)"},{"location":"mk_setup/#initial-test-data","text":"The development server is conditioned with a representative sampling of test data fixtures outlined below: 20ish users doing a variety things Bounties in various statuses - so you can get to work! Grants - ask some friends to support your work on Gitcoin A variety of Kudos for you to send to everybody hard at work on bounties A default superuser - usage below Go to http://localhost:8000/_administrationeconomy/ Login with username: root password: gitcoinco Poke around the database tables Click the Impersonate User link, pick any user and poke around the site","title":"Initial test data"},{"location":"mk_setup/#create-django-admin","text":"The initial test data comes with a pre-configured superuser. You can also create a new one using the following command: docker-compose exec web python3 app/manage.py createsuperuser Make sure that the services are already running. See Startup server for an example. If the script worked correctly, you will be asked for the following information: username password email - optional, blank is ok","title":"Create Django Admin"},{"location":"mk_setup/#add-a-custom-erc20-token-to-your-local-gitcoin","text":"Create a django admin Go to http://localhost:8000/_administrationeconomy/token/ and click Add New Token . Open another tab and go to http://tokenfactory.surge.sh Mint a new token on the network of your choice. Go back to your Gitcoin local tab, and enter the token. Click Save Congratulations, your local environment now supports your custom token! You may continue administering your token over at http://tokenfactory.surge.sh . Hint: Maybe you should mint some? \ud83e\udd14 In case tokenfactory.surge.sh doesn't work, you can deploy a simple ERC20 token to a testnet using remix . // SPDX-License-Identifier:MIT pragma solidity 0.8.10; import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.2/contracts/token/ERC20/ERC20.sol\"; contract Token is ERC20 { constructor() ERC20(\"My Test Token\", \"TEST\") { _mint(msg.sender, 1_000_000 * (10 ** decimals())); } }","title":"Add a Custom ERC20 Token To your Local Gitcoin"},{"location":"mk_setup/#optional-import-bounty-data-from-web3-to-your-database","text":"This can be useful if you'd like data to test with shared data: docker-compose exec web python3 app/manage.py sync_geth rinkeby -20 99999999999 Note: using the sync_geth command can potentially break some of the Initial test data fixtures.","title":"Optional: Import bounty data from web3 to your database"},{"location":"mk_setup/#faq","text":"","title":"FAQ"},{"location":"mk_setup/#running-tests","text":"Q: How can I run the tests locally? You can ensure your project will pass all Travis tests by running: make tests # docker-compose exec -e DJANGO_SETTINGS_MODULE=app.settings web pytest -p no:ethereum; npm run eslint; The above make command will run eslint and pytest . You can also run the Cypress regression tests by opening the Cypress UI by running: make cypress","title":"Running Tests"},{"location":"mk_setup/#fresh-rebuild","text":"Q: My environment is erroring out due to missing modules/packages or postgresql errors. How can I fix it? make fresh # docker-compose down -v; docker-compose up -d --build;","title":"Fresh rebuild"},{"location":"mk_setup/#create-superuser","text":"Q: How can I access the django administration login? make superuser # docker-compose exec web python3 app/manage.py createsuperuser open http://localhost:8000/_administration","title":"Create superuser"},{"location":"mk_setup/#docker-for-mac-troubleshooting","text":"Q: When building with docker on my mac, CPU usage is high and device is overheating what should I do? Problems regarding docker and high CPU usage seem to be common on mac. One community user found that going to the resources section on Docker desktop and lowering CPU cores and disk image size to minimum improves this issue. For more troubleshooting tips on this problem consult the docker for-mac repo issues [https://github.com/docker/for-mac/issues?q=cpu](https://github.com/docker/for-mac/issues?q=cpu)","title":"Docker for-mac troubleshooting"},{"location":"mk_setup/#fix-local-test-issues","text":"Q: How can I attempt automatic remediation of eslint and isort test failures? make fix # npm run eslint:fix; docker-compose exec web isort -rc --atomic .;","title":"Fix local test issues"},{"location":"mk_setup/#makefile-help","text":"Q: How can I see a complete list of Makefile commands and descriptions? Run: make autotranslate Automatically translate all untranslated entries for all LOCALES in settings.py. build Build the Gitcoin Web image. collect-static Collect newly added static resources from the assets directory. compilemessages Execute compilemessages for translations on the web container. compress-images Compress and optimize images throughout the repository. Requires optipng, svgo, and jpeg-recompress. cypress Open cypress testing UI eslint Run eslint against the project directory. Requires node, npm, and project dependencies. fix-eslint Run eslint --fix against the project directory. Requires node, npm, and project dependencies. fix Attempt to run all fixes against the project directory. fix-isort Run isort against python files in the project directory. fix-stylelint Run stylelint --fix against the project directory. Requires node, npm, and project dependencies. fix-yapf Run yapf against any included or newly introduced Python code. fresh Completely destroy all compose assets and start compose with a fresh build. get_django_shell Open a standard Django shell. get_ipdb_shell Drop into the active Django shell for inspection via ipdb. get_shell_plus Open a standard Django shell. load_initial_data Load initial development fixtures. login Login to Docker Hub. logs Print and actively tail the docker compose logs. makemessages Execute makemessages for translations on the web container. migrate Migrate the database schema with the latest unapplied migrations. migrations Generate migration files for schema changes. pgactivity Run pg_activivty against the local postgresql instance. pgtop Run pg_top against the local postgresql instance. push Push the Docker image to the Docker Hub repository. pytest-pdb Run pytest with pdb support (Backend) pytest Run pytest (Backend) stylelint Run stylelint against the project directory. Requires node, npm, and project dependencies. tests Run the full test suite. update_fork Update the current fork master branch with upstream master. update_stable Update the stable branch with master. These are commands that you can use to play with Gitcoin web. However, they are for developer. If you want to play around some may need special docker setup. make build uses docker experimental functions.","title":"Makefile Help"},{"location":"mk_setup/#enable-docker-experimental-functions","text":"sudo nano /etc/docker/daemon.json Copy and paste { \"experimental\": true }","title":"Enable docker experimental functions"},{"location":"mk_setup/#on-chain-activities","text":"Q: Which network should I be using for local testing? It is recommended to use the Rinkeby testnet for local development testing. You can receive some testnet eth by visiting the Rinkeby Faucet Alternatively, you can use the local ganache-cli test rpc network that ships with the docker compose stack by switching to Localhost 8545 in Metamask.","title":"On-chain activities"},{"location":"mk_setup/#address-already-in-use","text":"Q: I am receiving a \"address already in use\" error when attempting to run: docker-compose up This error can occur when you are already running a local instance of PostgreSQL or another service on any of the ports specified in the docker-compose.yml . You can identify which process is currently bound to the port with: lsof -i :<port_number> | grep LISTEN - for example: lsof -i :8000 | grep LISTEN and simply sudo kill <pid> , substituting the PID returned from lsof .","title":"Address already in use"},{"location":"mk_setup/#github-login-and-google-verification","text":"Q: How can I enable the Github Login and/or Google verification functionality on my local docker instance? If you plan on using the Github and/or Google integration, please read the third party integration guide .","title":"Github Login and Google Verification"},{"location":"mk_setup/#ipdb","text":"Q: what's the best way to import ipdb; ipdb.set_trace() a HTTP request via docker? Add import ipdb;ipdb.set_trace() to the method you want to inspect, you then run: make get_ipdb_shell to drop into the active shell for inspection.","title":"ipdb"},{"location":"mk_setup/#access-django-shell","text":"Q: How can I access the Django shell, similar to: python manage.py shell ? Simply run: make get_django_shell or docker-compose exec web python3 app/manage.py shell","title":"Access Django Shell"},{"location":"mk_setup/#access-bash","text":"Q: I want to inspect or manipulate the container via bash. How can I access the root shell of the container? Run: docker-compose exec web bash","title":"Access BASH"},{"location":"mk_setup/#i-have-a-question-about-kudos-is-there-a-faq-for-that-product","text":"Yes click here .","title":"I have a question about Kudos.  Is there a FAQ for that product?"},{"location":"mk_styleguide/","text":"Styleguide This is a WIP in order to standardize and unify the look and feel of the product All Gitcoin UI styled classes are prefixed with g- to distincly identify them. Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to reinventing the wheel. Typography g-font-muli (Muli - Default) g-font-futura (Futura - For Marketing Pages) The font variations used in Gitcoin can be found in typography.css Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to declaring the font within the templates css file. Forms Mutiselect (using select2) usage <div class=\"form__select2 g-multiselect\"> <select class=\"js-select2\" multiple> </select> </div> The Multiselect styling used in Gitcoin can be found in select.css Copy to clipboard usage <script src=\"{% static 'v2/js/clipboard.js' %}\"></script> <textarea id=\"matchid\">This text will be copied</textarea> <button data-copyclipboard=\"#matchid\">Copy Text</button> usage with class <input type=\"text\" class=\"matchclass\" value=\"This text will be copied\"> <button data-copyclipboard=\".matchclass\">Copy Text</button> Note: You can use it with textarea or input elements. Slider usage <label class=\"g-switch\"> <input id=\"package-period\" type=\"checkbox\"> <span class=\"slider\"></span> </label> The Slider styling used in Gitcoin can be found in slider.css Animations FadeIn Container has a fade in animation when it becomes into viewport. values data-fade-direction : left | mid | right (default: mid ) data-fade-duration : Number (default: 1500 ) usage <div class=\"g-fadein\" data-fade-duration=1000 data-fade-direction=\"mid\">","title":"StyleGuide"},{"location":"mk_styleguide/#styleguide","text":"This is a WIP in order to standardize and unify the look and feel of the product All Gitcoin UI styled classes are prefixed with g- to distincly identify them. Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to reinventing the wheel.","title":"Styleguide"},{"location":"mk_styleguide/#typography","text":"g-font-muli (Muli - Default) g-font-futura (Futura - For Marketing Pages) The font variations used in Gitcoin can be found in typography.css Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to declaring the font within the templates css file.","title":"Typography"},{"location":"mk_styleguide/#forms","text":"","title":"Forms"},{"location":"mk_styleguide/#mutiselect-using-select2","text":"usage <div class=\"form__select2 g-multiselect\"> <select class=\"js-select2\" multiple> </select> </div> The Multiselect styling used in Gitcoin can be found in select.css","title":"Mutiselect (using select2)"},{"location":"mk_styleguide/#copy-to-clipboard","text":"usage <script src=\"{% static 'v2/js/clipboard.js' %}\"></script> <textarea id=\"matchid\">This text will be copied</textarea> <button data-copyclipboard=\"#matchid\">Copy Text</button> usage with class <input type=\"text\" class=\"matchclass\" value=\"This text will be copied\"> <button data-copyclipboard=\".matchclass\">Copy Text</button> Note: You can use it with textarea or input elements.","title":"Copy to clipboard"},{"location":"mk_styleguide/#slider","text":"usage <label class=\"g-switch\"> <input id=\"package-period\" type=\"checkbox\"> <span class=\"slider\"></span> </label> The Slider styling used in Gitcoin can be found in slider.css","title":"Slider"},{"location":"mk_styleguide/#animations","text":"","title":"Animations"},{"location":"mk_styleguide/#fadein","text":"Container has a fade in animation when it becomes into viewport. values data-fade-direction : left | mid | right (default: mid ) data-fade-duration : Number (default: 1500 ) usage <div class=\"g-fadein\" data-fade-duration=1000 data-fade-direction=\"mid\">","title":"FadeIn"},{"location":"mk_third_party_integrations/","text":"Third party integrations Setup Github OAuth2 App Integration (Recommended) Navigate to: Github - New Application and enter similar values to: Enter Application Name: MyGitcoinApp Homepage URL: http://localhost Application description: My Gitcoin App Authorization callback URL: http://localhost:8000/ (required) The authorization callback URL should match your BASE_URL value in web/app/app/.env Update the web/app/app/.env file to include the values provided by Github: GITHUB_CLIENT_ID=xxxx GITHUB_CLIENT_SECRET=xxx GITHUB_APP_NAME=MyGitcoinApp Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Gitcoin environment. Setup Github User Integration (Recommended) Navigate to: Github - New Token At minimum, select user scope. Update the web/app/app/.env file to include the values provided by Github: GITHUB_API_TOKEN=xxx GITHUB_API_USER=xxx Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature By default, we disable outbound GitHub notifications to any repository that isn't under the GITHUB_API_USER repositories. For example, if settings.GITHUB_API_USER == gitcoinco only github.com/gitcoinco/<repos> bounties and associated tips will post Github comments. Setup Google Verification Integration Navigate to: Google - New Project and enter similar values to: Enter Project Name: MyGitcoinApp Navigate to: Google - OAuth consent screen and create an external OAuth consent screen: Application name: MyGitcoinApp Support email: Select your email Navigate to: Google - Credentials and create OAth Client ID: Application Type: Web Application Name: MyGitcoinApp Authorized JavaScript origins: http://localhost:8000 Authorized redirect URIs: http://localhost:8000/api/v0.1/profile/verify_user_google Update the web/app/app/.env file to include the values provided by Google: GOOGLE_CLIENT_ID=xxx GOOGLE_CLIENT_SECRET=xxx Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Google environment. Note: Update the OAUTHLIB_INSECURE_TRANSPORT in web/app/app/.env to 0 for production. Setup Facebook Integration Navigate to: Facebook - Create App , select Build Connected Experiences and continue with similar values to: * App Display Name: MyGitcoinApp * App Contact Email: Your email address Set Up Facebook Login in Add Products to Your App . On the page: Facebook Login > Settings : * Valid OAuth Redirect URIs: http://localhost:8000 Update the web/app/app/.env file to include the values provided by Facebook on your created app Settings > Basic : FACEBOOK_CLIENT_ID=xxx FACEBOOK_CLIENT_SECRET=xxx Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Gitcoin environment. Setup SendGrid to Send Emails (Recommended) Create a new SendGrid Account at https://sendgrid.com Go to https://app.sendgrid.com/settings/api_keys and create a new Sendgrid API key: Update the web/app/app/.env file to include the values provided by SendGrid: SENDGRID_API_KEY=xxx CONTACT_EMAIL=xxx # Be VERY CAREFUL when changing this setting. You don't want to accidently # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None Setup Fortmatic Integration Sign up/Login to Fortmatic dashboard at https://dashboard.fortmatic.com Update the web/app/app/.env file to include the values provided by Fortmatic: FORTMATIC_LIVE_KEY=xxx FORTMATIC_TEST_KEY=xxx Gitcoinbot Installation Instructions This integration requires the Github OAuth2 App Integration Navigate to: Gitcoinbot Github App Copy the application ID found on the page as the GITCOINBOT_APP_ID environment variable. Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature # Be VERY CAREFUL when changing this setting. You don't want to accidentally # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None The following environment variables must be set for gitcoinbot to work correctly: GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=APP_ID_FROM_ABOVE # Defaults to empty. GITCOIN_BOT_CERT_PATH=RELATIVE_PATH_TO_CERT_FILE # Defaults to empty. Example GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=7735 # Gitcoin Bot App ID GITCOIN_BOT_CERT_PATH=app/gitcoin_bot_secret.pem # If pem file is located at web/app/app/gitcoin_bot_secret.pem Aside from these environment variables, the settings page of the gitcoin bot application must have the correct url for webhook events to post to. It should be set to https://gitcoin.co/payload based on urls.py line 131. After running the migrations and deploying the gitcoin.co website, gitcoinbot will begin to receive webhook events from any repository that it is installed into. This application will then parse through the comments and respond if it is called with @gitcoinbot + registered action call. Sentry Integration Error tracking is entirely optional and primarily for internal staging and production tracking. If you would like to track errors of your local environment, setup an account at: Sentry.io Once you have access to your project secrets, you can enable Sentry error tracking for both the backend and frontend by adding the following environment variables to web/app/app/.env : SENTRY_DSN=xxx","title":"Third Party Integration Setup"},{"location":"mk_third_party_integrations/#third-party-integrations","text":"","title":"Third party integrations"},{"location":"mk_third_party_integrations/#setup-github-oauth2-app-integration-recommended","text":"Navigate to: Github - New Application and enter similar values to: Enter Application Name: MyGitcoinApp Homepage URL: http://localhost Application description: My Gitcoin App Authorization callback URL: http://localhost:8000/ (required) The authorization callback URL should match your BASE_URL value in web/app/app/.env Update the web/app/app/.env file to include the values provided by Github: GITHUB_CLIENT_ID=xxxx GITHUB_CLIENT_SECRET=xxx GITHUB_APP_NAME=MyGitcoinApp Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Gitcoin environment.","title":"Setup Github OAuth2 App Integration (Recommended)"},{"location":"mk_third_party_integrations/#setup-github-user-integration-recommended","text":"Navigate to: Github - New Token At minimum, select user scope. Update the web/app/app/.env file to include the values provided by Github: GITHUB_API_TOKEN=xxx GITHUB_API_USER=xxx Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature By default, we disable outbound GitHub notifications to any repository that isn't under the GITHUB_API_USER repositories. For example, if settings.GITHUB_API_USER == gitcoinco only github.com/gitcoinco/<repos> bounties and associated tips will post Github comments.","title":"Setup Github User Integration (Recommended)"},{"location":"mk_third_party_integrations/#setup-google-verification-integration","text":"Navigate to: Google - New Project and enter similar values to: Enter Project Name: MyGitcoinApp Navigate to: Google - OAuth consent screen and create an external OAuth consent screen: Application name: MyGitcoinApp Support email: Select your email Navigate to: Google - Credentials and create OAth Client ID: Application Type: Web Application Name: MyGitcoinApp Authorized JavaScript origins: http://localhost:8000 Authorized redirect URIs: http://localhost:8000/api/v0.1/profile/verify_user_google Update the web/app/app/.env file to include the values provided by Google: GOOGLE_CLIENT_ID=xxx GOOGLE_CLIENT_SECRET=xxx Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Google environment. Note: Update the OAUTHLIB_INSECURE_TRANSPORT in web/app/app/.env to 0 for production.","title":"Setup Google Verification Integration"},{"location":"mk_third_party_integrations/#setup-facebook-integration","text":"Navigate to: Facebook - Create App , select Build Connected Experiences and continue with similar values to: * App Display Name: MyGitcoinApp * App Contact Email: Your email address Set Up Facebook Login in Add Products to Your App . On the page: Facebook Login > Settings : * Valid OAuth Redirect URIs: http://localhost:8000 Update the web/app/app/.env file to include the values provided by Facebook on your created app Settings > Basic : FACEBOOK_CLIENT_ID=xxx FACEBOOK_CLIENT_SECRET=xxx Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Gitcoin environment.","title":"Setup Facebook Integration"},{"location":"mk_third_party_integrations/#setup-sendgrid-to-send-emails-recommended","text":"Create a new SendGrid Account at https://sendgrid.com Go to https://app.sendgrid.com/settings/api_keys and create a new Sendgrid API key: Update the web/app/app/.env file to include the values provided by SendGrid: SENDGRID_API_KEY=xxx CONTACT_EMAIL=xxx # Be VERY CAREFUL when changing this setting. You don't want to accidently # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None","title":"Setup SendGrid to Send Emails (Recommended)"},{"location":"mk_third_party_integrations/#setup-fortmatic-integration","text":"Sign up/Login to Fortmatic dashboard at https://dashboard.fortmatic.com Update the web/app/app/.env file to include the values provided by Fortmatic: FORTMATIC_LIVE_KEY=xxx FORTMATIC_TEST_KEY=xxx","title":"Setup Fortmatic Integration"},{"location":"mk_third_party_integrations/#gitcoinbot-installation-instructions","text":"","title":"Gitcoinbot Installation Instructions"},{"location":"mk_third_party_integrations/#this-integration-requires-the-github-oauth2-app-integration","text":"Navigate to: Gitcoinbot Github App Copy the application ID found on the page as the GITCOINBOT_APP_ID environment variable. Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature # Be VERY CAREFUL when changing this setting. You don't want to accidentally # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None The following environment variables must be set for gitcoinbot to work correctly: GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=APP_ID_FROM_ABOVE # Defaults to empty. GITCOIN_BOT_CERT_PATH=RELATIVE_PATH_TO_CERT_FILE # Defaults to empty.","title":"This integration requires the Github OAuth2 App Integration"},{"location":"mk_third_party_integrations/#example","text":"GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=7735 # Gitcoin Bot App ID GITCOIN_BOT_CERT_PATH=app/gitcoin_bot_secret.pem # If pem file is located at web/app/app/gitcoin_bot_secret.pem Aside from these environment variables, the settings page of the gitcoin bot application must have the correct url for webhook events to post to. It should be set to https://gitcoin.co/payload based on urls.py line 131. After running the migrations and deploying the gitcoin.co website, gitcoinbot will begin to receive webhook events from any repository that it is installed into. This application will then parse through the comments and respond if it is called with @gitcoinbot + registered action call.","title":"Example"},{"location":"mk_third_party_integrations/#sentry-integration","text":"Error tracking is entirely optional and primarily for internal staging and production tracking. If you would like to track errors of your local environment, setup an account at: Sentry.io Once you have access to your project secrets, you can enable Sentry error tracking for both the backend and frontend by adding the following environment variables to web/app/app/.env : SENTRY_DSN=xxx","title":"Sentry Integration"},{"location":"mk_welcomebot/","text":"Gitcoin Slack Welcomebot Github The Gitcoin Slack Welcomebot is a Flask application meant to run on AWS Lambda using Zappa . This bot is intended to be ran as a Python 3.6 AWS Lambda function. Get started with the welcomebot by running make init . You will need to follow the Slack Bot setup instructions outlined in the Python Slack Event API client documentation. The majority of this application resides in welcomebot/app.py","title":"Readme"},{"location":"mk_welcomebot/#gitcoin-slack-welcomebot","text":"Github The Gitcoin Slack Welcomebot is a Flask application meant to run on AWS Lambda using Zappa . This bot is intended to be ran as a Python 3.6 AWS Lambda function. Get started with the welcomebot by running make init . You will need to follow the Slack Bot setup instructions outlined in the Python Slack Event API client documentation. The majority of this application resides in welcomebot/app.py","title":"Gitcoin Slack Welcomebot"},{"location":"mk_widget/","text":"Widgets Why These widgets will help you advertise your support for Gitcoin bounties. We support both image widgets (see below) and dynamically resizing javascript widgets (see directly below) Dynamic Javascript Widget Preview The JS image is responsive. Here are some screenshots of it: Example Click here to see an example JSFiddle widget Step 1: Include the JavaScript SDK on your page once, ideally right after the opening body tag. <div id=\"gc-root\"></div> <script>(function(d, s, id) { var js, gjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"https://unpkg.com/gitcoin-sdk\"; gjs.parentNode.insertBefore(js, gjs); }(document, 'script', 'gitcoin-jssdk'));</script> Step 2: Place this code wherever you want the plugin to appear on your page. <div class=\"gitcoin-widget\" data-limit=\"2\" data-order-by=\"-expires_date\" data-organization=\"MetaMask\" data-repository=\"metamask-extension\" ></div> Autoloading Importing the SDK into your application will attempt to autoload the widget by searching for '.gitcoin-widget' selectors import 'gitcoin-sdk'; or require('gitcoin-sdk'); Programmatically You can also use the Widget programmatically. import { Widget } from 'gitcoin-sdk'; or const { Widget } = require('gitcoin-sdk'); Widget can be instantiated by passing a selector option, or an element reference. new Widget({ limit: 10, orderBy: '-expires_date', organization: 'MetaMask', repository: 'metamask-extension', selector: '.gitcoin-widget', }); Static Image Widget Example <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a> Results Repos that have this widget can expect to see 35% more interest in their repo's bounties Code Place the following code into your repo readme: <a href=\"https://gitcoin.co/explorer?q=YOUR_REPO_NAME\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/YOUR_ORG_NAME/YOUR_REPO_NAME\"> </a> Make sure to replace the YOUR_ORG_NAME and YOUR_REPO_NAME text with your org and repo names! Example: <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a> Also, if you add &badge=1 to the image URL, a la <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web&badge=1\"> </a> you will see a badge version of this widget. More Examples Badge Metamask Widget Ethereum web3py Widget Market Protocol Widget","title":"Widget Setup"},{"location":"mk_widget/#widgets","text":"","title":"Widgets"},{"location":"mk_widget/#why","text":"These widgets will help you advertise your support for Gitcoin bounties. We support both image widgets (see below) and dynamically resizing javascript widgets (see directly below)","title":"Why"},{"location":"mk_widget/#dynamic-javascript-widget","text":"","title":"Dynamic Javascript Widget"},{"location":"mk_widget/#preview","text":"The JS image is responsive. Here are some screenshots of it:","title":"Preview"},{"location":"mk_widget/#example","text":"Click here to see an example JSFiddle widget Step 1: Include the JavaScript SDK on your page once, ideally right after the opening body tag. <div id=\"gc-root\"></div> <script>(function(d, s, id) { var js, gjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"https://unpkg.com/gitcoin-sdk\"; gjs.parentNode.insertBefore(js, gjs); }(document, 'script', 'gitcoin-jssdk'));</script> Step 2: Place this code wherever you want the plugin to appear on your page. <div class=\"gitcoin-widget\" data-limit=\"2\" data-order-by=\"-expires_date\" data-organization=\"MetaMask\" data-repository=\"metamask-extension\" ></div>","title":"Example"},{"location":"mk_widget/#autoloading","text":"Importing the SDK into your application will attempt to autoload the widget by searching for '.gitcoin-widget' selectors import 'gitcoin-sdk'; or require('gitcoin-sdk');","title":"Autoloading"},{"location":"mk_widget/#programmatically","text":"You can also use the Widget programmatically. import { Widget } from 'gitcoin-sdk'; or const { Widget } = require('gitcoin-sdk'); Widget can be instantiated by passing a selector option, or an element reference. new Widget({ limit: 10, orderBy: '-expires_date', organization: 'MetaMask', repository: 'metamask-extension', selector: '.gitcoin-widget', });","title":"Programmatically"},{"location":"mk_widget/#static-image-widget","text":"","title":"Static Image Widget"},{"location":"mk_widget/#example_1","text":"<a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a>","title":"Example"},{"location":"mk_widget/#results","text":"Repos that have this widget can expect to see 35% more interest in their repo's bounties","title":"Results"},{"location":"mk_widget/#code","text":"Place the following code into your repo readme: <a href=\"https://gitcoin.co/explorer?q=YOUR_REPO_NAME\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/YOUR_ORG_NAME/YOUR_REPO_NAME\"> </a> Make sure to replace the YOUR_ORG_NAME and YOUR_REPO_NAME text with your org and repo names! Example: <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a> Also, if you add &badge=1 to the image URL, a la <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web&badge=1\"> </a> you will see a badge version of this widget.","title":"Code"},{"location":"mk_widget/#more-examples","text":"","title":"More Examples"},{"location":"mk_widget/#badge","text":"","title":"Badge"},{"location":"mk_widget/#metamask-widget","text":"","title":"Metamask Widget"},{"location":"mk_widget/#ethereum-web3py-widget","text":"","title":"Ethereum web3py Widget"},{"location":"mk_widget/#market-protocol-widget","text":"","title":"Market Protocol Widget"},{"location":"app/middleware/","text":"app.middleware drop_accept_language drop_accept_language(get_response) Define the middleware to remove accept-language headers from requests. This middleware is essentially a hack to allow us to continue to use the standard Django LocaleMiddleware without modification, but simply disable the autodetection aspect based on the Accept-Language header.","title":"Middleware"},{"location":"app/pipeline/","text":"app.pipeline Define authentication pipeline functions and logic. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . save_profile save_profile(backend, user, response, request, *args, **kwargs) Associate a Profile with a User.","title":"Auth Pipeline"},{"location":"app/sitemaps/","text":"app.sitemaps StaticViewSitemap StaticViewSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. IssueSitemap IssueSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. KudosSitemap KudosSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ProfileSitemap ProfileSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ContributorLandingPageSitemap ContributorLandingPageSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ResultsSitemap ResultsSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. GrantsSitemap GrantsSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. QuestsSitemap QuestsSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. HackathonEventSiteMap HackathonEventSiteMap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. HackathonProjectSiteMap HackathonProjectSiteMap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. PostSitemap PostSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ActivitySitemap ActivitySitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible.","title":"Sitemaps"},{"location":"app/static_storage/","text":"app.static_storage Define the custom static storage to surpress bad URL references. SilentFileStorage SilentFileStorage(self, *args, **kwargs) Define the static storage using S3 via boto3 with hashing. If Django cannot find a referenced url in an asset, it will silently pass. bucket_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. custom_domain str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. location str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. exists SilentFileStorage.exists(self, name) Check if the named file exists in S3 storage url SilentFileStorage.url(self, name, force=True) Handle catching bad URLs and return the name if route is unavailable. MediaFileStorage MediaFileStorage(self, *args, **kwargs) Define the media storage backend for user uploaded/stored files. bucket_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. custom_domain str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. location str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Static Storage"},{"location":"app/utils/","text":"app.utils NotEqual NotEqual(self, lhs, rhs) Allow lookup and exclusion using not equal. lookup_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. as_sql NotEqual.as_sql(self, compiler, connection) Handle as SQL method for not equal lookup. setup_lang setup_lang(request, user) Handle setting the user's language preferences and store in the session. Args: request (Request): The Django request object. user (User): The Django user object. Raises: DoesNotExist: The exception is raised if no profile is found for the specified handle. handle_location_request handle_location_request(request) Handle determining location data from request IP. get_location_from_ip get_location_from_ip(ip_address) Get the location associated with the provided IP address. Args: ip_address (str): The IP address to lookup. Returns: dict: The GeoIP location data dictionary. get_country_from_ip get_country_from_ip(ip_address) Get the user's country information from the provided IP address. clean_str clean_str(string) Clean the provided string of all non-alpha numeric characters. get_profile get_profile(request) Get the current profile from the provided request. Returns: dashboard.models.Profile: The current user's Profile. CustomGithubOAuth2 CustomGithubOAuth2(self, strategy=None, *args, **kwargs) EXTRA_DATA Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. timeout timeout(max_timeout) Timeout decorator, parameter in seconds. allow_all_origins allow_all_origins(response) Pass in a response and add header to allow all CORs requests","title":"Utilities"},{"location":"avatar/admin/","text":"avatar.admin Define the Avatar admin layout. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . AvatarThemeAdmin AvatarThemeAdmin(self, model, admin_site) Define the AvatarThemeAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. png_asset AvatarThemeAdmin.png_asset(self, instance) Define the avatar PNG tag to be displayed in the admin. VeryGeneralAdmin VeryGeneralAdmin(self, model, admin_site) Define the VeryGeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GeneralAdmin GeneralAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. svg_asset GeneralAdmin.svg_asset(self, instance) Define the avatar SVG tag to be displayed in the admin. png_asset GeneralAdmin.png_asset(self, instance) Define the avatar PNG tag to be displayed in the admin. BaseAvatarAdmin BaseAvatarAdmin(self, model, admin_site) Define the Avatar administration layout. fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. CustomAvatarAdmin CustomAvatarAdmin(self, model, admin_site) Define the Avatar administration layout. fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"avatar/models/","text":"avatar.models Define the Avatar models. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BaseAvatar BaseAvatar(self, *args, **kwargs) Store the options necessary to render a Gitcoin avatar. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. autogenerated A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avatar_url Return the appropriate avatar URL. customavatar Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hash A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ICON_SIZE Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. png Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. socialavatar Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) get_avatar_url BaseAvatar.get_avatar_url(self) Get the Avatar URL. convert_field BaseAvatar.convert_field(self, source, input_fmt, output_fmt) Handle converting from the source field to the target based on format. determine_response BaseAvatar.determine_response(self, use_svg=True) Determine the content type and file to serve. Args: use_svg (bool): Whether or not to use SVG format. CustomAvatar CustomAvatar(self, *args, **kwargs) CustomAvatar(id, created_on, modified_on, active, profile, svg, png, hash, autogenerated, baseavatar_ptr, recommended_by_staff, style, config) baseavatar_ptr Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. baseavatar_ptr_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. config A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. recommended_by_staff A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. style A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. create_from_config CustomAvatar.create_from_config(self) Create an avatar SVG from the configuration. TODO: * Deprecate in favor of request param based view using templates. SocialAvatar SocialAvatar(self, *args, **kwargs) SocialAvatar(id, created_on, modified_on, active, profile, svg, png, hash, autogenerated, baseavatar_ptr) baseavatar_ptr Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. baseavatar_ptr_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. AvatarTextOverlayInput AvatarTextOverlayInput(self, *args, **kwargs) AvatarTextOverlayInput(id, created_on, modified_on, active, text, coment, num_uses_total, num_uses_remaining, current_uses) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. current_uses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_remaining A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_total A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. AvatarTheme AvatarTheme(self, *args, **kwargs) Store diff avatar theme types. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. artist_bio A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. img_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. override_name_ui A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_cheat_by A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"avatar/templatetags/","text":"avatar.templatetags.avatar_tags Define the Avatar template tags. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Template Tags"},{"location":"avatar/utils/","text":"avatar.utils Define the Avatar utilities. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . build_random_avatar build_random_avatar(override_skin_tone=None, override_hair_color=None, add_facial_hair=True) Build an random avatar payload using context properties handle_avatar_payload handle_avatar_payload(body) Handle the Avatar payload. get_temp_image_file get_temp_image_file(image) Fetch an image from a remote URL and hold in temporary IO. Args: url (str): The remote image URL. Returns: BytesIO: The temporary BytesIO containing the image. convert_img convert_img(obj) Convert the provided buffer to another format. Args: obj (File): The File/ContentFile object. input_fmt (str): The input format. Defaults to: svg. output_fmt (str): The output format. Defaults to: png. Exceptions: Exception: Cowardly catch blanket exceptions here, log it, and return None. Returns: BytesIO: The BytesIO stream containing the converted File data. None: If there is an exception, the method returns None. convert_wand convert_wand(img_obj, input_fmt='png', output_fmt='svg') Convert an SVG to another format. Args: img_obj (File): The PNG or other image File/ContentFile. input_fmt (str): The input format. Defaults to: png. output_fmt (str): The output format. Defaults to: svg. Returns: BytesIO: The BytesIO stream containing the converted File data. None: If there is an exception, the method returns None.","title":"Utilities"},{"location":"avatar/views/","text":"avatar.views Define the Avatar views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . avatar avatar(request) Serve an avatar. save_github_avatar save_github_avatar(request) Save the Github Avatar. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. save_custom_avatar save_custom_avatar(request) Save the Custom Avatar. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. activate_avatar activate_avatar(request) Activate the Avatar. select_preset_avatar select_preset_avatar(request) Select preset Avatar.","title":"Views"},{"location":"credits/views/","text":"credits.views","title":"Views"},{"location":"dashboard/admin/","text":"dashboard.admin Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BountyEventAdmin BountyEventAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BountyFulfillmentAdmin BountyFulfillmentAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TransactionHistoryAdmin TransactionHistoryAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ObjectViewAdmin ObjectViewAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. InvestigationAdmin InvestigationAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TipPayoutAdmin TipPayoutAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BlockedUserAdmin BlockedUserAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BlockedIPAdmin BlockedIPAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ProfileViewAdmin ProfileViewAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. PortfolioItemAdmin PortfolioItemAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. EarningAdmin EarningAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ActivityIndexAdmin ActivityIndexAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ActivityAdmin ActivityAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TokenApprovalAdmin TokenApprovalAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BountyInvitesAdmin BountyInvitesAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. from_inviter BountyInvitesAdmin.from_inviter(self, obj) Get the profile handle. to_invitee BountyInvitesAdmin.to_invitee(self, obj) Get the profile handle. InterestAdmin InterestAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. UserActionAdmin UserActionAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FeedbackAdmin FeedbackAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ProfileAdmin ProfileAdmin(self, model, admin_site) actions Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. VerificationAdmin VerificationAdmin(self, model, admin_site) raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SearchHistoryAdmin SearchHistoryAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TipAdmin TipAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BountyAdmin BountyAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonSponsorAdmin HackathonSponsorAdmin(self, model, admin_site) The admin object for the HackathonSponsor model. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonWorkshopAdmin HackathonWorkshopAdmin(self, model, admin_site) The admin object for the HackathonWorkshop model. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SponsorAdmin SponsorAdmin(self, model, admin_site) The admin object for the Sponsor model. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. img SponsorAdmin.img(self, instance) Returns a formatted HTML img node or 'n/a' if the HackathonEvent has no logo. Returns: str: A formatted HTML img node or 'n/a' if the HackathonEvent has no logo. HackathonEventAdmin HackathonEventAdmin(self, model, admin_site) The admin object for the HackathonEvent model. actions Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_filter Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. img HackathonEventAdmin.img(self, instance) Returns a formatted HTML img node or 'n/a' if the HackathonEvent has no logo. Returns: str: A formatted HTML img node or 'n/a' if the HackathonEvent has no logo. explorer_link HackathonEventAdmin.explorer_link(self, instance) Returns a formatted HTML node. Returns: str: A formatted HTML node. CouponAdmin CouponAdmin(self, model, admin_site) The admin object to maintain discount coupons for bounty list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonRegistrationAdmin HackathonRegistrationAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonProjectAdmin HackathonProjectAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. hackathon_link HackathonProjectAdmin.hackathon_link(self, instance) Returns a formatted HTML node. Returns: str: A formatted HTML node. img HackathonProjectAdmin.img(self, instance) Returns a formatted HTML img node or 'n/a' if the HackathonProject has no logo. Returns: str: A formatted HTML img node or 'n/a' if the HackathonProject has no logo. usernames HackathonProjectAdmin.usernames(self, obj) Get the profile handle. sponsor HackathonProjectAdmin.sponsor(self, obj) Get the profile handle. TribeMemberAdmin TribeMemberAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TribesSubscriptionAdmin TribesSubscriptionAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FundRequestAdmin FundRequestAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. QuestionInline QuestionInline(self, parent_model, admin_site) extra int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. show_change_link bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. Question QuestionInline.Question(self, *args, **kwargs) Question(id, created_on, modified_on, hook, poll, question_type, text, order, header, mandatory, minimum_character_count) OptionsInline OptionsInline(self, parent_model, admin_site) extra int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. show_change_link bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. Option OptionsInline.Option(self, *args, **kwargs) Option(id, created_on, modified_on, question, text) PollsAdmin PollsAdmin(self, model, admin_site) inlines Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. QuestionsAdmin QuestionsAdmin(self, model, admin_site) inlines Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. OptionsAdmin OptionsAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. AnswersAdmin AnswersAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. unique_together Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. PollMediaAdmin PollMediaAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ProfileVerificationAdmin ProfileVerificationAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. MediaFileAdmin MediaFileAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"dashboard/embed/","text":"dashboard.embed","title":"Embedded"},{"location":"dashboard/helpers/","text":"dashboard.helpers Handle dashboard helpers and related logic. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_bounty_view_kwargs get_bounty_view_kwargs(request) Get the relevant kwargs from the request. handle_bounty_views handle_bounty_views(request) Handle bounty view entry. Attributes: bounty (dashboard.Bounty): The bounty object for the specified request. bounty_kwargs (dict): The relevant key/values from the request to be used for the Bounty query. Returns: dashboard.Bounty: The Bounty object. amount amount(request) Determine the value of the provided denomination and amount in ETH and USD. Raises: Http404: The exception is raised if any error is encountered. Returns: JsonResponse: A JSON response containing ETH and USDT values. issue_details issue_details(request) Determine the Github issue keywords of the specified Github issue or PR URL. Todo: * Modify the view to only use the Github API (remove BeautifulSoup). * Simplify the view logic. Returns: JsonResponse: A JSON response containing the Github issue or PR keywords. normalize_url normalize_url(url) Normalize the URL. Args: url (str): The URL to be normalized. Returns: str: The normalized URL. UnsupportedSchemaException UnsupportedSchemaException(self, /, *args, **kwargs) Define unsupported schema exception handling. UnsupportedRepoException UnsupportedRepoException(self, /, *args, **kwargs) Define unsupported repo exception handling. bounty_did_change bounty_did_change(bounty_id, new_bounty_details) Determine whether or not the Bounty has changed. Args: bounty_id (int): The ID of the Bounty. new_bounty_details (dict): The new Bounty raw data JSON. Returns: bool: Whether or not the Bounty has changed. QuerySet: The old bounties queryset. handle_bounty_fulfillments handle_bounty_fulfillments(fulfillments, new_bounty, old_bounty) Handle BountyFulfillment creation for new bounties. Args: fulfillments (dict): The fulfillments data dictionary. new_bounty (dashboard.models.Bounty): The new Bounty object. old_bounty (dashboard.models.Bounty): The old Bounty object. Returns: QuerySet: The BountyFulfillments queryset. create_new_bounty create_new_bounty(old_bounties, bounty_payload, bounty_details, bounty_id) Handle new Bounty creation in the event of bounty changes. Possible Bounty Stages: 0: Draft 1: Active 2: Dead Returns: dashboard.models.Bounty: The new Bounty object. process_bounty_details process_bounty_details(bounty_details) Process bounty details. Args: bounty_details (dict): The Bounty details. Raises: UnsupportedSchemaException: Exception raised if the schema is unknown or unsupported. Returns: tuple: A tuple of bounty change data. tuple[0] (bool): Whether or not the Bounty changed. tuple[1] (dashboard.models.Bounty): The first old bounty object. tuple[2] (dashboard.models.Bounty): The new Bounty object. get_bounty_data_for_activity get_bounty_data_for_activity(bounty) Get data from bounty to be saved in activity records. Args: bounty (dashboard.models.Bounty): The Bounty object. Returns: dict: The Bounty data represented as a dictionary. get_fulfillment_data_for_activity get_fulfillment_data_for_activity(fulfillment) Get data from fulfillment to be saved in activity records. Args: fulfillment (dashboard.models.BountyFulfillment): The BountyFulfillment. Returns: dict: The BountyFulfillment data represented as a dictionary. record_bounty_activity record_bounty_activity(event_name, old_bounty, new_bounty, _fulfillment=None, override_created=None) Records activity based on bounty changes Args: event_name (string): the event old_bounty (dashboard.models.Bounty): The old Bounty object. new_bounty (dashboard.models.Bounty): The new Bounty object. Raises: Exception: Log all exceptions that occur during fulfillment checks. Returns: dashboard.Activity: The Activity object if user_profile is present or None. record_user_action record_user_action(event_name, old_bounty, new_bounty) Record a user action. Args: event_name (str): The event to be recorded. old_bounty (Bounty): The old Bounty object. new_bounty (Bounty): The new Bounty object. Raises: Exception: Log all exceptions that occur during fulfillment checks. is_lowball_bounty is_lowball_bounty(bounty_value_usdt) Determine if a bounty value is less than a threshold Args: bounty_value_usdt (Decimal): The value of the bounty Returns: bool: True if bounty value is less than the threshold process_bounty_changes process_bounty_changes(old_bounty, new_bounty) Process Bounty changes. Args: old_bounty (dashboard.models.Bounty): The old Bounty object. new_bounty (dashboard.models.Bounty): The new Bounty object.","title":"Helpers"},{"location":"dashboard/models/","text":"dashboard.models Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Bounty_interested Bounty_interested(self, *args, **kwargs) Bounty_interested(id, bounty, interest) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. interest Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. interest_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites_bounty BountyInvites_bounty(self, *args, **kwargs) BountyInvites_bounty(id, bountyinvites, bounty) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bountyinvites Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bountyinvites_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites_invitee BountyInvites_invitee(self, *args, **kwargs) BountyInvites_invitee(id, bountyinvites, user) bountyinvites Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bountyinvites_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites_inviter BountyInvites_inviter(self, *args, **kwargs) BountyInvites_inviter(id, bountyinvites, user) bountyinvites Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bountyinvites_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonEvent_sponsor_profiles HackathonEvent_sponsor_profiles(self, *args, **kwargs) HackathonEvent_sponsor_profiles(id, hackathonevent, profile) hackathonevent Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonevent_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonProject_profiles HackathonProject_profiles(self, *args, **kwargs) HackathonProject_profiles(id, hackathonproject, profile) hackathonproject Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonproject_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Organization_groups Organization_groups(self, *args, **kwargs) Organization_groups(id, organization, group) group Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. group_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. organization_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Organization_repos Organization_repos(self, *args, **kwargs) Organization_repos(id, organization, repo) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. organization_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. repo_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Poll_hackathon Poll_hackathon(self, *args, **kwargs) Poll_hackathon(id, poll, hackathonevent) hackathonevent Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonevent_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. poll Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. poll_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_ignore_tribes Profile_ignore_tribes(self, *args, **kwargs) Profile_ignore_tribes(id, from_profile, to_profile) from_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. from_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. to_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_organizations_fk Profile_organizations_fk(self, *args, **kwargs) Profile_organizations_fk(id, from_profile, to_profile) from_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. from_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. to_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_profile_organizations Profile_profile_organizations(self, *args, **kwargs) Profile_profile_organizations(id, profile, organization) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. organization_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_repos Profile_repos(self, *args, **kwargs) Profile_repos(id, profile, repo) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. repo_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Tool_votes Tool_votes(self, *args, **kwargs) Tool_votes(id, tool, toolvote) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tool Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tool_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. toolvote Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. toolvote_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyQuerySet BountyQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Bounties. current BountyQuerySet.current(self) Filter results down to current bounties only. stats_eligible BountyQuerySet.stats_eligible(self) Exclude results that we don't want to track in statistics. exclude_by_status BountyQuerySet.exclude_by_status(self, excluded_statuses=None) Exclude results with a status matching the provided list. filter_by_status BountyQuerySet.filter_by_status(self, filtered_status=None) Filter results with a status matching the provided list. keyword BountyQuerySet.keyword(self, keyword) Filter results to all Bounty objects containing the keywords. Args: keyword (str): The keyword to search title, issue description, and issue keywords by. Returns: dashboard.models.BountyQuerySet: The QuerySet of bounties filtered by keyword. hidden BountyQuerySet.hidden(self) Filter results to only bounties that have been manually hidden by moderators. visible BountyQuerySet.visible(self) Filter results to only bounties not marked as hidden. needs_review BountyQuerySet.needs_review(self) Filter results by bounties that need reviewed. reviewed BountyQuerySet.reviewed(self) Filter results by bounties that have been reviewed. has_applicant BountyQuerySet.has_applicant(self) Filter results by bounties that have applicants. warned BountyQuerySet.warned(self) Filter results by bounties that have been warned for inactivity. escalated BountyQuerySet.escalated(self) Filter results by bounties that have been escalated for review. closed BountyQuerySet.closed(self) Filter results by bounties that have been closed on Github. not_started BountyQuerySet.not_started(self) Filter results by bounties that have not been picked up in 3+ days. has_funds BountyQuerySet.has_funds(self) Filter results by bounties that are actively funded or funds have been dispersed. Bounty Bounty(self, *args, **kwargs) Define the structure of a Bounty. Attributes: BOUNTY_TYPES (list of tuples): The valid bounty types. EXPERIENCE_LEVELS (list of tuples): The valid experience levels. PROJECT_LENGTHS (list of tuples): The possible project lengths. STATUS_CHOICES (list of tuples): The valid status stages. FUNDED_STATUSES (list of str): The list of status types considered to have retained value. OPEN_STATUSES (list of str): The list of status types considered open. CLOSED_STATUSES (list of str): The list of status types considered closed. TERMINAL_STATUSES (list of str): The list of status types considered terminal states. accepted A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. additional_funding_summary Return a dict describing the additional funding from crowdfunding that this object has admin_mark_as_remarket_ready A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_and_hide A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_org_logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. admin_override_org_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_suspend_auto_approval A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. attached_job_description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. balance A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BOUNTY_CATEGORIES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. bounty_categories A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_owner_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_reserved_for_user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_reserved_for_user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_state A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BOUNTY_STATES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. bounty_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BOUNTY_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. bountyinvites Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_payout_tips Return the Bulk payout tips associated with this bounty. canceled_bounty_reason A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. canceled_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. CLOSED_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. contract_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coupon_code Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. coupon_code_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. current_bounty A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. escalated Filter results by bounties that have been escalated for review. estimated_hours A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. event Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. EVENT_HANDLERS dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -> new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2) event_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. events Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. experience_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EXPERIENCE_LEVELS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. expires_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. featuring_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. feedbacks Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. fulfillment_accepted_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillment_started_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillment_submitted_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillments Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. FUNDED_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. funder_last_messaged_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funding_organisation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Bounty._method(self, *, field=<django.db.models.fields.CharField: bounty_state>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: bounty_type>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: experience_level>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: idx_status>) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: web3_created>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: permission_type>) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: web3_created>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: project_length>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: project_type>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: repo_type>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: web3_type>) github_comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_issue_details A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. has_applicant Filter results by bounties that have applicants. hyper_next_publication A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hypercharge_mode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idx_experience_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idx_project_length A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idx_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. interested Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. interested_comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_featured A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_legacy Determine if the Bounty is legacy based on sunset date. Todo: * Remove this method following legacy bounty sunsetting. Returns: bool: Whether or not the Bounty is using the legacy contract. is_open A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_project_type_fulfilled Determine whether or not the Project Type is currently fulfilled. Todo: * Add remaining Project Type fulfillment handling. Returns: bool: Whether or not the Bounty Project Type is fully staffed. issue_description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_comment_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_remarketed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. match_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. now Return the time now in the current timezone. num_fulfillments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. OPEN_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. org Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. org_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. override_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. paid Return list of users paid for this bounty. past_expiration_date Return true IFF issue is past expiration date past_hard_expiration_date Return true IFF issue is past smart contract expiration date and therefore cannot ever be claimed again permission_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PERMISSION_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. privacy_preferences A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project_bounty Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. project_length A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PROJECT_LENGTHS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. project_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PROJECT_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. remarketed_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. REPO_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. reserved_for_user_expiration A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reserved_for_user_from A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. snooze_warnings_for_days A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. standard_bounties_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status Determine the status of the Bounty. Raises: Exception: Catch whether or not any exception is encountered and return unknown for status. Returns: str: The status of the Bounty. STATUS_CHOICES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. submissions_comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TERMINAL_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. tips Return the tips associated with this bounty. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title_or_desc Return the title of the issue. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_value_in_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_value_time_peg A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_eth A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_usdt_now A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_true A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. warned Filter results by bounties that have been warned for inactivity. web3_created A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. web3_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. WEB3_TYPES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. WORK_IN_PROGRESS_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. save Bounty.save(self, *args, **kwargs) Define custom handling for saving bounties. handle_event Bounty.handle_event(self, event) Handle a new BountyEvent, and potentially change state get_absolute_url Bounty.get_absolute_url(self) Get the absolute URL for the Bounty. Returns: str: The absolute URL for the Bounty. get_relative_url Bounty.get_relative_url(self, preceding_slash=True) Get the relative URL for the Bounty. Attributes: preceding_slash (bool): Whether or not to include a preceding slash. Returns: str: The relative URL for the Bounty. get_canonical_url Bounty.get_canonical_url(self) Get the canonical URL of the Bounty for SEO purposes. Returns: str: The canonical URL of the Bounty. snooze_url Bounty.snooze_url(self, num_days) Get the bounty snooze URL. Args: num_days (int): The number of days to snooze the Bounty. Returns: str: The snooze URL based on the provided number of days. approve_worker_url Bounty.approve_worker_url(self, worker) Get the bounty work approval URL. Args: worker (string): The handle to approve Returns: str: The work approve URL based on the worker name reject_worker_url Bounty.reject_worker_url(self, worker) Get the bounty work rejection URL. Args: worker (string): The handle to reject Returns: str: The work reject URL based on the worker name is_hunter Bounty.is_hunter(self, handle) Determine whether or not the profile is the bounty hunter. Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user is the bounty hunter. is_fulfiller Bounty.is_fulfiller(self, handle) Determine whether or not the profile is the bounty is_fulfiller. Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user is the bounty is_fulfiller. is_funder Bounty.is_funder(self, handle) Determine whether or not the profile is the bounty funder. Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user is the bounty funder. has_started_work Bounty.has_started_work(self, handle, pending=False) Determine whether or not the profile has started work Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user has started work. get_avatar_url Bounty.get_avatar_url(self, gitcoin_logo_flag=False) Return the local avatar URL. get_github_api_url Bounty.get_github_api_url(self) Get the Github API URL associated with the bounty. Returns: str: The Github API URL associated with the issue. fetch_issue_item Bounty.fetch_issue_item(self, item_type='body') Fetch the item type of an issue. Args: type (str): The github API response body item to be fetched. Returns: str: The item content. fetch_issue_comments Bounty.fetch_issue_comments(self, save=True) Fetch issue comments for the associated Github issue. Args: save (bool): Whether or not to save the Bounty after fetching. Returns: dict: The comments data dictionary provided by Github. action_urls Bounty.action_urls(self) Provide URLs for bounty related actions. Returns: dict: A dictionary of action URLS for this bounty. is_notification_eligible Bounty.is_notification_eligible(self, var_to_check=True) Determine whether or not a notification is eligible for transmission outside of production. Returns: bool: Whether or not the Bounty is eligible for outbound notifications. BountyEvent BountyEvent(self, *args, **kwargs) An Event taken by a user, which may change the state of a Bounty bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. created_by Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. created_by_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. event_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EVENT_TYPES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. _method BountyEvent._method(self, *, field=<django.db.models.fields.CharField: event_type>) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyFulfillment BountyFulfillment(self, *args, **kwargs) The structure of a fulfillment on a Bounty. accepted A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. accepted_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_hours_worked A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_identifier A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillment_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funder_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funder_identifier A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funder_last_notified_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funder_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. funder_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.CharField: payout_status>) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.CharField: payout_type>) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.CharField: tenant>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PAYOUT_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. payout_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PAYOUT_TYPE Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. payout_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. project_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TENANT Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. tenant A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_json Define the JSON representation of BountyFulfillment. Returns: dict: A JSON representation of BountyFulfillment. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountySyncRequest BountySyncRequest(self, *args, **kwargs) Define the structure for bounty syncing. _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Subscription Subscription(self, *args, **kwargs) Subscription(id, created_on, modified_on, email, raw_data, ip) email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. raw_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SendCryptoAssetQuerySet SendCryptoAssetQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for SendCryptoAsset. send_success SendCryptoAssetQuerySet.send_success(self) Filter results down to successful sends only. not_submitted SendCryptoAssetQuerySet.not_submitted(self) Filter results down to not submitted results only. send_pending SendCryptoAssetQuerySet.send_pending(self) Filter results down to pending sends only. send_happy_path SendCryptoAssetQuerySet.send_happy_path(self) Filter results down to pending/success sends only. send_fail SendCryptoAssetQuerySet.send_fail(self) Filter results down to failed sends only. receive_success SendCryptoAssetQuerySet.receive_success(self) Filter results down to successful receives only. receive_pending SendCryptoAssetQuerySet.receive_pending(self) Filter results down to pending receives only. receive_happy_path SendCryptoAssetQuerySet.receive_happy_path(self) Filter results down to pending receives only. receive_fail SendCryptoAssetQuerySet.receive_fail(self) Filter results down to failed receives only. SendCryptoAsset SendCryptoAsset(self, *args, **kwargs) Abstract Base Class to handle the model for both Tips and Kudos. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments_public A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. emails A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.CharField: receive_tx_status>) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.CharField: tx_status>) github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_for_bounty_fulfiller A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. primary_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_tx_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_tx_time A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. received_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tokenAddress A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tokenName A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TX_STATUS_CHOICES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. tx_time A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. web3_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Meta SendCryptoAsset.Meta(self, /, *args, **kwargs) is_notification_eligible SendCryptoAsset.is_notification_eligible(self, var_to_check=True) Determine whether or not a notification is eligible for transmission outside of production. Returns: bool: Whether or not the Tip is eligible for outbound notifications. update_tx_status SendCryptoAsset.update_tx_status(self) Updates the tx status according to what infura says about the tx update_receive_tx_status SendCryptoAsset.update_receive_tx_status(self) Updates the receive tx status according to what infura says about the receive tx Tip Tip(self, *args, **kwargs) Inherit from SendCryptoAsset base class, and extra fields that are needed for Tips. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. awards Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. comments_priv A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. expires_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fundrequest Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payouts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quests_reward_token Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. recipient_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. recipient_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TipPayout TipPayout(self, *args, **kwargs) Model representing redemption of a Kudos _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tip_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. FundRequest FundRequest(self, *args, **kwargs) FundRequest(id, modified_on, profile, requester, token_name, amount, comments, tip, network, address, created_on) address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. requester Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. requester_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. tip_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. InterestQuerySet InterestQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Interests. needs_review InterestQuerySet.needs_review(self) Filter results to Interest objects requiring review by moderators. warned InterestQuerySet.warned(self) Filter results to Interest objects that are currently in warning. Interest Interest(self, *args, **kwargs) Define relationship for profiles expressing interest on a bounty. acceptance_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. created A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.CharField: status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. issue_message A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pending A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. STATUS_OKAY str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_PENDING str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_REVIEW str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_SNOOZED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_WARNED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. WORK_STATUSES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. mark_for_review Interest.mark_for_review(self) Flag the Interest for review by the moderation team. ActivityQuerySet ActivityQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Activities. needs_review ActivityQuerySet.needs_review(self) Filter results to Activity objects to be reviewed by moderators. reviewed ActivityQuerySet.reviewed(self) Filter results to Activity objects to be reviewed by moderators. warned ActivityQuerySet.warned(self) Filter results to Activity objects to be reviewed by moderators. escalated_for_removal ActivityQuerySet.escalated_for_removal(self) Filter results to Activity objects to be reviewed by moderators. related_to ActivityQuerySet.related_to(self, profile) Filter results to Activity objects which are related to a particular profile. Activities related to a Profile can be defined as: - Posts created by that user - Posts that the user likes (even a comment) - Posts tipped by that user (even a comment) - Posts the user commented on ActivityIndex ActivityIndex(self, *args, **kwargs) All Activity Reads happen from this table activity Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. activity_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ActivityIndex._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ActivityIndex._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ActivityIndex._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ActivityIndex._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Activity Activity(self, *args, **kwargs) Represent Start work/Stop work event. Attributes: ACTIVITY_TYPES (list of tuples): The valid activity types. activities_index Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. activity_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ACTIVITY_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. cached_view_props A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. created A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. favorite_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. flags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Activity._method(self, *, field=<django.db.models.fields.CharField: activity_type>) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hackathonevent Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonevent_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hidden A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. humanized_activity_type Turn snake_case into Snake Case. Returns: str: The humanized nameactivity_type id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudos_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_transfer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudos_transfer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. likes Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. needs_review A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. other_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. other_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pin Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. project_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subscription Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. subscription_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tip_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. view_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. point_value Activity.point_value(self) Returns: int the Point value of this activity to_dict Activity.to_dict(self, fields=None, exclude=None) Define the standard to dict representation of the object. Args: fields (list): The list of fields to include. If not provided, include all fields. If not provided, all fields are included. Defaults to: None. exclude (list): The list of fields to exclude. If not provided, no fields are excluded. Default to: None. Returns: dict: The dictionary representation of the object. LabsResearch LabsResearch(self, *args, **kwargs) Define the structure of Labs Research object. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. image Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. upcoming A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. UserVerificationModel UserVerificationModel(self, *args, **kwargs) Define the checkboxes for user verification. bug_free_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. completed_x_bounties A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) great_communication A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. speedy_and_responsive A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites BountyInvites(self, *args, **kwargs) Define the structure of bounty invites. bounty Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. get_bounty_invite_url Returns a unique url for each bounty and one who is inviting Returns: A unique string for each bounty _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.CharField: status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. INVITE_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. invitee Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. inviter Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileQuerySet ProfileQuerySet(self, model=None, query=None, using=None, hints=None) Define the Profile QuerySet to be used as the objects manager. slim ProfileQuerySet.slim(self) Filter slims down whats returned from the DB to not include large fields. visible ProfileQuerySet.visible(self) Filter results to only visible profiles. hidden ProfileQuerySet.hidden(self) Filter results to only hidden profiles. Repo Repo(self, *args, **kwargs) Repo(id, created_on, modified_on, name) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. Organization Organization(self, *args, **kwargs) Organization(id, created_on, modified_on, name) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) groups Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. repos Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. BlockedURLFilter BlockedURLFilter(self, *args, **kwargs) BlockedURLFilter(id, created_on, modified_on, expression, comment) comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. expression A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonRegistration HackathonRegistration(self, *args, **kwargs) Defines the Hackthon profiles registrations _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. looking_project A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. looking_team_members A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. referer A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. registrant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. registrant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TribesSubscription TribesSubscription(self, *args, **kwargs) TribesSubscription(id, created_on, modified_on, expires_on, tribe, plan_type, hackathon_tokens) expires_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TribesSubscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TribesSubscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TribesSubscription._method(self, *, field=<django.db.models.fields.CharField: plan_type>) _method TribesSubscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TribesSubscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathon_tokens A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. plan_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. plans Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. tribe Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tribe_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile Profile(self, *args, **kwargs) Define the structure of the user profile. TODO: * Remove all duplicate identity related information already stored on User. access_token The Github access token associated with this Profile. Returns: str: The associated Github access token. actions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. actions_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. activity_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_avatar Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. admin_override_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. alumni Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. anonymize_gitcoin_grants_contributions A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. as_dict A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. as_representation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. automatic_backup A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avatar_baseavatar_related Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. average_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avg_hourly_rate A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bio A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounties_funded Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bountyfulfillment_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. brightid_uuid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bulk_transfer_redemptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_transfers Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. cart_activity Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. chat_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. clr_pledges Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. comments Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. completed_bounties Returns bounties completed by user Returns: number: number of bounties completed contact_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. curator Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. custom_tagline A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. dominant_persona A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. donations Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. dont_autofollow_earnings A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. earnings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. earnings_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email_index A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email_subscriptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. encoded_number A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ens_verification_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. etc_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. events Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. facebook_user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_percentage A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. feedbacks_got Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. feedbacks_sent Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. flags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. follower Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. follower_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. following_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. form_submission_records A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfilled Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Profile._method(self, *, field=<django.db.models.fields.CharField: dominant_persona>) _method Profile._method(self, *, field=<django.db.models.fields.CharField: job_search_status>) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: last_calc_date>, is_next=True, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.CharField: pref_lang_code>) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: last_calc_date>, is_next=False, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) get_quarterly_stats Generate last 90 days stats for this user. Returns: dict : containing the following information 'user_total_earned_eth': Total earnings of user in ETH. 'user_total_earned_usd': Total earnings of user in USD. 'user_total_funded_usd': Total value of bounties funded by the user on bounties in done status in USD 'user_total_funded_hours': Total hours input by the developers on the fulfillment of bounties created by the user in USD 'user_fulfilled_bounties_count': Total bounties fulfilled by user 'user_fufilled_bounties': bool, if the user fulfilled bounties 'user_funded_bounties_count': Total bounties funded by the user 'user_funded_bounties': bool, if the user funded bounties in the last quarter 'user_funded_bounty_developers': Unique set of users that fulfilled bounties funded by the user 'user_avg_hours_per_funded_bounty': Average hours input by developer on fulfillment per bounty 'user_avg_hourly_rate_per_funded_bounty': Average hourly rate in dollars per bounty funded by user 'user_avg_eth_earned_per_bounty': Average earning in ETH earned by user per bounty 'user_avg_usd_earned_per_bounty': Average earning in USD earned by user per bounty 'user_num_completed_bounties': Total no. of bounties completed. 'user_num_funded_fulfilled_bounties': Total bounites that were funded by the user and fulfilled 'user_bounty_completion_percentage': Percentage of bounties successfully completed by the user 'user_funded_fulfilled_percentage': Percentage of bounties funded by the user that were fulfilled 'user_active_in_last_quarter': bool, if the user was active in last quarter 'user_no_of_languages': No of languages user used while working on bounties. 'user_languages': Languages that were used in bounties that were worked on. 'relevant_bounties': a list of Bounty(s) that would match the skillset input by the user into the Match tab of their settings _method Profile._method(self, *, field=<django.db.models.fields.CharField: selected_persona>) gitcoin_chat_access_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_access_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_events Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. google_user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. grant_apikey Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_contributor Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_phantom_funding Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_teams Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grantclr_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grantcollection_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grantflags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. granthalloffamegrantee_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grants Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathon_registration Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathonevent_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hide_profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hide_wallet_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hide_wallet_address_anonymized A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idena_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idena_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. identity_data_facebook A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. identity_data_google A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ignore Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. ignore_tribes Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. interested Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. interests A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. investigations Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. is_alpha_tester Determine whether or not the user is an alpha tester. Returns: bool: Whether or not the user is an alpha tester. is_brightid_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_duniter_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_ens_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_facebook_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_google_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_idena_connected A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_idena_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_moderator Determine whether or not the user is a moderator. Returns: bool: Whether or not the user is a moderator. is_org A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_poap_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_poh_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_pro A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_staff Determine whether or not the user is a staff member. Returns: bool: Whether or not the user is a member of the staff. is_tribe A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_twitter_verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. job_location A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. job_salary A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. JOB_SEARCH_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. job_search_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. job_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_wallets Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. last_calc_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_observed_payout_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_sync_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_validation_request A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_visit A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. leaderboard_ranks Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. likes Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. linkedin_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. location A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. longest_streak A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. match_rankings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. matchPledges Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. mautic_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. max_num_issues_start_work A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. max_tip_amount_usdt_per_tx A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. max_tip_amount_usdt_per_week A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_repeated_relationships A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. offeractions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. offers_created Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. org Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. org_earnings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. organizations A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organizations_fk Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. orgs_bounties Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. other_activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. override_dict A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. passport_requests Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. persona_is_funder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. persona_is_hunter A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PERSONAS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. pins Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. poap_owner_account A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. poh_handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. portfolio_items Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. pref_do_not_track A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pref_lang_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferred_kudos_wallet Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. preferred_kudos_wallet_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferred_payout_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. products_choose A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile_organizations Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile_wallpaper A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project_profiles Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quest_attempts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quest_feedback Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. questpointawards Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quests_created Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. rank_coder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank_funder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank_org A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. received_kudos Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. received_tips Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. referred Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. referrer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. referrer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reliability A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. remote A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repos Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. requests_receiver Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. requests_sender Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. reserved_bounties Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. resume The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) search_results_visible Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. selected_persona A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sent_earnings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. sent_kudos Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. sent_tips Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. show_job_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slack_channel A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slack_repos A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slack_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sms_verification A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. spent_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. squelches Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. stats Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. subscription Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. success_rate A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. suppress_leaderboard A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sybil_score A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip_payouts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. token_approvals Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. token_requests Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. transfers_enabled Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. tribe_description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tribes_cover_image Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. trust_bonus A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. trust_profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. validation_attempts A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. verifications Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. viewed_by Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. viewed_profiles Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. votes Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. workshop_speaker Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. get_average_star_rating Profile.get_average_star_rating(self, scale=1) Returns the average star ratings (overall and individual topic) for a particular user calc_activity_level Profile.calc_activity_level(self) Determines the activity level of a user Returns: str: High, Low, Medium, or New calc_longest_streak Profile.calc_longest_streak(self) Determines the longest streak, in workdays, of this user Returns: int: a number of weekdays calc_num_repeated_relationships Profile.calc_num_repeated_relationships(self) the number of repeat relationships that this user has created Returns: int: a number of repeat relationships calc_avg_hourly_rate Profile.calc_avg_hourly_rate(self) Returns: float: the average hourly rate for this user in dollars calc_success_rate Profile.calc_success_rate(self) Returns: int; the success percentage for this users bounties as a positive integer. calc_reliability_ranking Profile.calc_reliability_ranking(self) Returns: the reliabiliyt ranking that the user has. get_access_token Profile.get_access_token(self, save=False) Get the Github access token from User. Args: save (bool): Whether or not to save the User access token to the profile. Raises: Exception: The exception is raised in the event of any error and returns an empty string. Returns: str: The Github access token. get_slack_repos Profile.get_slack_repos(self, join=False) Get the profile's slack tracked repositories. Args: join (bool): Whether or not to return a joined string representation. Defaults to: False. Returns: list of str: If joined is False, a list of slack repositories. str: If joined is True, a combined string of slack repositories. update_slack_integration Profile.update_slack_integration(self, token, channel, repos) Update the profile's slack integration settings. Args: token (str): The profile's slack token. channel (str): The profile's slack channel. repos (list of str): The profile's github repositories to track. get_sum Profile.get_sum(self, sum_type='collected', network='mainnet', bounties=None, currency='usd') Get the sum of collected or funded ETH or USD based on the provided type. Args: sum_type (str): The sum to lookup. Defaults to: collected. network (str): The network to query results for. Defaults to: mainnet. bounties (dashboard.models.BountyQuerySet): Override the BountyQuerySet this function processes. Defaults to: None. currency (str): The currency to get sum in. Either ETH or USD Returns: float: The total sum of all ETH or USD of the provided type. get_all_tokens_sum Profile.get_all_tokens_sum(self, sum_type='collected', network='mainnet', bounties=None) Get the sum of collected or funded tokens based on the provided type. Args: sum_type (str): The sum to lookup. Defaults to: collected. network (str): The network to query results for. Defaults to: mainnet. bounties (dashboard.models.BountyQuerySet): Override the BountyQuerySet this function processes. Defaults to: None. Returns: query: Grouped query by token_name and sum all token value get_who_works_with Profile.get_who_works_with(self, work_type='collected', network='mainnet', bounties=None) Get an array of profiles that this user works with. Args: work_type (str): The work type to lookup. Defaults to: collected. network (str): The network to query results for. Defaults to: mainnet. bounties (dashboard.models.BountyQuerySet): Override the BountyQuerySet this function processes. Defaults to: None. Returns: dict: list of the profiles that were worked with (key) and the number of times they occurred get_funded_bounties Profile.get_funded_bounties(self, network='mainnet') Get the bounties that this user has funded Args: network (string): the network to look at. Defaults to: mainnet. Returns: queryset: list of bounties get_various_activities Profile.get_various_activities(self) Get bounty, tip and grant related activities for this profile. Args: network (str): The network to query results for. Defaults to: mainnet. Returns: (dashboard.models.ActivityQuerySet): The query results. to_dict Profile.to_dict(self) Get the dictionary representation with additional data. Attributes: params (dict): The context dictionary to be returned. network (str): The bounty network to operate on. query_kwargs (dict): The kwargs to be passed to all queries throughout the method. bounties (dashboard.models.BountyQuerySet): All bounties referencing this profile. fulfilled_bounties (dashboard.models.BountyQuerySet): All fulfilled bounties for this profile. funded_bounties (dashboard.models.BountyQuerySet): All funded bounties for this profile. orgs_bounties (dashboard.models.BountyQuerySet or None): All bounties belonging to this organization, if applicable. sum_eth_funded (float): The total amount of ETH funded. sum_eth_collected (float): The total amount of ETH collected. Returns: dict: The profile card context. post_login post_login(sender, request, user, **kwargs) Handle actions to take on user login. post_logout post_logout(sender, request, user, **kwargs) Handle actions to take on user logout. UserDirectoryQuerySet UserDirectoryQuerySet(self, model=None, query=None, using=None, hints=None) Define the Profile QuerySet to be used as the objects manager. UserDirectory UserDirectory(self, *args, **kwargs) UserDirectory(profile_id, join_date, github_created_at, first_name, last_name, email, handle, sms_verification, persona, rank_coder, rank_funder, num_hacks_joined, which_hacks_joined, hack_work_starts, hack_work_submits, hack_work_start_orgs, hack_work_submit_orgs, bounty_work_starts, bounty_work_submits, hack_started_feature, hack_started_code_review, hack_started_security, hack_started_design, hack_started_documentation, hack_started_bug, hack_started_other, hack_started_improvement, started_feature, started_code_review, started_security, started_design, started_documentation, started_bug, started_other, started_improvement, submitted_feature, submitted_code_review, submitted_security, submitted_design, submitted_documentation, submitted_bug, submitted_other, submitted_improvement, bounty_earnings, bounty_work_start_orgs, bounty_work_submit_orgs, kudos_sends, kudos_receives, hack_winner_kudos_received, grants_opened, grant_contributed, grant_contributions, grant_contribution_amount, num_actions, action_points, avg_points_per_action, last_action_on, keywords, activity_level, reliability, average_rating, longest_streak, earnings_count, follower_count, following_count, num_repeated_relationships, verification_status) action_points A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activity_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. average_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avg_points_per_action A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_earnings A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_work_start_orgs A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_work_starts A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_work_submit_orgs A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_work_submits A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. earnings_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. first_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. follower_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. following_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_created_at A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. grant_contributed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. grant_contribution_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. grant_contributions A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. grants_opened A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_bug A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_code_review A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_design A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_documentation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_feature A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_improvement A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_other A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_started_security A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_winner_kudos_received A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_work_start_orgs A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_work_starts A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_work_submit_orgs A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hack_work_submits A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. join_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_receives A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_sends A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_action_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. longest_streak A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_actions A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_hacks_joined A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_repeated_relationships A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. persona A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank_coder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank_funder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reliability A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sms_verification A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_bug A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_code_review A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_design A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_documentation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_feature A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_improvement A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_other A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. started_security A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_bug A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_code_review A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_design A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_documentation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_feature A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_improvement A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_other A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submitted_security A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. verification_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. which_hacks_joined A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileSerializer ProfileSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Profile object. Meta ProfileSerializer.Meta(self, /, *args, **kwargs) Define the profile serializer metadata. to_representation ProfileSerializer.to_representation(self, instance) Provide the serialized representation of the Profile. Args: instance (Profile): The Profile object to be serialized. Returns: dict: The serialized Profile. normalize_tip_usernames normalize_tip_usernames(sender, instance, **kwargs) Handle pre-save signals from Tips to normalize Github usernames. UserAction UserAction(self, *args, **kwargs) Records Actions that a user has taken . action A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ACTION_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. _method UserAction._method(self, *, field=<django.db.models.fields.CharField: action>) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. location_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. utm A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. point_value UserAction.point_value(self) Returns: int the Point value of this user action CoinRedemption CoinRedemption(self, *args, **kwargs) Define the coin redemption schema. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coinredemptionrequest Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. contract_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. expires_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=True, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=False, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. shortcode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_checksum_address to_checksum_address(sender, instance, **kwargs) Handle pre-save signals from CoinRemptions to normalize the contract address. CoinRedemptionRequest CoinRedemptionRequest(self, *args, **kwargs) Define the coin redemption request schema. coin_redemption Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. coin_redemption_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sent_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txaddress A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Tool Tool(self, *args, **kwargs) Define the Tool schema. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. CAT_ADVANCED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_ALPHA str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_BASIC str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_BUILD str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_COMING_SOON str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_COMMUNITY str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_FOR_FUN str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_RETIRED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. category A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GAS_TOOLS str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. _method Tool._method(self, *, field=<django.db.models.fields.CharField: category>) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. img A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link_copy A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. new A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. stat_graph A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TOOL_CATEGORIES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. url_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. votes Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. ToolVote ToolVote(self, *args, **kwargs) Define the vote placed on a tool. _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tool_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. value A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TokenApproval TokenApproval(self, *args, **kwargs) A token approval. approved_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. approved_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coinbase A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SearchHistory SearchHistory(self, *args, **kwargs) Define the structure of a Search History object. data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. search_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BlockedUser BlockedUser(self, *args, **kwargs) Define the structure of the BlockedUser. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BlockedIP BlockedIP(self, *args, **kwargs) Define the structure of the BlockedIP. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. addr A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BlockedIP._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BlockedIP._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BlockedIP._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BlockedIP._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Sponsor Sponsor(self, *args, **kwargs) Defines the Hackthon Sponsor _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathonevent_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathonsponsor_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. logo_svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tribe Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tribe_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonEventQuerySet HackathonEventQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for HackathonEvents. current HackathonEventQuerySet.current(self) Filter results down to current events only. upcoming HackathonEventQuerySet.upcoming(self) Filter results down to upcoming events only. finished HackathonEventQuerySet.finished(self) Filter results down to upcoming events only. HackathonEvent HackathonEvent(self, *args, **kwargs) Defines the HackathonEvent model. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. answer_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. background_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. banner Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. border_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounties Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. calendar_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. default_channels A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. display_showcase A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. end_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: end_date>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: start_date>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: end_date>, is_next=False, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: start_date>, is_next=False, **kwargs) hackathon_summary A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hackathonregistration_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathonsponsor_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. identifier A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. logo_svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. poll_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. project_event Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quest_link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. short_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. show_results A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. showcase A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slug A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor_profiles Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. sponsors Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. start_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. total_prize A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. unblocks_quest Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. use_circle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. visible A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. workshop_event Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. get_absolute_url HackathonEvent.get_absolute_url(self) Get the absolute URL for the HackathonEvent. Returns: str: The absolute URL for the HackathonEvent. get_onboard_url HackathonEvent.get_onboard_url(self) Get the absolute URL for the HackathonEvent. Returns: str: The absolute URL for the HackathonEvent. save HackathonEvent.save(self, *args, **kwargs) Define custom handling for saving HackathonEvent. HackathonSponsor HackathonSponsor(self, *args, **kwargs) HackathonSponsor(id, created_on, modified_on, hackathon, sponsor, sponsor_type, chat_channel_id) chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.CharField: sponsor_type>) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sponsor_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SPONSOR_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonProject HackathonProject(self, *args, **kwargs) HackathonProject(id, created_on, modified_on, name, hackathon, logo, work_url, summary, bounty, badge, status, message, looking_members, chat_channel_id, winner, extra, categories, tech_stack, grant_obj) badge A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. categories A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. extra A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.CharField: status>) grant_obj Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_obj_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hackathon_projects Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. looking_members A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. message A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profiles Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. PROJECT_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. submissions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. summary A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tech_stack A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. winner A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. work_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. FeedbackEntry FeedbackEntry(self, *args, **kwargs) FeedbackEntry(id, created_on, modified_on, bounty, sender_profile, receiver_profile, rating, satisfaction_rating, communication_rating, speed_rating, code_quality_rating, recommendation_rating, comment, feedbackType, private) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. code_quality_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. communication_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. feedbackType A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. private A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receiver_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. receiver_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. recommendation_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. satisfaction_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. speed_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. visible_to FeedbackEntry.visible_to(self, user) Whether this user can see the feedback ornot Coupon Coupon(self, *args, **kwargs) Coupon(id, created_on, modified_on, code, fee_percentage, expiry_date) code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coupon Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. expiry_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_percentage A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateField: expiry_date>, is_next=True, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateField: expiry_date>, is_next=False, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileView ProfileView(self, *args, **kwargs) Records profileviews . _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. target Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. target_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. viewer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. viewer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Earning Earning(self, *args, **kwargs) Records Earning - the generic object for all earnings on the platform . from_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. from_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) history Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. org_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. org_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source Provide a generic many-to-one relation through the content_type and object_id fields. This class also doubles as an accessor to the related object (similar to ForwardManyToOneDescriptor) by adding itself as a model attribute. source_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source_type Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. source_type_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. success A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. to_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_value A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_usd A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PortfolioItem PortfolioItem(self, *args, **kwargs) Define the structure of PortfolioItem object. _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileStatHistory ProfileStatHistory(self, *args, **kwargs) ProfileStatHistory - generalizable model for tracking history of a profiles info _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TribeMember TribeMember(self, *args, **kwargs) TribeMember(id, created_on, modified_on, profile, org, leader, title, status, why) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.CharField: status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. leader A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. MEMBER_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. org Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. org_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. why A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Poll Poll(self, *args, **kwargs) Poll(id, created_on, modified_on, title, active) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathon Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PollMedia PollMedia(self, *args, **kwargs) PollMedia(id, created_on, modified_on, name, image) _method PollMedia._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method PollMedia._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method PollMedia._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method PollMedia._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. image Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. Question Question(self, *args, **kwargs) Question(id, created_on, modified_on, hook, poll, question_type, text, order, header, mandatory, minimum_character_count) answer_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Question._method(self, *, field=<django.db.models.fields.CharField: hook>) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.CharField: question_type>) header Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. header_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hook A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mandatory A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. minimum_character_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. option_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. order A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. poll Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. poll_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TYPE_HOOKS Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. TYPE_QUESTIONS Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. Option Option(self, *args, **kwargs) Option(id, created_on, modified_on, question, text) answer_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. question_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Answer Answer(self, *args, **kwargs) Answer(id, created_on, modified_on, user, question, open_response, choice, checked, hackathon) checked A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. choice Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. choice_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. open_response A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. question_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Investigation Investigation(self, *args, **kwargs) Investigation(id, created_on, modified_on, profile, key, description) description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Investigation._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Investigation._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Investigation._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Investigation._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ObjectView ObjectView(self, *args, **kwargs) Records object views . _method ObjectView._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ObjectView._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ObjectView._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ObjectView._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. target Provide a generic many-to-one relation through the content_type and object_id fields. This class also doubles as an accessor to the related object (similar to ForwardManyToOneDescriptor) by adding itself as a model attribute. target_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. target_type Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. target_type_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. view_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. viewer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. viewer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileVerification ProfileVerification(self, *args, **kwargs) ProfileVerification(id, created_on, modified_on, profile, caller_type, carrier_error_code, mobile_network_code, mobile_country_code, carrier_name, carrier_type, country_code, phone_number, delivery_method, validation_passed, validation_comment, success) caller_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. carrier_error_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. carrier_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. carrier_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. country_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. delivery_method A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ProfileVerification._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ProfileVerification._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ProfileVerification._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ProfileVerification._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mobile_country_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mobile_network_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. phone_number A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. success A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. validation_comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. validation_passed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonWorkshop HackathonWorkshop(self, *args, **kwargs) HackathonWorkshop(id, created_on, modified_on, name, start_date, cover, hackathon, speaker, url, visible) cover Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. _method HackathonWorkshop._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonWorkshop._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonWorkshop._method(self, *, field=<django.db.models.fields.DateTimeField: start_date>, is_next=True, **kwargs) _method HackathonWorkshop._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonWorkshop._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonWorkshop._method(self, *, field=<django.db.models.fields.DateTimeField: start_date>, is_next=False, **kwargs) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. speaker Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. speaker_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. start_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. visible A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TransactionHistory TransactionHistory(self, *args, **kwargs) TransactionHistory(id, created_on, modified_on, earning, txid, status, payload, network, captured_at) captured_at A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. earning Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. earning_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TransactionHistory._method(self, *, field=<django.db.models.fields.DateTimeField: captured_at>, is_next=True, **kwargs) _method TransactionHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TransactionHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TransactionHistory._method(self, *, field=<django.db.models.fields.DateTimeField: captured_at>, is_next=False, **kwargs) _method TransactionHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TransactionHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. MediaFile MediaFile(self, *args, **kwargs) MediaFile(id, created_on, modified_on, filename, file) file The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) filename A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method MediaFile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method MediaFile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method MediaFile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method MediaFile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"dashboard/notifications/","text":"dashboard.notifications Handle dashboard related notifications. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . notify_of_lowball_bounty notify_of_lowball_bounty(bounty) Send an email to founders@gitcoin.co with the lowball bounty info Args: bounty (dashboard.models.Bounty): The lowball bounty object github_org_to_twitter_tags github_org_to_twitter_tags(github_org) Build a string of github organization twitter tags. Args: github_org (str): The Github organization. Returns: str: The concatenated string of twitter tags. build_message_for_integration build_message_for_integration(bounty, event_name) Build message to be posted to integrated service (e.g. slack). Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. Returns: str: Message to post to slack. maybe_market_tip_to_email maybe_market_tip_to_email(tip, emails) Send an email for the specified Tip. Args: tip (dashboard.models.Tip): The Tip to be marketed. emails (list of str): The list of emails to notify. Returns: bool: Whether or not the email notification was sent successfully. maybe_market_tip_to_slack maybe_market_tip_to_slack(tip, event_name) Send a Slack message for the specified Tip. Args: tip (dashboard.models.Tip): The Tip to be marketed. event_name (str): The name of the event. Returns: bool: Whether or not the Slack notification was sent successfully. maybe_market_kudos_to_email maybe_market_kudos_to_email(kudos_transfer) Send an email for the specified Kudos. The general flow of this function: Decide if we are sending it Generate subject Render email Send email Do translation Args: kudos_transfer (kudos.models.KudosTransfer): The Kudos Email object to be marketed. Returns: bool: Whether or not the email notification was sent successfully. build_github_notification build_github_notification(bounty, event_name, profile_pairs=None) Build a Github comment for the specified Bounty. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. profile_pairs (list of tuples): The list of username and profile page URL tuple pairs. Returns: bool: Whether or not the Github comment was posted successfully. maybe_market_to_github maybe_market_to_github(bounty, event_name, profile_pairs=None) Post a Github comment for the specified Bounty. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. profile_pairs (list of tuples): The list of username and profile page URL tuple pairs. Returns: bool: Whether or not the Github comment was posted successfully. amount_usdt_open_work amount_usdt_open_work() Get the amount in USDT of all current open and submitted work. Returns: float: The sum of all USDT values rounded to the nearest 2 decimals. open_bounties open_bounties() Get all current open and submitted work. Returns: QuerySet: The mainnet Bounty objects which are of open and submitted work statuses. maybe_market_tip_to_github maybe_market_tip_to_github(tip) Post a Github comment for the specified Tip. Args: tip (dashboard.models.Tip): The Tip to be marketed. Returns: bool: Whether or not the Github comment was posted successfully. maybe_market_kudos_to_github maybe_market_kudos_to_github(kt) Post a Github comment for the specified Kudos. Args: kt (kudos.models.KudosTransfer): The KudosTransfer to be marketed. Returns: bool: Whether or not the Github comment was posted successfully. append_snooze_copy append_snooze_copy(bounty) Build the snooze copy for the associated Bounty. Args: bounty (dashboard.Bounty): The Bounty to create snooze copy for. Returns: str: The snooze copy for the provided bounty.","title":"Notifications"},{"location":"dashboard/router/","text":"dashboard.router Define dashboard specific DRF API routes. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BountyFulfillmentSerializer BountyFulfillmentSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the BountyFulfillment object. Meta BountyFulfillmentSerializer.Meta(self, /, *args, **kwargs) Define the bounty fulfillment serializer metadata. HackathonEventSerializer HackathonEventSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the hackathon object. Meta HackathonEventSerializer.Meta(self, /, *args, **kwargs) Define the hackathon serializer metadata. KudosSerializer KudosSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Kudos object. Meta KudosSerializer.Meta(self, /, *args, **kwargs) Define the kudos serializer metadata. KudosTokenSerializer KudosTokenSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Kudos object. Meta KudosTokenSerializer.Meta(self, /, *args, **kwargs) Define the kudos serializer metadata. ActivitySerializer ActivitySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Activity object. Meta ActivitySerializer.Meta(self, /, *args, **kwargs) Define the activity serializer metadata. InterestSerializer InterestSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Interest object. Meta InterestSerializer.Meta(self, /, *args, **kwargs) Define the Interest serializer metadata. BountySerializer BountySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Bounty object. Meta BountySerializer.Meta(self, /, *args, **kwargs) Define the bounty serializer metadata. create BountySerializer.create(self, validated_data) Handle creation of m2m relationships and other custom operations. update BountySerializer.update(self, validated_data) Handle updating of m2m relationships and other custom operations. HackathonProjectSerializer HackathonProjectSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta HackathonProjectSerializer.Meta(self, /, *args, **kwargs) HackathonProjectsPagination HackathonProjectsPagination(self, /, *args, **kwargs) page_size int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 HackathonProjectsViewSet HackathonProjectsViewSet(self, **kwargs) queryset Represent a lazy database lookup for a set of objects. HackathonProjectSerializer HackathonProjectsViewSet.HackathonProjectSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) HackathonProjectsPagination HackathonProjectsViewSet.HackathonProjectsPagination(self, /, *args, **kwargs) BountySerializerSlim BountySerializerSlim(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta BountySerializerSlim.Meta(self, /, *args, **kwargs) Define the bounty serializer metadata. BountySerializerCheckIn BountySerializerCheckIn(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta BountySerializerCheckIn.Meta(self, /, *args, **kwargs) BountiesViewSet BountiesViewSet(self, **kwargs) Handle Bounties view behavior. filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Handle the manager queryset for Bounties. BountySerializer BountiesViewSet.BountySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Bounty object. get_queryset BountiesViewSet.get_queryset(self) Get the queryset for Bounty. Returns: QuerySet: The Bounty queryset. BountiesViewSetSlim BountiesViewSetSlim(self, **kwargs) queryset Handle the manager queryset for Bounties. BountySerializerSlim BountiesViewSetSlim.BountySerializerSlim(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) BountiesViewSetCheckIn BountiesViewSetCheckIn(self, **kwargs) queryset Handle the manager queryset for Bounties. BountySerializerCheckIn BountiesViewSetCheckIn.BountySerializerCheckIn(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) BountyViewSet BountyViewSet(self, **kwargs) API response for an individual bounty by url filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Handle the manager queryset for Bounties. BountySerializer BountyViewSet.BountySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Bounty object. get_queryset BountyViewSet.get_queryset(self) Constructs queryset for an individual bounty Returns: QuerySet: The Bounty queryset. TribesTeamSerializer TribesTeamSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta TribesTeamSerializer.Meta(self, /, *args, **kwargs) TribesSerializer TribesSerializer(self, *args, **kwargs) Handle serializing the Profile object. Meta TribesSerializer.Meta(self, /, *args, **kwargs)","title":"API Router"},{"location":"dashboard/signals/","text":"dashboard.signals Handle dashboard related signals. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . m2m_changed_interested m2m_changed_interested(sender, instance, action, reverse, model, **kwargs) Handle changes to Bounty interests. changed_fulfillments changed_fulfillments(sender, instance, action, reverse, model, **kwargs) Handle changes to Bounty fulfillments.","title":"Signals"},{"location":"dashboard/templatetags/","text":"dashboard.templatetags.add_url_schema Define the add_url_schema template tag to allow cleaning up url in templates. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . add_url_schema add_url_schema(url) Clean the provided URL to include the scheme (http) if no scheme is present. Args: url (str): The URL to be cleaned. Usage: {{ url|clean_url }} Returns: str: The URL with the scheme attached.","title":"Template Tags"},{"location":"dashboard/tokens/","text":"dashboard.tokens Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Tokens"},{"location":"dashboard/utils/","text":"dashboard.utils Define Dashboard related utilities and miscellaneous logic. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . humanize_event_name humanize_event_name(name) Humanize an event name. Args: name (str): The event name Returns: str: The humanized representation. create_user_action create_user_action(user, action_type, request=None, metadata=None) Create a UserAction for the specified action type. Args: user (User): The User object. action_type (str): The type of action to record. request (Request): The request object. Defaults to: None. metadata (dict): Any accompanying metadata to be added. Defaults to: {}. Returns: bool: Whether or not the UserAction was created successfully. get_ipfs get_ipfs(host=None, port=5001) Establish a connection to IPFS. Args: host (str): The IPFS host to connect to. Defaults to environment variable: IPFS_HOST. The host name should be of the form 'ipfs.infura.io' and not include 'https://'. port (int): The IPFS port to connect to. Defaults to environment variable: env IPFS_API_PORT. Raises: CommunicationError: The exception is raised when there is a communication error with IPFS. Returns: ipfshttpclient.client.Client: The IPFS connection client. get_web3 get_web3(network, sockets=False, chain='std') Get a Web3 session for the provided network. Attributes: network (str): The network to establish a session with. Raises: UnsupportedNetworkException: The exception is raised if the method is passed an invalid network. Returns: web3.main.Web3: A web3 instance for the provided network. get_graphql_client get_graphql_client(uri) Get a graphQL client attached to the given uri Returns: GraphQLClient: an established GraphQLClient associated with the given uri get_graphql_result get_graphql_result(uri, query) Get result of the query from the uri Returns: dict: result of the graphQL query get_bounty_invite_url get_bounty_invite_url(inviter, bounty_id) Returns a unique url for each bounty and one who is inviting Returns: A unique string for each bounty get_bounty_from_invite_url get_bounty_from_invite_url(invite_url) Returns a unique url for each bounty and one who is inviting Returns: A unique string for each bounty web3_process_bounty web3_process_bounty(bounty_data) Process web3 bounty data by creating new or updated Bounty objects. build_profile_pairs build_profile_pairs(bounty) Build the profile pairs list of tuples for ingestion by notifications. Args: bounty (dashboard.models.Bounty): The Bounty to build profile pairs for. Returns: list of tuples: The list of profile pair tuples. get_ordinal_repr get_ordinal_repr(num) Handle cardinal to ordinal representation of numeric values. Args: num (int): The integer to be converted from cardinal to ordinal numerals. Returns: str: The ordinal representation of the provided integer. record_user_action_on_interest record_user_action_on_interest(interest, event_name, last_heard_from_user_days) Record User actions and activity for the associated Interest. get_context get_context(ref_object=None, github_username='', user=None, confirm_time_minutes_target=4, confirm_time_slow=120, confirm_time_avg=15, confirm_time_fast=1, active='', title='', update=None) Get the context dictionary for use in view. clean_bounty_url clean_bounty_url(url) Clean the Bounty URL of unsavory characters. The primary utility of this method is to drop issuecomment blocks from Github issue URLs copy/pasted via comments. Args: url (str): The Bounty VC URL. TODO: * Deprecate this in favor of Django forms. Returns: str: The cleaned Bounty URL. profile_helper profile_helper(handle, suppress_profile_hidden_exception=False, current_user=None, disable_cache=False, full_profile=False) Define the profile helper. Args: handle (str): The profile handle. Raises: DoesNotExist: The exception is raised if a Profile isn't found matching the handle. Remediation is attempted by syncing the profile data. MultipleObjectsReturned: The exception is raised if multiple Profiles are found. The latest Profile will be returned. Returns: dashboard.models.Profile: The Profile associated with the provided handle.","title":"Utilities"},{"location":"dashboard/views/","text":"dashboard.gas_views Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . dashboard.tip_views Define the tip related views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . send_tip send_tip(request) Handle the first stage of sending a tip. receive_tip_v3 receive_tip_v3(request, key, txid, network) Handle the receiving of a tip (the POST). Returns: TemplateResponse: the UI with the tip confirmed. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. send_tip_4 send_tip_4(request) Handle the fourth stage of sending a tip (the POST). Returns: JsonResponse: response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. tipee_address tipee_address(request, handle) Return the address, if any, that someone would like to be tipped directly at. Returns: list: The list of tipee address strings. send_tip_3 send_tip_3(request) Handle the third stage of sending a tip (the POST). Returns: JsonResponse: response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. send_tip_2 send_tip_2(request) Handle the second stage of sending a tip. TODO: * Convert this view-based logic to a django form. Returns: JsonResponse: If submitting tip, return response with success state. TemplateResponse: Render the submission form. dashboard.views Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . record_bounty_activity record_bounty_activity(bounty, user, event_name, interest=None, fulfillment=None) Creates Activity object. Args: bounty (dashboard.models.Bounty): Bounty user (string): User name event_name (string): Event name interest (dashboard.models.Interest): Interest Raises: None Returns: None gh_login gh_login(request) Attempt to redirect the user to Github for authentication. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. new_interest new_interest(request, bounty_id) Claim Work for a Bounty. :request method: POST Args: bounty_id (int): ID of the Bounty. Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. rating_modal rating_modal(request, bounty_id, username) Rating modal. Args: pk (int): The primary key of the bounty to be rated. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The rate bounty view. rating_capture rating_capture(request) Rating capture. Args: pk (int): The primary key of the bounty to be rated. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The rate bounty capture modal. unrated_bounties unrated_bounties(request) Rating capture. Args: pk (int): The primary key of the bounty to be rated. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The rate bounty capture modal. remove_interest remove_interest(request, bounty_id) Unclaim work from the Bounty. Can only be called by someone who has started work :request method: POST post_id (int): ID of the Bounty. Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. extend_expiration extend_expiration(request, bounty_id) Extend expiration of the Bounty. Can only be called by funder or staff of the bounty. :request method: POST post_id (int): ID of the Bounty. Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. cancel_reason cancel_reason(request) Add Cancellation Reason for Bounty during Cancellation request method: POST Params: pk (int): ID of the Bounty. canceled_bounty_reason (string): STRING with cancel reason csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. uninterested uninterested(request, bounty_id, profile_id) Remove party from given bounty Can only be called by the bounty funder :request method: GET Args: bounty_id (int): ID of the Bounty profile_id (int): ID of the interested profile Params: slashed (str): if the user will be slashed or not Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. onboard onboard(request, flow=None) Handle displaying the first time user experience flow. users_directory users_directory(request) Handle displaying users directory page. users_directory_elastic users_directory_elastic(request) Handle displaying users directory page. users_fetch users_fetch(request) Handle displaying users. get_user_bounties get_user_bounties(request) Get user open bounties. Args: request (int): get user by id or use authenticated. Variables: Returns: json: array of bounties. dashboard dashboard(request) Handle displaying the dashboard. accept_bounty accept_bounty(request) Process the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. invoice invoice(request) invoice view. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The invoice view. social_contribution_modal social_contribution_modal(request) Social Contributuion to the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. bulk_invite bulk_invite(request) Invite users with matching skills to a bounty. Args: bounty_id (int): The primary key of the bounty to be accepted. skills (string): Comma separated list of matching keywords. Raises: Http403: The exception is raised if the user is not authenticated or the args are missing. Http401: The exception is raised if the user is not a staff member. Returns: Http200: Json response with {'status': 200, 'msg': 'email_sent'}. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. social_contribution_email social_contribution_email(request) Social Contribution Email Returns: JsonResponse: Success in sending email. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. payout_bounty payout_bounty(request) Payout the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. bulk_payout_bounty bulk_payout_bounty(request) Payout the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. fulfill_bounty fulfill_bounty(request) Fulfill a bounty. Parameters: pk (int): The primary key of the Bounty. standard_bounties_id (int): The standard bounties ID of the Bounty. network (str): The network of the Bounty. githubUsername (str): The Github Username of the referenced user. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The fulfill bounty view. increase_bounty increase_bounty(request) Increase a bounty as the funder. Args: pk (int): The primary key of the bounty to be increased. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The increase bounty view. cancel_bounty cancel_bounty(request) Kill an expired bounty. Args: pk (int): The primary key of the bounty to be cancelled. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The cancel bounty view. bounty_invite_url bounty_invite_url(request, invitecode) Decode the bounty details and redirect to correct bounty Args: invitecode (str): Unique invite code with bounty details and handle Returns: django.template.response.TemplateResponse: The Bounty details template response. bounty_details bounty_details(request, ghuser='', ghrepo='', ghissue=0, stdbounties_id=None) Display the bounty details. Args: ghuser (str): The Github user. Defaults to an empty string. ghrepo (str): The Github repository. Defaults to an empty string. ghissue (int): The Github issue number. Defaults to: 0. Raises: Exception: The exception is raised for any exceptions in the main query block. Returns: django.template.response.TemplateResponse: The Bounty details template response. quickstart quickstart(request) Display Quickstart Guide. load_banners load_banners(request) Load profile banners profile_details profile_details(request, handle) Display profile keywords. Args: handle (str): The profile handle. user_card user_card(request, handle) Display profile keywords. Args: handle (str): The profile handle. profile_keywords profile_keywords(request, handle) Display profile details. Args: handle (str): The profile handle. profile_quests profile_quests(request, handle) Display profile quest points details. Args: handle (str): The profile handle. profile_grants profile_grants(request, handle) Display profile grant contribution details. Args: handle (str): The profile handle. profile_activity profile_activity(request, handle) Display profile activity details. Args: handle (str): The profile handle. profile_spent profile_spent(request, handle) Display profile spent details. Args: handle (str): The profile handle. profile_ratings profile_ratings(request, handle, attr) Display profile ratings details. Args: handle (str): The profile handle. profile_earnings profile_earnings(request, handle, direction='to') Display profile earnings details. Args: handle (str): The profile handle. profile_viewers profile_viewers(request, handle) Display profile viewers details. Args: handle (str): The profile handle. profile_job_opportunity profile_job_opportunity(request, handle) Save profile job opportunity. Args: handle (str): The profile handle. profile_settings profile_settings(request) Toggle profile automatic backup flag. Args: handle (str): The profile handle. profile_backup profile_backup(request) Read the profile backup data. Args: handle (str): The profile handle. profile_tax_settings profile_tax_settings(request, handle) Save profile tax info (country location and address). Args: handle (str): The profile handle. profile_filter_activities profile_filter_activities(activities, activity_name, activity_tabs) A helper function to filter a ActivityQuerySet. Args: activities (ActivityQuerySet): The ActivityQuerySet. activity_name (str): The activity_type to filter. Returns: ActivityQuerySet: The filtered results. profile profile(request, handle, tab=None) Display profile details. Args: handle (str): The profile handle. Variables: context (dict): The template context to be used for template rendering. profile (dashboard.models.Profile): The Profile object to be used. status (int): The status code of the response. Returns: TemplateResponse: The profile templated view. get_quickstart_video get_quickstart_video(request) Show quickstart video. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. extend_issue_deadline extend_issue_deadline(request) Show quickstart video. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. sync_web3 sync_web3(request) Sync up web3 with the database. This function has a few different uses. It is typically called from the front end using the javascript sync_web3 function. The issueURL is passed in first, followed optionally by a bountydetails argument. Returns: JsonResponse: The JSON response following the web3 sync. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. new_bounty new_bounty(request) Create a new bounty. new_hackathon_bounty new_hackathon_bounty(request, hackathon='') Create a new hackathon bounty. dashboard_sponsors dashboard_sponsors(request, hackathon='', panel='prizes') Handle rendering of HackathonEvents. Reuses the dashboard template. hackathon hackathon(request, hackathon='', panel='prizes') Handle rendering of HackathonEvents. Reuses the dashboard template. get_hackathons get_hackathons(request) Handle rendering all Hackathons. board board(request) Handle the board view. funder_dashboard_bounty_info funder_dashboard_bounty_info(request, bounty_id) Per-bounty JSON data for the user dashboard funder_dashboard funder_dashboard(request, bounty_type) JSON data for the funder dashboard contributor_dashboard contributor_dashboard(request, bounty_type) JSON data for the contributor dashboard change_user_profile_banner change_user_profile_banner(request) Handle Profile Banner Uploads create_bounty_v1 create_bounty_v1(request) ETC-TODO - evaluate validity of duplicate / redundant data in models - wire in email (invite + successful creation) csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. cancel_bounty_v1 cancel_bounty_v1(request) ETC-TODO - wire in email (invite + successful cancellation) csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. fulfill_bounty_v1 fulfill_bounty_v1(request) ETC-TODO - wire in email (invite + successful fulfillment) - evalute BountyFulfillment unused fields csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. payout_bounty_v1 payout_bounty_v1(request, fulfillment_id) ETC-TODO - wire in email (invite + successful payout) { amount: , bounty_owner_address : , token_name : } csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. reverse_proxy_rpc_v1 reverse_proxy_rpc_v1(request, tenant) Proxy payout transaction to external node to bypass CORS restriction on browser. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. close_bounty_v1 close_bounty_v1(request, bounty_id) ETC-TODO - wire in email csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"dataviz/admin/","text":"dataviz.admin Define the data visualization related administration layout. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"dataviz/models/","text":"dataviz.models Define data visualization related models. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . DataPayload DataPayload(self, *args, **kwargs) Define the structure of an ExternalBounty. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. report A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"dataviz/views/","text":"dataviz.d3_views Define data visualization related D3 views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . data_viz_helper_get_data_responses data_viz_helper_get_data_responses(request, visual_type) Handle visualization of the request response data based on type. Args: visual_type (str): The visualization type. TODO: * Reduce complexity of this method to pass McCabe complexity check. Returns: dict: The JSON representation of the requested visual type data. data_viz_helper_merge_json_trees data_viz_helper_merge_json_trees(output) Handle merging the visualization data trees. Args: output (dict): The output data to be merged. Returns: dict: The merged data dictionary. data_viz_helper_get_json_output data_viz_helper_get_json_output(key, value, depth=0) Handle data visualization and build the JSON output. Args: key (str): The key to be formatted and parsed. value (float): The data value. depth (int): The depth of keys to parse. Defaults to: 0. Returns: dict: The JSON representation of the provided data. viz_graph viz_graph(request, _type, template='graph') Render a graph visualization of the Gitcoin Network. TODO: * Reduce the number of local variables from 16 to 15. Returns: JsonResponse: If data param provided, return a JSON representation of data to be graphed. TemplateResponse: If data param not provided, return the populated data visualization template. mesh_network_viz mesh_network_viz(request) Render a Mesh Network visualization Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated mesh data visualization template. viz_scatterplot_helper viz_scatterplot_helper(request, key='hourly_rate', template='dataviz/scatterplot.html', hide_usernames=False) Render a scatterplot visualization. Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated scatterplot data visualization template. dataviz.views Define data visualization related administration views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Views"},{"location":"economy/admin/","text":"economy.admin Define Economy related django administration sections. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TokenAdmin TokenAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TXUpdateAdmin TXUpdateAdmin(self, model, admin_site) Handle displaying conversion rates in the django admin. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ConvRateAdmin ConvRateAdmin(self, model, admin_site) Handle displaying conversion rates in the django admin. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"economy/commands/","text":"economy.management.commands.get_prices Define the management command to pull new price data for tokens. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . etherdelta etherdelta() Handle pulling market data from Etherdelta. coingecko coingecko(source, tokens) Handle pulling market data from Coingecko. cryptocompare cryptocompare() Handle pulling market data from CryptoCompare. Updates ConversionRates only if data not available. uniswap uniswap() Hangle pulling market data from Uniswap using its subgraph node on mainnet. Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) Define the management command to update currency conversion rates. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. handle Command.handle(self, *args, **options) Get the latest currency rates. economy.management.commands.refresh_bounties Define the management command to refresh bounty data. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) Define the management command to refresh bounties. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. add_arguments Command.add_arguments(self, parser) Add argument handling to the refresh command. handle Command.handle(self, *args, **options) Refresh all bounties. Attributes: all_bounties (QuerySet of Bounty): The queryset of all Bounties. fetch_remote (bool): Whether or not to fetch remote bounties. Defaults to: False unless user passes the remote option.","title":"Commands"},{"location":"economy/models/","text":"economy.models Define economy related models. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_time get_time() Get the local time. get_0_time get_0_time() Get the local time. SuperModel SuperModel(self, *args, **kwargs) Define the base abstract model. created_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) modified_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Meta SuperModel.Meta(self, /, *args, **kwargs) Define the model metadata. save SuperModel.save(self, update=True, *args, **kwargs) Override the SuperModel save to optionally handle modified_on logic. to_standard_dict SuperModel.to_standard_dict(self, fields=None, exclude=None, properties=None) Define the standard to dict representation of the object. Args: fields (list): The list of fields to include. If not provided, include all fields. If not provided, all fields are included. Defaults to: None. exclude (list): The list of fields to exclude. If not provided, no fields are excluded. Default to: None. Returns: dict: The dictionary representation of the object. ConversionRate ConversionRate(self, *args, **kwargs) Define the conversion rate model. from_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_currency A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: timestamp>, is_next=True, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: timestamp>, is_next=False, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.CharField: source>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SOURCE_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. timestamp A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_currency A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reverse_conversion_rate reverse_conversion_rate(sender, instance, **kwargs) Handle the reverse conversion rate signal during post-save. TXUpdate TXUpdate(self, *args, **kwargs) Define the TXUpdate model. body A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TXUpdate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TXUpdate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TXUpdate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TXUpdate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Token Token(self, *args, **kwargs) Define the Token model. address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. approved A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. chain_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. conversion_rate_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. CONVERSION_RATE_SOURCE Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. conversion_rate_source A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. decimals A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Token._method(self, *, field=<django.db.models.fields.CharField: conversion_rate_source>) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. priority A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. symbol A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"economy/utils/","text":"economy.utils Define utilities and generic logic for the economy application. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . ConversionRateNotFoundError ConversionRateNotFoundError(self, /, *args, **kwargs) Thrown if ConversionRate not found. convert_token_to_usdt convert_token_to_usdt(from_token, timestamp=None) Convert the token to USDT. Args: from_token (str): The token identifier. Returns: float: The current rate of the provided token to USDT. etherscan_link etherscan_link(txid) Build the Etherscan URL. Args: txid (str): The transaction ID. Returns: str: The Etherscan TX URL. watch_txn watch_txn(tx_id) Watches the Ethereum txn for updates (mainly being dropped/replaced) Args: txid (str): The transaction ID. Returns: str: The Etherscan TX URL.","title":"Utilities"},{"location":"gas/admin/","text":"gas.admin GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"gas/models/","text":"gas.models Define the Gas models. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GasProfile GasProfile(self, *args, **kwargs) Define the Gas Profile data model. gas_price A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mean_time_to_confirm_blocks A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mean_time_to_confirm_minutes A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GasGuzzler GasGuzzler(self, *args, **kwargs) Define the Gas Guzzler data model. address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. gas_used A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) ID A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pct_total A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GasAdvisory GasAdvisory(self, *args, **kwargs) Define the Gas Advisory data model. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. active_until A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. body A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: active_until>, is_next=True, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: active_until>, is_next=False, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"gas/utils/","text":"gas.utils","title":"Utilities"},{"location":"git/utils/","text":"git.utils Handle miscellaneous logic and utilities. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . github_connect github_connect(token=None) Authenticate the GH wrapper with Github. Args: token (str): The Github token to authenticate with. Defaults to: None. build_auth_dict build_auth_dict() Collect authentication details. Returns: dict: An authentication dictionary. is_github_token_valid is_github_token_valid(oauth_token=None, last_validated=None) Check whether or not a Github OAuth token is valid. Args: access_token (str): The Github OAuth token. Returns: bool: Whether or not the provided OAuth token is valid. revoke_token revoke_token(oauth_token) Revoke the specified token. reset_token reset_token(oauth_token) Reset the provided token. Args: oauth_token (str): The Github OAuth token. Returns: str: The new Github OAuth token. get_auth_url get_auth_url(redirect_uri='/') Build the Github authorization URL. Args: redirect_uri (str): The redirect URI to be used during authentication. Attributes: github_callback (str): The local path to the Github callback view. redirect_params (dict): The redirect paramaters to URL encode. params (dict): The URL parameters to encode. auth_url (str): The URL encoded Github authentication parameters. Returns: str: The Github authentication URL. get_github_primary_email get_github_primary_email(oauth_token) Get the primary email address associated with the github profile. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: str: The user's primary github email address. get_github_event_emails get_github_event_emails(oauth_token, username) Get all email addresses associated with the github profile. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: list of str: All of the user's associated emails from github. get_github_emails get_github_emails(oauth_token) Get all email addresses associated with the github profile. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: list of str: All of the user's associated email from git. search_user search_user(query, token=None) Search for a user on github. Args: query (str): The query text to match. token (str): The user's Github token to be used to perform the search. Returns: dict: The first matching github user dictionary. search_users search_users(query, token=None) Search for users on github. Args: query (str): The query text to match. token (str): The user's Github token to be used to perform the search. Returns: github.PaginatedList: The pygithub paginator object of all results if many True. get_issue_comments get_issue_comments(owner, repo, issue=None, comment_id=None, page=1) Get the comments from issues on a respository. Args: owner (str): Owner of the repo repo (str): Name of the repo issue (int): Issue number (optional) comment_id (int): Comment ID (optional) page (int): Page number (optional) Returns: github.PaginatedList.PaginatedList / github.IssueComment.IssueComment: The GitHub comments response. get_issues get_issues(owner, repo, page=1, state='open') Get the issues on a respository. get_issue_timeline_events get_issue_timeline_events(owner, repo, issue, page=1) Get the timeline events for a given issue. PLEASE NOTE CURRENT LIMITATION OF 100 EVENTS. Args: owner (str): Owner of the repo repo (str): Name of the repo issue (int): Issue number Returns: github.PaginatedList of githubTimelineEvent: The GitHub timeline response list. get_user get_user(user=None, token=None) Get the github user details. get_notifications get_notifications() Get the Github notifications for Gitcoin Bot. post_issue_comment post_issue_comment(owner, repo, issue_num, comment) Post a comment on an issue. Args: owner (str): Owner of the repo repo (str): Name of the repo issue_num (int): Issue number comment (int): Comment Body Returns: github.IssueComment.IssueComment: The GitHub created comment. patch_issue_comment patch_issue_comment(issue_id, comment_id, owner, repo, comment) Update a comment on an issue via patch. delete_issue_comment delete_issue_comment(issue_id, comment_id, owner, repo) Remove a comment on an issue via delete. post_issue_comment_reaction post_issue_comment_reaction(owner, repo, issue_id, comment_id, content) React to an issue comment. get_url_dict get_url_dict(issue_url) Get the URL dictionary with specific data we care about. Args: issue_url (str): The Github issue URL. Raises: IndexError: The exception is raised if accessing a necessary index fails. Returns: dict: A mapping of details for the specified issue URL. repo_url repo_url(issue_url) Build the repository URL. Args: issue_url (str): The Github issue URL. Returns: str: The repository URL. org_name org_name(issue_url) Get the organization name from an issue URL. Args: issue_url (str): The Github issue URL. Returns: str: The Github organization name. repo_name repo_name(issue_url) Get the repo name from an issue URL. Args: issue_url (str): The Github issue URL. Returns: str: The Github repo name. issue_number issue_number(issue_url) Get the issue_number from an issue URL. Args: issue_url (str): The Github issue URL. Returns: str: The Github issue_number get_current_ratelimit get_current_ratelimit(token=None) Get the current Github API ratelimit for the provided token.","title":"Utilities"},{"location":"gitcoinbot/actions/","text":"gitcoinbot.actions Define the Gitcoin Bot action methods for interacting with the Github API as a Github App. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Bound Bound(self, *args) Validate every bound before call the annotated function. amount_greater_than_zero amount_greater_than_zero(*args, **kwargs) Validate if the specified amount is not negative and greater than zero. no_active_bounty no_active_bounty(owner, repo, issue_id) Instructions to create a bounty. parse_comment_currency parse_comment_currency(comment_text, fallback_currency='ETH') Get the first token defined in comment_text. start_work_text start_work_text(owner, repo, issue_id) Instructions to start work on current bounty. submit_work_text submit_work_text(owner, repo, issue_id) Return the instruction to submit the work associated to the bounty. submit_work_or_new_bounty_text submit_work_or_new_bounty_text(owner, repo, issue_id) Submit work if the bounty exists else show instructions to create one. get_text_from_query_responses get_text_from_query_responses(comment_text, sender) Based on comment_text an assigned response is returned.","title":"Actions"},{"location":"gitcoinbot/admin/","text":"gitcoinbot.admin Define Gitcoin Bot specific models. GitcoinBotResponsesAdmin GitcoinBotResponsesAdmin(self, model, admin_site) Define the Gitcoin Bot response admin model for displaying bot request data. fields Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. list_display Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object.","title":"Admin"},{"location":"gitcoinbot/models/","text":"gitcoinbot.models Define Gitcoin Bot specific models. GitcoinBotResponses GitcoinBotResponses(self, *args, **kwargs) Define the Gitcoin Bot response model for recording bot request data. _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. request A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. response A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"gitcoinbot/views/","text":"gitcoinbot.views Define the Gitcoin Bot views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . payload payload(request) Handle the Github bot payload. Parse request.body bytes from github into json, retrieve relevant info and respond with appropriate message from gitcoinbot actions. Returns: HttpResponse: The confirmation of Github payload acceptance. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"grants/abi/","text":"grants.abi Define the Grant ABI. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"ABI"},{"location":"grants/admin/","text":"grants.admin Define the Grant admin layout. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FlagAdmin FlagAdmin(self, model, admin_site) Define the FlagAdmin administration layout. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. MatchPledgeAdmin MatchPledgeAdmin(self, model, admin_site) Define the MatchPledge administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantCLRCalculationAdmin GrantCLRCalculationAdmin(self, model, admin_site) Define the GrantCLRCalculation administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. CLRMatchAdmin CLRMatchAdmin(self, model, admin_site) Define the CLRMatch administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantAdmin GrantAdmin(self, model, admin_site) Define the Grant administration layout. fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. logo_svg_asset GrantAdmin.logo_svg_asset(self, instance) Define the logo SVG tag to be displayed in the admin. logo_asset GrantAdmin.logo_asset(self, instance) Define the logo image tag to be displayed in the admin. SubscriptionAdmin SubscriptionAdmin(self, model, admin_site) Define the Subscription administration layout. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. contributions_links SubscriptionAdmin.contributions_links(self, instance) Define the logo image tag to be displayed in the admin. ContributionAdmin ContributionAdmin(self, model, admin_site) Define the Contribution administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. PhantomFundingAdmin PhantomFundingAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. CartActivityAdmin CartActivityAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantTypeAdmin GrantTypeAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantTagAdmin GrantTagAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantCLRAdmin GrantCLRAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantCollectionAdmin GrantCollectionAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantBrandingRoutingPolicyAdmin GrantBrandingRoutingPolicyAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantHallOfFameGranteeInline GrantHallOfFameGranteeInline(self, parent_model, admin_site) extra int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantHallOfFameGrantee GrantHallOfFameGranteeInline.GrantHallOfFameGrantee(self, *args, **kwargs) This contains information about one grantee listed in the hall of fame page GrantHallOfFameForm GrantHallOfFameForm(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None) base_fields Dictionary that remembers insertion order declared_fields Dictionary that remembers insertion order Meta GrantHallOfFameForm.Meta(self, /, *args, **kwargs) GrantHallOfFameAdmin GrantHallOfFameAdmin(self, model, admin_site) actions Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. inlines Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantHallOfFameForm GrantHallOfFameAdmin.GrantHallOfFameForm(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None) GrantPayoutAdmin GrantPayoutAdmin(self, model, admin_site) Define the GrantPayout administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"grants/models/","text":"grants.models Define the Grant models. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Models"},{"location":"grants/router/","text":"grants.router GrantCLRPagination GrantCLRPagination(self, /, *args, **kwargs) page_size int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 page_size_query_param str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. GrantsClrViewSet GrantsClrViewSet(self, **kwargs) filterset_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. queryset Represent a lazy database lookup for a set of objects. GrantCLRSerializer GrantsClrViewSet.GrantCLRSerializer(self, *args, **kwargs) Handle metadata of CLR rounds GrantCLRPagination GrantsClrViewSet.GrantCLRPagination(self, /, *args, **kwargs) dispatch GrantsClrViewSet.dispatch(self, request, *args, **kwargs) .dispatch() is pretty much the same as Django's regular dispatch, but with extra hooks for startup, finalize, and exception handling. GrantCollectionPagination GrantCollectionPagination(self, /, *args, **kwargs) page_size int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 page_size_query_param str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. GrantCollectionViewSet GrantCollectionViewSet(self, **kwargs) filterset_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. queryset Handle the manager queryset for Collections. GrantCollectionPagination GrantCollectionViewSet.GrantCollectionPagination(self, /, *args, **kwargs) GrantCollectionSerializer GrantCollectionViewSet.GrantCollectionSerializer(self, *args, **kwargs) Handle metadata of CLR rounds GrantTypeViewSet GrantTypeViewSet(self, **kwargs) queryset Represent a lazy database lookup for a set of objects. GrantTypeSerializer GrantTypeViewSet.GrantTypeSerializer(self, *args, **kwargs) Handle metadata of CLR rounds GranTagFilter GranTagFilter(self, data=None, queryset=None, *, request=None, prefix=None) base_filters Dictionary that remembers insertion order declared_filters Dictionary that remembers insertion order Meta GranTagFilter.Meta(self, /, *args, **kwargs) GrantTagViewSet GrantTagViewSet(self, **kwargs) queryset Represent a lazy database lookup for a set of objects. GranTagFilter GrantTagViewSet.GranTagFilter(self, data=None, queryset=None, *, request=None, prefix=None) GrantTagSerializer GrantTagViewSet.GrantTagSerializer(self, *args, **kwargs) Handle metadata of CLR rounds dispatch GrantTagViewSet.dispatch(self, request, *args, **kwargs) .dispatch() is pretty much the same as Django's regular dispatch, but with extra hooks for startup, finalize, and exception handling. SubscriptionViewSet SubscriptionViewSet(self, **kwargs) Handle the Subscription API view behavior. filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Represent a lazy database lookup for a set of objects. get_queryset SubscriptionViewSet.get_queryset(self) Get the queryset for Subscription. TODO: * Add filter functionality. Returns: QuerySet: The Subscription queryset. SubscriptionSerializer SubscriptionViewSet.SubscriptionSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Subscription object. GrantViewSet GrantViewSet(self, **kwargs) Handle the Grant API view behavior. filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Define the Grant default queryset and manager. GrantSerializer GrantViewSet.GrantSerializer(self, *args, **kwargs) Handle serializing the Grant object. get_queryset GrantViewSet.get_queryset(self) Get the queryset for Grant. TODO: * Add additional filters. Returns: QuerySet: The Grant queryset. clr_round_metadata GrantViewSet.clr_round_metadata(self, request) Generate CLR Round metadata for Grants URL: api/v0.1/grants/get_clr_round_metadata/ contributions_rec_report GrantViewSet.contributions_rec_report(self, request) Generate Grantee Report for an Grant URL: api/v0.1/grants/contributions_rec_report/?id= &format=json contributions_sent_report GrantViewSet.contributions_sent_report(self, request) Generate report for grant contributions made by an address URL: api/v0.1/grants/contributions_sent_report/?address= &format=json","title":"Router"},{"location":"grants/serializers/","text":"grants.serializers GrantCLRSerializer GrantCLRSerializer(self, *args, **kwargs) Handle metadata of CLR rounds Meta GrantCLRSerializer.Meta(self, /, *args, **kwargs) Define the GrantCLR serializer metadata. GrantPayoutSerializer GrantPayoutSerializer(self, *args, **kwargs) Meta GrantPayoutSerializer.Meta(self, /, *args, **kwargs) CLRMatchSerializer CLRMatchSerializer(self, *args, **kwargs) Meta CLRMatchSerializer.Meta(self, /, *args, **kwargs) GrantSerializer GrantSerializer(self, *args, **kwargs) Handle serializing the Grant object. Meta GrantSerializer.Meta(self, /, *args, **kwargs) Define the grant serializer metadata. SubscriptionSerializer SubscriptionSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Subscription object. Meta SubscriptionSerializer.Meta(self, /, *args, **kwargs) Define the subscription serializer metadata. ContributionSerializer ContributionSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Contribution object. Meta ContributionSerializer.Meta(self, /, *args, **kwargs) Define the contribution serializer metadata. TransactionsSerializer TransactionsSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing Transactions information. Meta TransactionsSerializer.Meta(self, /, *args, **kwargs) Define the Transactions serializer metadata. CLRPayoutsSerializer CLRPayoutsSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing CLR Payout information. Meta CLRPayoutsSerializer.Meta(self, /, *args, **kwargs) Define the CLRPayout serializer metadata. DonorSerializer DonorSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing Donor information. Meta DonorSerializer.Meta(self, /, *args, **kwargs) Define the Donor serializer metadata. GrantTypeSerializer GrantTypeSerializer(self, *args, **kwargs) Handle metadata of CLR rounds Meta GrantTypeSerializer.Meta(self, /, *args, **kwargs) Define the GrantCLR serializer metadata. GrantTagSerializer GrantTagSerializer(self, *args, **kwargs) Handle metadata of CLR rounds Meta GrantTagSerializer.Meta(self, /, *args, **kwargs) Define the GrantCLR serializer metadata. GrantCollectionSerializer GrantCollectionSerializer(self, *args, **kwargs) Handle metadata of CLR rounds Meta GrantCollectionSerializer.Meta(self, /, *args, **kwargs) Define the GrantCLR serializer metadata.","title":"Serializers"},{"location":"grants/templatetags/","text":"grants.templatetags.grants_extra Define the add_url_schema template tag to allow cleaning up url in templates. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . addstr addstr(value, arg) Concats argument to string. Args: value (str): Original string arg (str): String to be concated Usage: {{ value|addstr(arg) }} Returns: str: The concatenated string. modulo modulo(num, val) Get the modulo of the provided number and value. Args: num (int): Something describing the number. val (int): Something describing the value. Usage: {{ num|modulo(val) }} Returns: int: The modulo of number and value.","title":"Template Tags"},{"location":"grants/utils/","text":"grants.utils Define the Grant utilities. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_clr_rounds_metadata get_clr_rounds_metadata() Fetches default CLR round metadata for stats/marketing flows. This is configured when multiple rounds are running is_grant_team_member is_grant_team_member(grant, profile) Checks to see if profile is a grant team member Args: grant (grants.models.Grant): The grant in question. profile (dashboard.models.Profile): The current user's profile. save_grant_to_notion save_grant_to_notion(grant) Post an insert to notions sybil-db table toggle_user_sybil toggle_user_sybil(sybil_users, non_sybil_users) util function which marks users as sybil/not bsci_script bsci_script(csv: str) -> tuple Generate records of sybil / non-sybil users based on the CSV output as provided by BSci detection pipeline.","title":"Utilities"},{"location":"grants/views/","text":"grants.views Define the Grant views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_keywords get_keywords() Get all Keywords. grants grants(request) Handle grants explorer. matching_funds matching_funds(request) Handle grant matching funds page. clr_grants clr_grants(request, round_num, sub_round_slug='', customer_name='') CLR grants explorer. grants_by_grant_type grants_by_grant_type(request, grant_type) Handle grants explorer. get_grant_tags get_grant_tags(request) Fetch matching grants tags grants_type_redirect grants_type_redirect(request, grant_type) Redirect old grant url with search params to /explorer keeping query params. grants_by_grant_clr grants_by_grant_clr(request, clr_round) Handle grants explorer. grant_details_api grant_details_api(request, grant_id) Json the Grant details. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. grant_details grant_details(request, grant_id, grant_slug) Display the Grant details page. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. grant_fund grant_fund(request, grant_id, grant_slug) Handle grant funding. bulk_fund bulk_fund(request) Called when checking out with an Ethereum cart manage_ethereum_cart_data manage_ethereum_cart_data(request) For the specified user address: 1. action == save will save the provided cart data as a JSON Store 2. action == delete will removed saved cart data from the JSON Store get_ethereum_cart_data get_ethereum_cart_data(request) For the specified user address, returns the saved checkout data if found get_replaced_tx get_replaced_tx(request) scrapes etherscan to get the replaced tx profile profile(request) Show grants profile of logged in user. quickstart quickstart(request) Display quickstart guide. hall_of_fame hall_of_fame(request) Display the hall of fame. leaderboard leaderboard(request) Display leaderboard. record_subscription_activity_helper record_subscription_activity_helper(activity_type, subscription, profile, anonymize=False) Registers a new activity concerning a grant subscription Args: activity_type (str): The type of activity, as defined in dashboard.models.Activity. subscription (grants.models.Subscription): The subscription in question. profile (dashboard.models.Profile): The current user's profile. record_grant_activity_helper record_grant_activity_helper(activity_type, grant, profile, amount=None, token=None) Registers a new activity concerning a grant Args: activity_type (str): The type of activity, as defined in dashboard.models.Activity. grant (grants.models.Grant): The grant in question. profile (dashboard.models.Profile): The current user's profile. ingest_contributions ingest_contributions(request) Ingest missing contributions get_clr_sybil_input get_clr_sybil_input(request, round_id) This returns a paginated JSON response to return contributions which are considered while calculating the QF match for a given CLR get_trust_bonus get_trust_bonus(request) JSON POST/GET endpoint which returns the trust bonus score of given addresses csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. api_toggle_user_sybil api_toggle_user_sybil(request) POST endpoint which allows to mark a list of users as sybil or remove them the sybil tag from them. This is intended to be used by BSCI to ensure they can toggle it every 12 hours based on their findings as opposed to having it done at the end. upload_sybil_csv upload_sybil_csv(request) This endpoint would be used by bsci to upload the csv generated by the bsci team which will be uploaded to S3 for further processing. The history of the file uploaded will be stored in S3 and JSONStore would be updated to get the latest csv to mark users as sybil/not csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"healthcheck/healthchecks/","text":"healthcheck.healthchecks Define custom healthchecks. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . DefaultIPFSBackend DefaultIPFSBackend(self) Define the IPFS healthcheck backend. critical_service bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. check_status DefaultIPFSBackend.check_status(self) Define the functionality of the health check. identifier DefaultIPFSBackend.identifier(self) Define the displayed name of the healthcheck. InfuraIPFSBackend InfuraIPFSBackend(self) Define the IPFS healthcheck backend. critical_service bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. check_status InfuraIPFSBackend.check_status(self) Define the functionality of the health check. identifier InfuraIPFSBackend.identifier(self) Define the displayed name of the healthcheck. GithubRateLimiting GithubRateLimiting(self) Define the Github ratelimiting healthcheck backend. critical_service bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. check_status GithubRateLimiting.check_status(self) Define the functionality of the health check. identifier GithubRateLimiting.identifier(self) Define the displayed name of the healthcheck.","title":"Healthchecks"},{"location":"kudos/admin/","text":"kudos.admin Define Admin views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TokenRequestAdmin TokenRequestAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TransferEnabledForAdmin TransferEnabledForAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BulkTransferCouponAdmin BulkTransferCouponAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BulkTransferRedemptionAdmin BulkTransferRedemptionAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TokenAdmin TokenAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TransferAdmin TransferAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"kudos/forms/","text":"kudos.forms Define Forms. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . KudosSearchForm KudosSearchForm(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None) Form template for kudos search. Attributes: kudos_search (form): Use for kudos search GET request. base_fields Dictionary that remembers insertion order declared_fields Dictionary that remembers insertion order","title":"Forms"},{"location":"kudos/helpers/","text":"kudos.helpers Define helper functions. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_token get_token(token_id, network, address) Helper to find the kudos.Token primary key, given the contract address and token_id fields. This function was created so that we can find the kudos token pk, only know the contract and token_id from the blockchain. This is useful when linking to gitcoin from outside sites such as Open Sea. Args: token_id (int): The token_id field in the database (from blockchain) network (str): The ethereum network address (str): Contract address for this token (from blockchain) Returns: obj or None: Return Django object if found, else None.","title":"Helpers"},{"location":"kudos/models/","text":"kudos.models Define models. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TokenQuerySet TokenQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Tokens. visible TokenQuerySet.visible(self) Filter results down to visible tokens only. keyword TokenQuerySet.keyword(self, keyword) Filter results to all Token objects containing the keywords. Args: keyword (str): The keyword to search title, issue description, and issue keywords by. Returns: kudos.models.TokenQuerySet: The QuerySet of tokens filtered by keyword. Token Token(self, *args, **kwargs) Model representing a Kudos ERC721 token on the blockchain. The model attempts to match the actual blockchain data as much as possible, without being duplicative. Attributes: artist (str): The artist that created the kudos image. background_color (str): 6 digit hex code background color. See Open Sea docs for details. cloned_from_id (int): Original Kudos that this one was cloned from. contract (FK): Foreing key to the Contract model. description (str): Description of the kudos. external_url (str): External URL pointer to image asset. See Open Sea docs for details. image (str): Image file name. name (str): Kudos name. num_clones_allowed (int): How many clones are allowed to be made. num_clones_available (int): How many clones the Kudos has left. num_clones_in_wild (int): How many clones there are in the wild. owner_address (str): ETH address of the owner. Pulled from the ownerOf contract function. platform (str): Where the Kudos originated from. price_finney (int): Price to clone the Kudos in finney. rarity (str): Rarity metric, defined in kudos.utils.py tags (str): Comma delimited tags. TODO: change to array token_id (int): the token_id on the blockchain. txid (str): The ethereum transaction id that generated this kudos. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. artist A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. as_img Convert the provided buffer to another format. Args: obj (File): The File/ContentFile object. Exceptions: Exception: Cowardly catch blanket exceptions here, log it, and return None. Returns: BytesIO: The BytesIO stream containing the converted File data. None: If there is an exception, the method returns None. background_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bulk_transfers Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. capitalized_name Capitalize name Returns: str: Capitalized name. cloned_from_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contract Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. contract_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. external_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hidden A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hidden_token_details_page A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. humanized_name Turn snake_case into Snake Case. Returns: str: The humanized name. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. image A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_token_cloned_from Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. kudos_transfer Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_clones_allowed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_clones_available Calculate the number of clones available for a kudos. Returns: int: Number of clones available. num_clones_available_counting_indirect_send A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_clones_in_wild A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. offers Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. override_display_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. owner_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. owners_handles . differs from owners_profiles in that not everyone who has received a kudos has a profile Returns: array: array of handles owners_profiles . Returns: array: QuerySet of Profiles platform A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_month A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_quarter A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_week A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preview_img_mode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. price_finney A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. price_in_eth Convert price from finney to eth. Returns: float or int: price in eth. price_in_gwei Convert price from finney to gwei. Returns: float or int: price in gwei. price_in_wei Convert price from finney to wei. Returns: float or int: price in wei. quests_reward Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. rarity A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. send_enabled_for_non_gitcoin_admins A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. shortened_address Shorten ethereum address to only the first and last 4 digits. Returns: str: shortened address. suppress_sync A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. transfers_enabled Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. get_relative_url Token.get_relative_url(self) Get the relative URL for the Bounty. Attributes: preceding_slash (bool): Whether or not to include a preceding slash. Returns: str: The relative URL for the Bounty. send_enabled_for Token.send_enabled_for(self, user) Arguments: - user: a django user object Returns: bool: Wehther a send should be enabled for this user KudosTransfer KudosTransfer(self, *args, **kwargs) Model that represents a request to clone a Kudos. Typically this gets created when using the \"kudos send\" functionality. The model is inherited from the SendCryptoAsset model, which is also used by Tips. Attributes: from_address (str): Eth address of the person that is sending the kudos. kudos_token (kudos.Token): Foreign key to the kudos_token that was cloned. This is filled in after the kudos has been cloned. kudos_token_cloned_from (kudos.Token): Foreign key to the kudos_token that will be cloned and sent. recipient_profile (dashboard.Profile): Foreign key to the profile of the person that is being sent the kudos. sender_profile (dashboard.Profile): Foreign key to the profile of the person that is sending the kudos. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_transfer_redemptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_token Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. kudos_token_cloned_from Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudos_token_cloned_from_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_url URL used for indirect send. Deprecated in favor of receive_url_for_recipient Returns: str: URL for recipient. receive_url_for_recipient URL used for indirect send. Deprecated in favor of receive_url_for_recipient Returns: str: URL for recipient. recipient_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. recipient_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. trust_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Contract Contract(self, *args, **kwargs) Contract(id, created_on, modified_on, address, is_latest, network) address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_latest A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_contract Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Wallet Wallet(self, *args, **kwargs) DEPRECATED. Kudos Address where the tokens are stored. Currently not used. Instead we are using preferred_payout_address for now. Attributes: address (TYPE): Description profile (TYPE): Description address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferred_kudos_wallet Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BulkTransferCoupon BulkTransferCoupon(self, *args, **kwargs) Model representing a bulk send of Kudos bulk_transfer_redemptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. comments_to_put_in_kudos_transfer A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. current_uses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. make_paid_for_first_minutes A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_remaining A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_total A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. secret A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_pk A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tag A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BulkTransferRedemption BulkTransferRedemption(self, *args, **kwargs) Model representing a bulk send of Kudos coupon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. coupon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudostransfer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudostransfer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. redeemed_by Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. redeemed_by_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TokenRequest TokenRequest(self, *args, **kwargs) Define the TokenRequest model. approved A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. artist A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. artwork_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. gas_price_overide A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. numClonesAllowed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. platform A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. priceFinney A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rejection_reason A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mint TokenRequest.mint(self, gas_price_gwei=None) Approve / mint this token. TransferEnabledFor TransferEnabledFor(self, *args, **kwargs) Model that represents the ability to send a Kudos, i f token.send_enabled_for_non_gitcoin_admins is true. _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"kudos/router/","text":"kudos.router Define dashboard specific DRF API routes. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TokenSerializer TokenSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta TokenSerializer.Meta(self, /, *args, **kwargs) WalletSerializer WalletSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta WalletSerializer.Meta(self, /, *args, **kwargs) WalletViewSet WalletViewSet(self, **kwargs) filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Represent a lazy database lookup for a set of objects. WalletSerializer WalletViewSet.WalletSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) TokenViewSet TokenViewSet(self, **kwargs) filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Handle the manager queryset for Tokens. TokenSerializer TokenViewSet.TokenSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs)","title":"Routers"},{"location":"kudos/utils/","text":"kudos.utils Define utility functions. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . humanize_name humanize_name(name) Turn snake_case into Snake Case. Returns: str: The humanized name. computerize_name computerize_name(name) Turn Humanized Name into humanized_name. Returns: str: computerized_name get_rarity_score get_rarity_score(num_clones_allowed) Calculate rarity metrics based on the num_clones_allowed. Args: num_clones_allowed (int): Number of kudos clones allowed. Returns: str: Rarity description. Raises: ValueError: Raises an error if the number of clones allowed in less than one. KudosError KudosError(self, /, *args, **kwargs) Base class for exceptions in this module. KudosContract KudosContract(self, network='localhost', sockets=False) A class represending the Kudos.sol contract. Note: There are two types of interactions that can be done on the Solidity contract, - call() - transact() A call() is just a getter, and does not require gas, or an account to transact with. A transact() or transaction requires gas and typically changes state on the contract. A transaction requires an account, because it needs somewhere to pull the gas from. When working in Javascript and web3js, Metamask is used to handle this interaction. When working in Python and web3py, there is no interaction with MetaMask so this needs to be handled behind the scenes, by providing the account and private_key to web3py to create the raw transaction. Attributes: address (str): Eth address of the kudos contract network (str): The blockchain network (localhost, rinkeby, ropsten, mainnet) get_kudos_map KudosContract.get_kudos_map(kudos, metadata) Pass in a kudos array that is returned from web3, convert to dictionary. Use this to operate on the database. Args: kudos (list): A kudos object returned from the Kudos.sol contract. Soldidity returns the Kudos strcut as an array. metadata (dict): The metadata return from the tokenURI. Returns: dict: Kudos dictionary with key/values to be used to interact with the database. may_require_key KudosContract.may_require_key(f) Decorator to check if the operation needs a private key. log_args KudosContract.log_args(f) Decorator to log out the contract args. retry KudosContract.retry(f) Decorator to retry a function if it failed. remove_kudos_orphans_db KudosContract.remove_kudos_orphans_db(self) DEPRECATED. This funciton must be updated to use. Sync up existing kudos from the blockchain to the database. Then remove all \"orphaned Kudos\" from the database. sync_db_without_txid KudosContract.sync_db_without_txid(self, kudos_id) DEPRECATED. The regular sync_db method should be preferred over this. This method is only to be used if you are syncing kudos directly from the blockchain and don't know the txid. The problem with not having a txid that is there is no good way to related it back to the kudos_transfer object. Which means we don't know who the original sender is. Args: kudos_id (int): Kudos id. sync_db KudosContract.sync_db(self, kudos_id, txid) Sync up the Kudos contract on the blockchain with the database. Args: kudos_id (int): Kudos Id txid (str): The transaction hash. mint KudosContract.mint(self, *args, account=None, private_key=None, skip_sync=False, gas_price_gwei=None, dont_wait_for_kudos_id_return_tx_hash_instead=False) Contract transaction method. Mint a new Gen0 Kudos on the blockchain. Not to be confused with clone. A clone() operation is only valid for an already existing Gen0 Kudos. From Kudos.sol: Args: *args: From Kudos.sol: mint( address _to, uint256 _priceFinney, uint256 _numClonesAllowed, string _tokenURI, ) account (str, optional): Public account address. Not needed for localhost testing. private_key (str, optional): Private key for account. Not needed for localhost testing. skip_sync (bool, optional): If True, don't sync the database after the mint. Returns: int: If a sync did occur, returns the kudos_id sync_latest KudosContract.sync_latest(self, the_buffer=0) Contract transaction method. Sync the latest kudos from the chain clone KudosContract.clone(self, *args, account=None, private_key=None, skip_sync=False) Contract transaction method. Args: *args: From Kudos.sol clone( address _to, uint256 _tokenId, uint256 numClonesRequested ) account (str, optional): Public account address. Not needed for localhost testing. private_key (str, optional): Private key for account. Not needed for localhost testing. skip_sync (bool, optional): If True, don't sync the database after the mint. Returns: int: The kudos_id. burn KudosContract.burn(self, *args, account=None, private_key=None, skip_sync=False) Contract transaction method. Args: *args: From Kudos.sol burn( address _owner, uint256 _tokenId, ) account (str, optional): Public account address. Not needed for localhost testing. private_key (str, optional): Private key for account. Not needed for localhost testing. skip_sync (bool, optional): If True, don't sync the database after the mint. Returns: int: The kudos_id. getKudosById KudosContract.getKudosById(self, *args, to_dict=False) Contract call method. Args: *args: From Kudos.sol: getKudosById(uint256 tokenId) to_dict (bool, optional): Return a dictionary mapping instead of an array. Returns: list or dict: From Kudos.sol returns (uint256 priceFinney, uint256 numClonesAllowed, uint256 numClonesInWild, uint256 clonedFromId) getLatestId KudosContract.getLatestId(self) Contract call method. From Kudos.sol: getLatestId() view public returns (uint256 tokenId) Returns: int: The latest token id. gen0_exists_db KudosContract.gen0_exists_db(self, kudos_name) Helper method. Args: kudos_name (TYPE): Description Returns: bool: Whether or not the token name exists. create_token_uri_url KudosContract.create_token_uri_url(self, **kwargs) Create a tokenURI object, upload it to IPFS, and return the URL. Keyword Args: name (str): Name of the kudos. image (str): Image location of the kudos. Should be a link to an image on the web. description (str): Word description of the kudos. attributes (dict): Dictionary containing attributes of the kudos. tags (str): comma delimited tags. number_of_clones_allowed (int): self explanatory. rarity (int): integer from 0 to 100 (0 is most common). external_url (str): External link to where the Kudos lives on the Gitcoin site. background_color (str): Hex code. Returns: str: URL location on IPFS where the URI data is stored.","title":"Utilities"},{"location":"kudos/views/","text":"kudos.views Define view for the Kudos app. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_profile get_profile(handle) Get the gitcoin profile. TODO: This might be depreacted in favor of the sync_profile function in the future. Args: handle (str): The github handle. Returns: obj: The profile model object. about about(request) Render the Kudos 'about' page. marketplace marketplace(request) Render the Kudos 'marketplace' page. search search(request) Render the search page. TODO: This might no longer be used. details details(request, kudos_id, name) Render the Kudos 'detail' page. mint mint(request) Render the Kudos 'mint' page. This is mostly a placeholder for future functionality. kudos_preferred_wallet kudos_preferred_wallet(request, handle) Returns the address, if any, that someone would like to be send kudos directly to. send_2 send_2(request) Handle the first start of the Kudos email send. This form is filled out before the 'send' button is clicked. send_3 send_3(request) Handle the third stage of sending a kudos (the POST). This function is derived from send_tip_3. The request to send the kudos is added to the database, but the transaction has not happened yet. The txid is added in send_kudos_4 . Returns: JsonResponse: The response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. send_4 send_4(request) Handle the fourth stage of sending a tip (the POST). Once the metamask transaction is complete, add it to the database. Returns: JsonResponse: response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. receive receive(request, key, txid, network) Handle the receiving of a kudos (the POST). Returns: TemplateResponse: the UI with the kudos confirmed","title":"Views"},{"location":"linkshortener/admin/","text":"linkshortener.admin LinkShortenerAdmin LinkShortenerAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"linkshortener/commands/","text":"linkshortener.management.commands.create_shortlinks Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"linkshortener/models/","text":"linkshortener.models Link Link(self, *args, **kwargs) Link(id, created_on, modified_on, comments, url, shortcode, uses) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. shortcode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. uses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"linkshortener/views/","text":"linkshortener.views","title":"Views"},{"location":"marketing/admin/","text":"marketing.admin Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . RoundupEmailAdmin RoundupEmailAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. UpcomingDateAdmin UpcomingDateAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. LeaderboardRankAdmin LeaderboardRankAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. EmailEventAdmin EmailEventAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GithubEventAdmin GithubEventAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SlackPresenceAdmin SlackPresenceAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. MatchAdmin MatchAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. AlumniAdmin AlumniAdmin(self, model, admin_site) Define the Alumni admin layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. get_queryset AlumniAdmin.get_queryset(self, request) Override the get_queryset method to include FK lookups. get_profile_email AlumniAdmin.get_profile_email(self, obj) Get the profile email address. get_profile_username AlumniAdmin.get_profile_username(self, obj) Get the profile username. EmailSubscriberAdmin EmailSubscriberAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SlackUserAdmin SlackUserAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"marketing/commands/","text":"marketing.management.commands.assemble_leaderboards Define the management command to assemble leaderboard rankings. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.backfill_analytics Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.bounty_feedback_email Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.expiration_start_work Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.expiration_tip Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.expiration Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.funder_stale_email Define the stale funder email management command for background execution. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) Define the stale funder management command class. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. add_arguments Command.add_arguments(self, parser) Define the added arguments to handle for the management command. handle Command.handle(self, *args, **options) Handle the stale funder management command logic. marketing.management.commands.gdpr_reconsent_eu Define the GDPR reconsent command for EU users. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.gdpr_update_email Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.new_bounties_email Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.pending_start_work_actions Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.process_email_events Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.pull_github Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.pull_stats Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,either version 3 of the License,or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not,see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.roundup Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.send_quarterly_stats Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_github Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_keywords Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_mail Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_slack Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"marketing/mails/","text":"marketing.mails Define the standard marketing email logic. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . send_mail send_mail(from_email, _to_email, subject, body, html=False, from_name='Gitcoin.co', cc_emails=None, categories=None, debug_mode=False, zip_path=None, csv=None) Send email via SendGrid. setup_lang setup_lang(to_email) Activate the User's language preferences based on their email address. Args: to_email (str): The email address to lookup language preferences for.","title":"Mails"},{"location":"marketing/models/","text":"marketing.models Define the marketing models and related logic. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Alumni Alumni(self, *args, **kwargs) Alumni(id, created_on, modified_on, profile, organization, comments, public) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. public A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailSubscriber EmailSubscriber(self, *args, **kwargs) EmailSubscriber(id, created_on, modified_on, email, source, email_index, active, newsletter, preferences, metadata, priv, github, keywords, profile, form_submission_records) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email_index A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. form_submission_records A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. newsletter A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferences A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. priv A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ManualStat ManualStat(self, *args, **kwargs) Define the manual stat model; which records stats that are not available on the platform comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: date>, is_next=True, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: date>, is_next=False, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. val A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Stat Stat(self, *args, **kwargs) Stat(id, created_on, modified_on, key, val) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. val A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. LeaderboardRankQuerySet LeaderboardRankQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Leaderboard Ranks. active LeaderboardRankQuerySet.active(self) Filter results to only active LeaderboardRank objects. LeaderboardRank LeaderboardRank(self, *args, **kwargs) Define the Leaderboard Rank model. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. leaderboard A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. product A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tech_keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Match Match(self, *args, **kwargs) Match(id, created_on, modified_on, email, bounty, direction, github_username) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. direction A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Keyword Keyword(self, *args, **kwargs) Keyword(id, created_on, modified_on, keyword) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keyword A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SlackUser SlackUser(self, *args, **kwargs) SlackUser(id, created_on, modified_on, username, email, last_seen, last_unseen, profile, times_seen, times_unseen) email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_seen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_unseen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. presences Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. times_seen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. times_unseen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SlackPresence SlackPresence(self, *args, **kwargs) SlackPresence(id, created_on, modified_on, slackuser, status) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slackuser Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. slackuser_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GithubEvent GithubEvent(self, *args, **kwargs) GithubEvent(id, created_on, modified_on, profile, what, repo, payload) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. what A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GithubOrgToTwitterHandleMapping GithubOrgToTwitterHandleMapping(self, *args, **kwargs) GithubOrgToTwitterHandleMapping(id, created_on, modified_on, github_orgname, twitter_handle) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_orgname A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailEvent EmailEvent(self, *args, **kwargs) EmailEvent(id, created_on, modified_on, email, event, category, ip_address) category A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. event A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. AccountDeletionRequest AccountDeletionRequest(self, *args, **kwargs) AccountDeletionRequest(id, created_on, modified_on, handle, profile) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailSupressionList EmailSupressionList(self, *args, **kwargs) EmailSupressionList(id, created_on, modified_on, email, metadata, comments) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. MarketingCallback MarketingCallback(self, *args, **kwargs) Define the Marketing Callback model; which is used to peform various functions when a user with a specific secret key visits the site. _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. msg A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. val A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Job Job(self, *args, **kwargs) Job(id, created_on, modified_on, title, description, link, active) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. RoundupEmail RoundupEmail(self, *args, **kwargs) RoundupEmail(id, created_on, modified_on, from_email, from_name, subject, body, kudos_ids, highlights, sponsor, bounties_spec, kudos, news, updates, videos, issue, release_date, hide_dynamic) body A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounties_spec A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateField: release_date>, is_next=True, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateField: release_date>, is_next=False, **kwargs) hide_dynamic A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. highlights A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. issue A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_ids A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. news A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. release_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subject A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. updates A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. videos A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. UpcomingDate UpcomingDate(self, *args, **kwargs) Define the upcoming date model comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. context_tag A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: date>, is_next=True, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: last_modified>, is_next=True, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: date>, is_next=False, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: last_modified>, is_next=False, **kwargs) _method UpcomingDate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. img_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_modified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sequence A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. uid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailInventory EmailInventory(self, *args, **kwargs) EmailInventory(id, created_on, modified_on, path, email_tag, type, reason, product, era, comment, url, stats) comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email_tag A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. era A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailInventory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailInventory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailInventory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailInventory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. path A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. product A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reason A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. stats A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"marketing/stats/","text":"marketing.stats Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . grants grants() Creates a stats entry for 'grants', which stores the total value of all grant contributions in the system to date","title":"Stats"},{"location":"marketing/utils/","text":"marketing.utils Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . validate_slack_integration validate_slack_integration(token, channel, message=None, icon_url='') Validate the Slack token and channel combination by posting a message. Args: token (str): The Slack API token. channel (str): The Slack channel to send the message. message (str): The Slack message to be sent. Defaults to: The Gitcoin Slack integration is working fine. icon_url (str): The URL to the avatar to be used. Defaults to: the gitcoin helmet. Attributes: result (dict): The result dictionary defining success status and error message. error_messages (dict): The dictionary mapping of expected error result types. message (str): The response message to display to the user. sc (SlackClient): The slack client object. response (dict): The Slack response payload. error (str): The error code Raises: SlackClientError: The exception is raised for any Slack-specific error. Returns: str: The response message. get_platform_wide_stats get_platform_wide_stats(since_last_n_days=90) Get platform wide stats for quarterly stats email. Args: since_last_n_days (int): The number of days from now to retrieve stats. Returns: dict: The platform statistics dictionary. func_name func_name() Determine the calling function's name. Returns: str: The parent method's name.","title":"Utilities"},{"location":"marketing/views/","text":"marketing.views Define the marketing views. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . matching_settings matching_settings(request) Handle viewing and updating EmailSubscriber matching settings. TODO: * Migrate this to a form and handle validation. * Migrate Keyword to taggit. * Maybe migrate keyword information to Profile instead of using ES? Returns: TemplateResponse: The populated matching template. set_mautic_dnc set_mautic_dnc(profile, es, form) Places contact on the DNC list on mautic Args: profile (Profile): The user who is being unsubscribed es (EmailSubscriber): The details of the subscription form (dict): email_type: bool email_settings email_settings(request, key) Display email settings. Args: key (str): The private key to lookup email subscriber data. TODO: * Remove all ES.priv_key lookups and use request.user only. * Remove settings_helper_get_auth usage. Returns: TemplateResponse: The email settings view populated with ES data. slack_settings slack_settings(request) Display and save user's slack settings. Returns: TemplateResponse: The user's slack settings template response. token_settings token_settings(request) Display and save user's token settings. Returns: TemplateResponse: The user's token settings template response. account_settings account_settings(request) Display and save user's Account settings. Returns: TemplateResponse: The user's Account settings template response. job_settings job_settings(request) Display and save user's Account settings. Returns: TemplateResponse: The user's Account settings template response. org_settings org_settings(request) Display and save user's Account settings. Returns: TemplateResponse: The user's Account settings template response. tax_settings tax_settings(request) Display and save user's Tax settings. Returns: TemplateResponse: The user's Tax settings template response. leaderboard leaderboard(request, key='') Display the leaderboard for top earning or paying profiles. Args: key (str): The leaderboard display type. Defaults to: quarterly_earners. Returns: TemplateResponse: The leaderboard template response.","title":"Views"},{"location":"marketing/webbhookviews/","text":"marketing.webhookviews process process(request) Process email webhook callback data. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Webhook Views"},{"location":"retail/commands/","text":"retail.management.commands.warm_cache Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"retail/emails/","text":"retail.emails Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . render_kudos_email render_kudos_email(to_email, kudos_transfer, is_new, html_template, text_template=None) Summary Args: to_emails (list): An array of email addresses to send the email to. kudos_transfer (model): An instance of the kudos.model.KudosTransfer object. This contains the information about the kudos that will be cloned. is_new (TYPE): Description Returns: tup: response_html, response_txt render_funder_stale render_funder_stale(github_username, days=60, time_as_str='a couple months') Render the stale funder email template. Args: github_username (str): The Github username to be referenced in the email. days (int): The number of days back to reference. time_as_str (str): The human readable length of time to reference. Returns: str: The rendered response as a string. render_share_bounty render_share_bounty(to_email, msg, from_profile, invite_url=None, kudos_invite=False) Render the share bounty email template. Args: to_email: user to send the email to. msg: the message sent in the email. Returns: str: The rendered response as a string. funder_payout_reminder funder_payout_reminder(request) Display the funder payment reminder email template. Params: username (str): The Github username to reference in the email. Returns: HttpResponse: The HTML version of the templated HTTP response. no_applicant_reminder no_applicant_reminder(request) Display the no applicant for bounty reminder email template. Params: username (str): The Github username to reference in the email. Returns: HttpResponse: The HTML version of the templated HTTP response. funder_stale funder_stale(request) Display the stale funder email template. Params: limit (int): The number of days to limit the scope of the email to. duration_copy (str): The copy to use for associated duration text. username (str): The Github username to reference in the email. Returns: HttpResponse: The HTML version of the templated HTTP response.","title":"Emails"},{"location":"retail/helpers/","text":"retail.helpers Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Helpers"},{"location":"retail/templatetags/","text":"retail.templatetags.is_in_list Define the is_in_list template tag to allow if in list checking in templates. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . is_in_list is_in_list(value, input_list) Determine whether or not the value is in the provided list. Args: value: Any value that could be a member of the provided list. input_list (list): A list of any primitive types to be checked. Usage: {% if ' '|is_in_list:'about,slack,home,help,mission' %} Returns: bool: Whether or not the value exists in the input_list. retail.templatetags.matches Define the is_in_list template tag to allow if in list checking in templates. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . matches matches(text, pattern) Determine whether or not the value matches regex pattern. Args: value: Any value. pattern : Regex pattern against which the text is matched. Usage: {% if ' '|matches:'^/explorer$' %} Returns: bool: Whether or not the value matches the pattern.","title":"Template Tags"},{"location":"retail/utils/","text":"retail.utils Define the Retail utility methods and general logic. Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . build_stat_results build_stat_results(keyword=None) Buidl the results page context. Args: keyword (str): The keyword to build statistic results.","title":"Utilities"},{"location":"retail/views/","text":"retail.views Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . how_it_works how_it_works(request, work_type) Show How it Works / Funder page. mission mission(request) Render the Mission response. avatar avatar(request) Render the avatar response. products products(request) Render the Products response. not_a_token not_a_token(request) Render the not_a_token response. results results(request, keyword=None) Render the Results response. activity activity(request) Render the Activity response.","title":"Views"},{"location":"tdi/admin/","text":"tdi.admin Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. WhitepaperAccessRequestAdmin WhitepaperAccessRequestAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"tdi/models/","text":"tdi.models Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . AccessCodes AccessCodes(self, *args, **kwargs) AccessCodes(id, created_on, modified_on, invitecode, maxuses) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. invitecode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. maxuses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. WhitepaperAccess WhitepaperAccess(self, *args, **kwargs) WhitepaperAccess(id, created_on, modified_on, invitecode, email, ip) email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. invitecode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. WhitepaperAccessRequest WhitepaperAccessRequest(self, *args, **kwargs) WhitepaperAccessRequest(id, created_on, modified_on, comments, email, role, ip, processed) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. role A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"tdi/views/","text":"tdi.views Copyright (C) 2021 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Views"}]}